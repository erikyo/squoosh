// This file is autogenerated by lib/feature-plugin.js
import * as browserAVIFEncoderMeta from 'features/encoders/avif/shared/meta';
import * as browserGIFEncoderMeta from 'features/encoders/browserGIF/shared/meta';
import * as browserJPEGEncoderMeta from 'features/encoders/browserJPEG/shared/meta';
import * as browserPNGEncoderMeta from 'features/encoders/browserPNG/shared/meta';
import * as jxlEncoderMeta from 'features/encoders/jxl/shared/meta';
import * as mozJPEGEncoderMeta from 'features/encoders/mozJPEG/shared/meta';
import * as oxiPNGEncoderMeta from 'features/encoders/oxiPNG/shared/meta';
import * as webPEncoderMeta from 'features/encoders/webP/shared/meta';
import * as wp2EncoderMeta from 'features/encoders/wp2/shared/meta';


import {avifWebEncode} from 'features/encoders/avif/client';
import {gifWebEncode} from 'features/encoders/browserGIF/client';
import {jpegWebEncode} from 'features/encoders/browserJPEG/client';
import {pngWebEncode} from 'features/encoders/browserPNG/client';
import {jxlWebEncode} from 'features/encoders/jxl/client';
import {mozpegWebEncode} from 'features/encoders/mozJPEG/client';
import {oxipngWebEncode} from 'features/encoders/oxiPNG/client';
import {webpWebEncode} from 'features/encoders/webP/client';
import {wp2WebEncode} from 'features/encoders/wp2/client';

export type EncoderState =
  | { type: "avif", options: browserAVIFEncoderMeta.EncodeOptions }
  | { type: "browserGIF", options: browserGIFEncoderMeta.EncodeOptions }
  | { type: "browserJPEG", options: browserJPEGEncoderMeta.EncodeOptions }
  | { type: "browserPNG", options: browserPNGEncoderMeta.EncodeOptions }
  | { type: "jxl", options: jxlEncoderMeta.EncodeOptions }
  | { type: "mozJPEG", options: mozJPEGEncoderMeta.EncodeOptions }
  | { type: "oxiPNG", options: oxiPNGEncoderMeta.EncodeOptions }
  | { type: "webP", options: webPEncoderMeta.EncodeOptions }
  | { type: "wp2", options: wp2EncoderMeta.EncodeOptions };

export type EncoderOptions =
    | browserAVIFEncoderMeta.EncodeOptions
    | browserGIFEncoderMeta.EncodeOptions
    | browserJPEGEncoderMeta.EncodeOptions
    | browserPNGEncoderMeta.EncodeOptions
    | jxlEncoderMeta.EncodeOptions
    | mozJPEGEncoderMeta.EncodeOptions
    | oxiPNGEncoderMeta.EncodeOptions
    | webPEncoderMeta.EncodeOptions
    | wp2EncoderMeta.EncodeOptions;

export const encoderMap = {
  avif: {
    meta: browserAVIFEncoderMeta,
    ...avifWebEncode
  },
  browserGIF: {
    meta: browserGIFEncoderMeta,
    ...gifWebEncode
  },
  browserJPEG: {
    meta: browserJPEGEncoderMeta,
    ...jpegWebEncode
  },
  browserPNG: {
    meta: browserPNGEncoderMeta,
    ...pngWebEncode
  },
  jxl: {
    meta: jxlEncoderMeta,
    ...jxlWebEncode
  },
  mozJPEG: {
    meta: mozJPEGEncoderMeta,
    ...mozpegWebEncode
  },
  oxiPNG: {
    meta: oxiPNGEncoderMeta,
    ...oxipngWebEncode
  },
  webP: {
    meta: webPEncoderMeta,
    ...webpWebEncode
  },
  wp2: {
    meta: wp2EncoderMeta,
    ...wp2WebEncode
  },
}
export type EncoderType = keyof typeof encoderMap

import {Options as quantizeOptions, defaultOptions as quantizeDefaultOptions} from 'features/processors/quantize/shared/meta';
import {Options as resizeOptions, defaultOptions as resizeDefaultOptions} from 'features/processors/resize/shared/meta';

interface Enableable { enabled: boolean; }

export interface ProcessorOptions {
  quantize: quantizeOptions;
  resize: resizeOptions;
}
export interface ProcessorState {
  quantize: Enableable & quantizeOptions;
  resize: Enableable & resizeOptions;
}
export const defaultProcessorState: ProcessorState = {
  quantize: { enabled: false, ...quantizeDefaultOptions },
  resize: { enabled: false, ...resizeDefaultOptions },
}

import * as rotatePreprocessorMeta from 'features/preprocessors/rotate/shared/meta';
export interface PreprocessorState {
  rotate: rotatePreprocessorMeta.Options,
}
export const defaultPreprocessorState: PreprocessorState = {
  rotate: rotatePreprocessorMeta.defaultOptions,
};
