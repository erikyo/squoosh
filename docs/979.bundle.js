(()=>{"use strict";var e={979:(e,r,t)=>{function o(e,r){return new Promise((t=>{e.addEventListener("message",(function o({data:n}){null!=n&&n.type===r&&(e.removeEventListener("message",o),t(n))}))}))}async function n(e,r,n){const i={type:"wasm_bindgen_worker_init",module:e,memory:r,receiver:n.receiver()};try{await Promise.all(Array.from({length:n.numThreads()},(()=>{const e=new Worker(new URL(t.p+t.u(979),t.b),{type:void 0});return e.postMessage(i),o(e,"wasm_bindgen_worker_ready")}))),n.build()}finally{n.free()}}t.d(r,{Q:()=>n}),o(self,"wasm_bindgen_worker_init").then((async e=>{const r=await t.e(851).then(t.bind(t,851));await r.default(e.module,e.memory),postMessage({type:"wasm_bindgen_worker_ready"}),r.wbg_rayon_start_worker(e.receiver)}))}},r={};function t(o){var n=r[o];if(void 0!==n)return n.exports;var i=r[o]={exports:{}};return e[o](i,i.exports,t),i.exports}t.m=e,t.d=(e,r)=>{for(var o in r)t.o(r,o)&&!t.o(e,o)&&Object.defineProperty(e,o,{enumerable:!0,get:r[o]})},t.f={},t.e=e=>Promise.all(Object.keys(t.f).reduce(((r,o)=>(t.f[o](e,r),r)),[])),t.u=e=>e+".bundle.js",t.miniCssF=e=>{},t.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),t.o=(e,r)=>Object.prototype.hasOwnProperty.call(e,r),t.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},(()=>{var e;t.g.importScripts&&(e=t.g.location+"");var r=t.g.document;if(!e&&r&&(r.currentScript&&(e=r.currentScript.src),!e)){var o=r.getElementsByTagName("script");o.length&&(e=o[o.length-1].src)}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),t.p=e})(),(()=>{t.b=self.location+"";var e={979:1};t.f.i=(r,o)=>{e[r]||importScripts(t.p+t.u(r))};var r=self.webpackChunksquoosh_browser_demo=self.webpackChunksquoosh_browser_demo||[],o=r.push.bind(r);r.push=r=>{var[n,i,s]=r;for(var a in i)t.o(i,a)&&(t.m[a]=i[a]);for(s&&s(t);n.length;)e[n.pop()]=1;o(r)}})(),t(979)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,