"use strict";(self.webpackChunksquoosh=self.webpackChunksquoosh||[]).push([[487],{487:(n,r,t)=>{t.r(r),t.d(r,{default:()=>e});const e=("file:///C:/Users/Dell7010/Desktop/web/tw/squoosh/codecs/jxl/enc/jxl_enc.js",function(n){var r,e;(n=void 0!==(n=n||{})?n:{}).ready=new Promise((function(n,t){r=n,e=t}));var o,a={};for(o in n)n.hasOwnProperty(o)&&(a[o]=n[o]);var i,u=[],c="./this.program",f="";f=self.location.href,f=0!==(f="file:///C:/Users/Dell7010/Desktop/web/tw/squoosh/codecs/jxl/enc/jxl_enc.js").indexOf("blob:")?f.substr(0,f.lastIndexOf("/")+1):"",i=function(n){var r=new XMLHttpRequest;return r.open("GET",n,!1),r.responseType="arraybuffer",r.send(null),new Uint8Array(r.response)};var s,l,p=n.print||console.log.bind(console),h=n.printErr||console.warn.bind(console);for(o in a)a.hasOwnProperty(o)&&(n[o]=a[o]);a=null,n.arguments&&(u=n.arguments),n.thisProgram&&(c=n.thisProgram),n.quit&&n.quit,n.wasmBinary&&(s=n.wasmBinary),n.noExitRuntime,"object"!=typeof WebAssembly&&q("no native wasm support detected");var y=!1,g=new TextDecoder("utf8");function d(n,r){if(!n)return"";for(var t=n+r,e=n;!(e>=t)&&b[e];)++e;return g.decode(b.subarray(n,e))}function v(n,r,t,e){if(!(e>0))return 0;for(var o=t,a=t+e-1,i=0;i<n.length;++i){var u=n.charCodeAt(i);if(u>=55296&&u<=57343&&(u=65536+((1023&u)<<10)|1023&n.charCodeAt(++i)),u<=127){if(t>=a)break;r[t++]=u}else if(u<=2047){if(t+1>=a)break;r[t++]=192|u>>6,r[t++]=128|63&u}else if(u<=65535){if(t+2>=a)break;r[t++]=224|u>>12,r[t++]=128|u>>6&63,r[t++]=128|63&u}else{if(t+3>=a)break;r[t++]=240|u>>18,r[t++]=128|u>>12&63,r[t++]=128|u>>6&63,r[t++]=128|63&u}}return r[t]=0,t-o}function m(n){for(var r=0,t=0;t<n.length;++t){var e=n.charCodeAt(t);e>=55296&&e<=57343&&(e=65536+((1023&e)<<10)|1023&n.charCodeAt(++t)),e<=127?++r:r+=e<=2047?2:e<=65535?3:4}return r}var w,_,b,T,A,C,F,E,D,P=new TextDecoder("utf-16le");function W(n,r){for(var t=n,e=t>>1,o=e+r/2;!(e>=o)&&A[e];)++e;return t=e<<1,P.decode(b.subarray(n,t))}function k(n,r,t){if(void 0===t&&(t=2147483647),t<2)return 0;for(var e=r,o=(t-=2)<2*n.length?t/2:n.length,a=0;a<o;++a){var i=n.charCodeAt(a);T[r>>1]=i,r+=2}return T[r>>1]=0,r-e}function M(n){return 2*n.length}function j(n,r){for(var t=0,e="";!(t>=r/4);){var o=C[n+4*t>>2];if(0==o)break;if(++t,o>=65536){var a=o-65536;e+=String.fromCharCode(55296|a>>10,56320|1023&a)}else e+=String.fromCharCode(o)}return e}function R(n,r,t){if(void 0===t&&(t=2147483647),t<4)return 0;for(var e=r,o=e+t-4,a=0;a<n.length;++a){var i=n.charCodeAt(a);if(i>=55296&&i<=57343&&(i=65536+((1023&i)<<10)|1023&n.charCodeAt(++a)),C[r>>2]=i,(r+=4)+4>o)break}return C[r>>2]=0,r-e}function S(n){for(var r=0,t=0;t<n.length;++t){var e=n.charCodeAt(t);e>=55296&&e<=57343&&++t,r+=4}return r}function O(r){w=r,n.HEAP8=_=new Int8Array(r),n.HEAP16=T=new Int16Array(r),n.HEAP32=C=new Int32Array(r),n.HEAPU8=b=new Uint8Array(r),n.HEAPU16=A=new Uint16Array(r),n.HEAPU32=F=new Uint32Array(r),n.HEAPF32=E=new Float32Array(r),n.HEAPF64=D=new Float64Array(r)}n.INITIAL_MEMORY;var U,I,x=[],Y=[],H=[],V=0,N=null,B=null;function q(r){n.onAbort&&n.onAbort(r),h(r+=""),y=!0,r="abort("+r+"). Build with -s ASSERTIONS=1 for more info.";var t=new WebAssembly.RuntimeError(r);throw e(t),t}function z(n){return n.startsWith("data:application/octet-stream;base64,")}if(n.preloadedImages={},n.preloadedAudios={},n.locateFile)z(L="jxl_enc.wasm")||(I=L,L=n.locateFile?n.locateFile(I,f):f+I);else var L=new URL(t(192),t.b).toString();function G(n){try{if(n==L&&s)return new Uint8Array(s);if(i)return i(n);throw"both async and sync fetching of the wasm failed"}catch(n){q(n)}}function J(r){for(;r.length>0;){var t=r.shift();if("function"!=typeof t){var e=t.func;"number"==typeof e?void 0===t.arg?U.get(e)():U.get(e)(t.arg):e(void 0===t.arg?null:t.arg)}else t(n)}}function X(n){this.excPtr=n,this.ptr=n-16,this.set_type=function(n){C[this.ptr+8>>2]=n},this.get_type=function(){return C[this.ptr+8>>2]},this.set_destructor=function(n){C[this.ptr+0>>2]=n},this.get_destructor=function(){return C[this.ptr+0>>2]},this.set_refcount=function(n){C[this.ptr+4>>2]=n},this.set_caught=function(n){n=n?1:0,_[this.ptr+12>>0]=n},this.get_caught=function(){return 0!=_[this.ptr+12>>0]},this.set_rethrown=function(n){n=n?1:0,_[this.ptr+13>>0]=n},this.get_rethrown=function(){return 0!=_[this.ptr+13>>0]},this.init=function(n,r){this.set_type(n),this.set_destructor(r),this.set_refcount(0),this.set_caught(!1),this.set_rethrown(!1)},this.add_ref=function(){var n=C[this.ptr+4>>2];C[this.ptr+4>>2]=n+1},this.release_ref=function(){var n=C[this.ptr+4>>2];return C[this.ptr+4>>2]=n-1,1===n}}var K={mappings:{},buffers:[null,[],[]],printChar:function(n,r){var t=K.buffers[n];0===r||10===r?((1===n?p:h)(function(n,r,t){for(var e=0;n[e]&&!(e>=NaN);)++e;return g.decode(n.subarray?n.subarray(0,e):new Uint8Array(n.slice(0,e)))}(t)),t.length=0):t.push(r)},varargs:void 0,get:function(){return K.varargs+=4,C[K.varargs-4>>2]},getStr:function(n){return d(n)},get64:function(n,r){return n}},Z={};function Q(n){for(;n.length;){var r=n.pop();n.pop()(r)}}function $(n){return this.fromWireType(F[n>>2])}var nn={},rn={},tn={};function en(n){if(void 0===n)return"_unknown";var r=(n=n.replace(/[^a-zA-Z0-9_]/g,"$")).charCodeAt(0);return r>=48&&r<=57?"_"+n:n}function on(n,r){return n=en(n),new Function("body","return function "+n+'() {\n    "use strict";    return body.apply(this, arguments);\n};\n')(r)}function an(n,r){var t=on(r,(function(n){this.name=r,this.message=n;var t=new Error(n).stack;void 0!==t&&(this.stack=this.toString()+"\n"+t.replace(/^Error(:[^\n]*)?\n/,""))}));return t.prototype=Object.create(n.prototype),t.prototype.constructor=t,t.prototype.toString=function(){return void 0===this.message?this.name:this.name+": "+this.message},t}var un=void 0;function cn(n){throw new un(n)}function fn(n,r,t){function e(r){var e=t(r);e.length!==n.length&&cn("Mismatched type converter count");for(var o=0;o<n.length;++o)gn(n[o],e[o])}n.forEach((function(n){tn[n]=r}));var o=new Array(r.length),a=[],i=0;r.forEach((function(n,r){rn.hasOwnProperty(n)?o[r]=rn[n]:(a.push(n),nn.hasOwnProperty(n)||(nn[n]=[]),nn[n].push((function(){o[r]=rn[n],++i===a.length&&e(o)})))})),0===a.length&&e(o)}function sn(n){switch(n){case 1:return 0;case 2:return 1;case 4:return 2;case 8:return 3;default:throw new TypeError("Unknown type size: "+n)}}var ln=void 0;function pn(n){for(var r="",t=n;b[t];)r+=ln[b[t++]];return r}var hn=void 0;function yn(n){throw new hn(n)}function gn(n,r,t){if(t=t||{},!("argPackAdvance"in r))throw new TypeError("registerType registeredInstance requires argPackAdvance");var e=r.name;if(n||yn('type "'+e+'" must have a positive integer typeid pointer'),rn.hasOwnProperty(n)){if(t.ignoreDuplicateRegistrations)return;yn("Cannot register type '"+e+"' twice")}if(rn[n]=r,delete tn[n],nn.hasOwnProperty(n)){var o=nn[n];delete nn[n],o.forEach((function(n){n()}))}}var dn=[],vn=[{},{value:void 0},{value:null},{value:!0},{value:!1}];function mn(n){n>4&&0==--vn[n].refcount&&(vn[n]=void 0,dn.push(n))}function wn(n){switch(n){case void 0:return 1;case null:return 2;case!0:return 3;case!1:return 4;default:var r=dn.length?dn.pop():vn.length;return vn[r]={refcount:1,value:n},r}}function _n(n){if(null===n)return"null";var r=typeof n;return"object"===r||"array"===r||"function"===r?n.toString():""+n}function bn(n,r){switch(r){case 2:return function(n){return this.fromWireType(E[n>>2])};case 3:return function(n){return this.fromWireType(D[n>>3])};default:throw new TypeError("Unknown float type: "+n)}}function Tn(r,t,e){return r.includes("j")?function(r,t,e){var o=n["dynCall_"+r];return e&&e.length?o.apply(null,[t].concat(e)):o.call(null,t)}(r,t,e):U.get(t).apply(null,e)}function An(n,r){var t,e,o,a=(n=pn(n)).includes("j")?(t=n,e=r,o=[],function(){o.length=arguments.length;for(var n=0;n<arguments.length;n++)o[n]=arguments[n];return Tn(t,e,o)}):U.get(r);return"function"!=typeof a&&yn("unknown function pointer with signature "+n+": "+r),a}var Cn=void 0;function Fn(n){var r=Bn(n),t=pn(r);return Nn(r),t}function En(n,r,t){switch(r){case 0:return t?function(n){return _[n]}:function(n){return b[n]};case 1:return t?function(n){return T[n>>1]}:function(n){return A[n>>1]};case 2:return t?function(n){return C[n>>2]}:function(n){return F[n>>2]};default:throw new TypeError("Unknown integer type: "+n)}}var Dn={};function Pn(){return"object"==typeof globalThis?globalThis:Function("return this")()}function Wn(n,r){var t=rn[n];return void 0===t&&yn(r+" has unknown type "+Fn(n)),t}var kn={};function Mn(n){try{return l.grow(n-w.byteLength+65535>>>16),O(l.buffer),1}catch(n){}}var jn={};function Rn(){if(!Rn.strings){var n={USER:"web_user",LOGNAME:"web_user",PATH:"/",PWD:"/",HOME:"/home/web_user",LANG:("object"==typeof navigator&&navigator.languages&&navigator.languages[0]||"C").replace("-","_")+".UTF-8",_:c||"./this.program"};for(var r in jn)n[r]=jn[r];var t=[];for(var r in n)t.push(r+"="+n[r]);Rn.strings=t}return Rn.strings}function Sn(n){return n%4==0&&(n%100!=0||n%400==0)}function On(n,r){for(var t=0,e=0;e<=r;t+=n[e++]);return t}var Un=[31,29,31,30,31,30,31,31,30,31,30,31],In=[31,28,31,30,31,30,31,31,30,31,30,31];function xn(n,r){for(var t=new Date(n.getTime());r>0;){var e=Sn(t.getFullYear()),o=t.getMonth(),a=(e?Un:In)[o];if(!(r>a-t.getDate()))return t.setDate(t.getDate()+r),t;r-=a-t.getDate()+1,t.setDate(1),o<11?t.setMonth(o+1):(t.setMonth(0),t.setFullYear(t.getFullYear()+1))}return t}un=n.InternalError=an(Error,"InternalError"),function(){for(var n=new Array(256),r=0;r<256;++r)n[r]=String.fromCharCode(r);ln=n}(),hn=n.BindingError=an(Error,"BindingError"),n.count_emval_handles=function(){for(var n=0,r=5;r<vn.length;++r)void 0!==vn[r]&&++n;return n},n.get_first_emval=function(){for(var n=5;n<vn.length;++n)if(void 0!==vn[n])return vn[n];return null},Cn=n.UnboundTypeError=an(Error,"UnboundTypeError");var Yn,Hn={u:function(n){return Vn(n+16)+16},I:function(n,r){},p:function(n,r,t){throw new X(n).init(r,t),n},h:function(n,r,t){return K.varargs=t,0},A:function(n,r,t){return K.varargs=t,0},B:function(n,r,t){K.varargs=t},m:function(n){var r=Z[n];delete Z[n];var t=r.rawConstructor,e=r.rawDestructor,o=r.fields;fn([n],o.map((function(n){return n.getterReturnType})).concat(o.map((function(n){return n.setterArgumentType}))),(function(n){var a={};return o.forEach((function(r,t){var e=r.fieldName,i=n[t],u=r.getter,c=r.getterContext,f=n[t+o.length],s=r.setter,l=r.setterContext;a[e]={read:function(n){return i.fromWireType(u(c,n))},write:function(n,r){var t=[];s(l,n,f.toWireType(t,r)),Q(t)}}})),[{name:r.name,fromWireType:function(n){var r={};for(var t in a)r[t]=a[t].read(n);return e(n),r},toWireType:function(n,r){for(var o in a)if(!(o in r))throw new TypeError('Missing field:  "'+o+'"');var i=t();for(o in a)a[o].write(i,r[o]);return null!==n&&n.push(e,i),i},argPackAdvance:8,readValueFromPointer:$,destructorFunction:e}]}))},r:function(n,r,t,e,o){},D:function(n,r,t,e,o){var a=sn(t);gn(n,{name:r=pn(r),fromWireType:function(n){return!!n},toWireType:function(n,r){return r?e:o},argPackAdvance:8,readValueFromPointer:function(n){var e;if(1===t)e=_;else if(2===t)e=T;else{if(4!==t)throw new TypeError("Unknown boolean type size: "+r);e=C}return this.fromWireType(e[n>>a])},destructorFunction:null})},C:function(n,r){gn(n,{name:r=pn(r),fromWireType:function(n){var r=vn[n].value;return mn(n),r},toWireType:function(n,r){return wn(r)},argPackAdvance:8,readValueFromPointer:$,destructorFunction:null})},j:function(n,r,t){var e=sn(t);gn(n,{name:r=pn(r),fromWireType:function(n){return n},toWireType:function(n,r){if("number"!=typeof r&&"boolean"!=typeof r)throw new TypeError('Cannot convert "'+_n(r)+'" to '+this.name);return r},argPackAdvance:8,readValueFromPointer:bn(r,e),destructorFunction:null})},l:function(r,t,e,o,a,i){var u=function(n,r){for(var t=[],e=0;e<n;e++)t.push(C[(r>>2)+e]);return t}(t,e);r=pn(r),a=An(o,a),function(r,t,e){n.hasOwnProperty(r)?((void 0===e||void 0!==n[r].overloadTable&&void 0!==n[r].overloadTable[e])&&yn("Cannot register public name '"+r+"' twice"),function(n,r,t){if(void 0===n[r].overloadTable){var e=n[r];n[r]=function(){return n[r].overloadTable.hasOwnProperty(arguments.length)||yn("Function '"+t+"' called with an invalid number of arguments ("+arguments.length+") - expects one of ("+n[r].overloadTable+")!"),n[r].overloadTable[arguments.length].apply(this,arguments)},n[r].overloadTable=[],n[r].overloadTable[e.argCount]=e}}(n,r,r),n.hasOwnProperty(e)&&yn("Cannot register multiple overloads of a function with the same number of arguments ("+e+")!"),n[r].overloadTable[e]=t):(n[r]=t,void 0!==e&&(n[r].numArguments=e))}(r,(function(){!function(n,r){var t=[],e={};throw r.forEach((function n(r){e[r]||rn[r]||(tn[r]?tn[r].forEach(n):(t.push(r),e[r]=!0))})),new Cn(n+": "+t.map(Fn).join([", "]))}("Cannot call "+r+" due to unbound types",u)}),t-1),fn([],u,(function(e){var o=[e[0],null].concat(e.slice(1));return function(r,t,e){n.hasOwnProperty(r)||cn("Replacing nonexistant public symbol"),void 0!==n[r].overloadTable&&void 0!==e?n[r].overloadTable[e]=t:(n[r]=t,n[r].argCount=e)}(r,function(n,r,t,e,o){var a=r.length;a<2&&yn("argTypes array size mismatch! Must at least get return value and 'this' types!");for(var i=null!==r[1]&&null!==t,u=!1,c=1;c<r.length;++c)if(null!==r[c]&&void 0===r[c].destructorFunction){u=!0;break}var f="void"!==r[0].name,s="",l="";for(c=0;c<a-2;++c)s+=(0!==c?", ":"")+"arg"+c,l+=(0!==c?", ":"")+"arg"+c+"Wired";var p="return function "+en(n)+"("+s+") {\nif (arguments.length !== "+(a-2)+") {\nthrowBindingError('function "+n+" called with ' + arguments.length + ' arguments, expected "+(a-2)+" args!');\n}\n";u&&(p+="var destructors = [];\n");var h=u?"destructors":"null",y=["throwBindingError","invoker","fn","runDestructors","retType","classParam"],g=[yn,e,o,Q,r[0],r[1]];for(i&&(p+="var thisWired = classParam.toWireType("+h+", this);\n"),c=0;c<a-2;++c)p+="var arg"+c+"Wired = argType"+c+".toWireType("+h+", arg"+c+"); // "+r[c+2].name+"\n",y.push("argType"+c),g.push(r[c+2]);if(i&&(l="thisWired"+(l.length>0?", ":"")+l),p+=(f?"var rv = ":"")+"invoker(fn"+(l.length>0?", ":"")+l+");\n",u)p+="runDestructors(destructors);\n";else for(c=i?1:2;c<r.length;++c){var d=1===c?"thisWired":"arg"+(c-2)+"Wired";null!==r[c].destructorFunction&&(p+=d+"_dtor("+d+"); // "+r[c].name+"\n",y.push(d+"_dtor"),g.push(r[c].destructorFunction))}return f&&(p+="var ret = retType.fromWireType(rv);\nreturn ret;\n"),p+="}\n",y.push(p),function(n,r){if(!(n instanceof Function))throw new TypeError("new_ called with constructor type "+typeof n+" which is not a function");var t=on(n.name||"unknownFunctionName",(function(){}));t.prototype=n.prototype;var e=new t,o=n.apply(e,r);return o instanceof Object?o:e}(Function,y).apply(null,g)}(r,o,null,a,i),t-1),[]}))},c:function(n,r,t,e,o){r=pn(r),-1===o&&(o=4294967295);var a=sn(t),i=function(n){return n};if(0===e){var u=32-8*t;i=function(n){return n<<u>>>u}}var c=r.includes("unsigned");gn(n,{name:r,fromWireType:i,toWireType:function(n,t){if("number"!=typeof t&&"boolean"!=typeof t)throw new TypeError('Cannot convert "'+_n(t)+'" to '+this.name);if(t<e||t>o)throw new TypeError('Passing a number "'+_n(t)+'" from JS side to C/C++ side to an argument of type "'+r+'", which is outside the valid range ['+e+", "+o+"]!");return c?t>>>0:0|t},argPackAdvance:8,readValueFromPointer:En(r,a,0!==e),destructorFunction:null})},b:function(n,r,t){var e=[Int8Array,Uint8Array,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array][r];function o(n){var r=F,t=r[n>>=2],o=r[n+1];return new e(w,o,t)}gn(n,{name:t=pn(t),fromWireType:o,argPackAdvance:8,readValueFromPointer:o},{ignoreDuplicateRegistrations:!0})},k:function(n,r){var t="std::string"===(r=pn(r));gn(n,{name:r,fromWireType:function(n){var r,e=F[n>>2];if(t)for(var o=n+4,a=0;a<=e;++a){var i=n+4+a;if(a==e||0==b[i]){var u=d(o,i-o);void 0===r?r=u:(r+=String.fromCharCode(0),r+=u),o=i+1}}else{var c=new Array(e);for(a=0;a<e;++a)c[a]=String.fromCharCode(b[n+4+a]);r=c.join("")}return Nn(n),r},toWireType:function(n,r){r instanceof ArrayBuffer&&(r=new Uint8Array(r));var e="string"==typeof r;e||r instanceof Uint8Array||r instanceof Uint8ClampedArray||r instanceof Int8Array||yn("Cannot pass non-string to std::string");var o=(t&&e?function(){return m(r)}:function(){return r.length})(),a=Vn(4+o+1);if(F[a>>2]=o,t&&e)v(r,b,a+4,o+1);else if(e)for(var i=0;i<o;++i){var u=r.charCodeAt(i);u>255&&(Nn(a),yn("String has UTF-16 code units that do not fit in 8 bits")),b[a+4+i]=u}else for(i=0;i<o;++i)b[a+4+i]=r[i];return null!==n&&n.push(Nn,a),a},argPackAdvance:8,readValueFromPointer:$,destructorFunction:function(n){Nn(n)}})},g:function(n,r,t){var e,o,a,i,u;t=pn(t),2===r?(e=W,o=k,i=M,a=function(){return A},u=1):4===r&&(e=j,o=R,i=S,a=function(){return F},u=2),gn(n,{name:t,fromWireType:function(n){for(var t,o=F[n>>2],i=a(),c=n+4,f=0;f<=o;++f){var s=n+4+f*r;if(f==o||0==i[s>>u]){var l=e(c,s-c);void 0===t?t=l:(t+=String.fromCharCode(0),t+=l),c=s+r}}return Nn(n),t},toWireType:function(n,e){"string"!=typeof e&&yn("Cannot pass non-string to C++ string type "+t);var a=i(e),c=Vn(4+a+r);return F[c>>2]=a>>u,o(e,c+4,a+r),null!==n&&n.push(Nn,c),c},argPackAdvance:8,readValueFromPointer:$,destructorFunction:function(n){Nn(n)}})},n:function(n,r,t,e,o,a){Z[n]={name:pn(r),rawConstructor:An(t,e),rawDestructor:An(o,a),fields:[]}},d:function(n,r,t,e,o,a,i,u,c,f){Z[n].fields.push({fieldName:pn(r),getterReturnType:t,getter:An(e,o),getterContext:a,setterArgumentType:i,setter:An(u,c),setterContext:f})},E:function(n,r){gn(n,{isVoid:!0,name:r=pn(r),argPackAdvance:0,fromWireType:function(){},toWireType:function(n,r){}})},e:mn,H:function(n){return 0===n?wn(Pn()):(n=void 0===(t=Dn[r=n])?pn(r):t,wn(Pn()[n]));var r,t},G:function(n){n>4&&(vn[n].refcount+=1)},o:function(r,t,e,o){r=function(n){return n||yn("Cannot use deleted val. handle = "+n),vn[n].value}(r);var a=kn[t];return a||(a=function(r){for(var t="",e=0;e<r;++e)t+=(0!==e?", ":"")+"arg"+e;var o="return function emval_allocator_"+r+"(constructor, argTypes, args) {\n";for(e=0;e<r;++e)o+="var argType"+e+" = requireRegisteredType(Module['HEAP32'][(argTypes >>> 2) + "+e+'], "parameter '+e+'");\nvar arg'+e+" = argType"+e+".readValueFromPointer(args);\nargs += argType"+e+"['argPackAdvance'];\n";return o+="var obj = new constructor("+t+");\nreturn __emval_register(obj);\n}\n",new Function("requireRegisteredType","Module","__emval_register",o)(Wn,n,wn)}(t),kn[t]=a),a(r,e,o)},a:function(){q()},t:function(n,r,t){b.copyWithin(n,r,r+t)},f:function(n){var r,t=b.length,e=2147483648;if((n>>>=0)>e)return!1;for(var o=1;o<=4;o*=2){var a=t*(1+.2/o);if(a=Math.min(a,n+100663296),Mn(Math.min(e,((r=Math.max(n,a))%65536>0&&(r+=65536-r%65536),r))))return!0}return!1},w:function(n,r){var t=0;return Rn().forEach((function(e,o){var a=r+t;C[n+4*o>>2]=a,function(n,r,t){for(var e=0;e<n.length;++e)_[r++>>0]=n.charCodeAt(e);_[r>>0]=0}(e,a),t+=e.length+1})),0},x:function(n,r){var t=Rn();C[n>>2]=t.length;var e=0;return t.forEach((function(n){e+=n.length+1})),C[r>>2]=e,0},i:function(n){return 0},z:function(n,r,t,e){var o=K.getStreamFromFD(n),a=K.doReadv(o,r,t);return C[e>>2]=a,0},q:function(n,r,t,e,o){},y:function(n,r,t,e){for(var o=0,a=0;a<t;a++){for(var i=C[r+8*a>>2],u=C[r+(8*a+4)>>2],c=0;c<u;c++)K.printChar(n,b[i+c]);o+=u}return C[e>>2]=o,0},s:function(n){},v:function(n,r,t,e){return function(n,r,t,e){var o=C[e+40>>2],a={tm_sec:C[e>>2],tm_min:C[e+4>>2],tm_hour:C[e+8>>2],tm_mday:C[e+12>>2],tm_mon:C[e+16>>2],tm_year:C[e+20>>2],tm_wday:C[e+24>>2],tm_yday:C[e+28>>2],tm_isdst:C[e+32>>2],tm_gmtoff:C[e+36>>2],tm_zone:o?d(o):""},i=d(t),u={"%c":"%a %b %d %H:%M:%S %Y","%D":"%m/%d/%y","%F":"%Y-%m-%d","%h":"%b","%r":"%I:%M:%S %p","%R":"%H:%M","%T":"%H:%M:%S","%x":"%m/%d/%y","%X":"%H:%M:%S","%Ec":"%c","%EC":"%C","%Ex":"%m/%d/%y","%EX":"%H:%M:%S","%Ey":"%y","%EY":"%Y","%Od":"%d","%Oe":"%e","%OH":"%H","%OI":"%I","%Om":"%m","%OM":"%M","%OS":"%S","%Ou":"%u","%OU":"%U","%OV":"%V","%Ow":"%w","%OW":"%W","%Oy":"%y"};for(var c in u)i=i.replace(new RegExp(c,"g"),u[c]);var f=["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],s=["January","February","March","April","May","June","July","August","September","October","November","December"];function l(n,r,t){for(var e="number"==typeof n?n.toString():n||"";e.length<r;)e=t[0]+e;return e}function p(n,r){return l(n,r,"0")}function h(n,r){function t(n){return n<0?-1:n>0?1:0}var e;return 0===(e=t(n.getFullYear()-r.getFullYear()))&&0===(e=t(n.getMonth()-r.getMonth()))&&(e=t(n.getDate()-r.getDate())),e}function y(n){switch(n.getDay()){case 0:return new Date(n.getFullYear()-1,11,29);case 1:return n;case 2:return new Date(n.getFullYear(),0,3);case 3:return new Date(n.getFullYear(),0,2);case 4:return new Date(n.getFullYear(),0,1);case 5:return new Date(n.getFullYear()-1,11,31);case 6:return new Date(n.getFullYear()-1,11,30)}}function g(n){var r=xn(new Date(n.tm_year+1900,0,1),n.tm_yday),t=new Date(r.getFullYear(),0,4),e=new Date(r.getFullYear()+1,0,4),o=y(t),a=y(e);return h(o,r)<=0?h(a,r)<=0?r.getFullYear()+1:r.getFullYear():r.getFullYear()-1}var w={"%a":function(n){return f[n.tm_wday].substring(0,3)},"%A":function(n){return f[n.tm_wday]},"%b":function(n){return s[n.tm_mon].substring(0,3)},"%B":function(n){return s[n.tm_mon]},"%C":function(n){return p((n.tm_year+1900)/100|0,2)},"%d":function(n){return p(n.tm_mday,2)},"%e":function(n){return l(n.tm_mday,2," ")},"%g":function(n){return g(n).toString().substring(2)},"%G":function(n){return g(n)},"%H":function(n){return p(n.tm_hour,2)},"%I":function(n){var r=n.tm_hour;return 0==r?r=12:r>12&&(r-=12),p(r,2)},"%j":function(n){return p(n.tm_mday+On(Sn(n.tm_year+1900)?Un:In,n.tm_mon-1),3)},"%m":function(n){return p(n.tm_mon+1,2)},"%M":function(n){return p(n.tm_min,2)},"%n":function(){return"\n"},"%p":function(n){return n.tm_hour>=0&&n.tm_hour<12?"AM":"PM"},"%S":function(n){return p(n.tm_sec,2)},"%t":function(){return"\t"},"%u":function(n){return n.tm_wday||7},"%U":function(n){var r=new Date(n.tm_year+1900,0,1),t=0===r.getDay()?r:xn(r,7-r.getDay()),e=new Date(n.tm_year+1900,n.tm_mon,n.tm_mday);if(h(t,e)<0){var o=On(Sn(e.getFullYear())?Un:In,e.getMonth()-1)-31,a=31-t.getDate()+o+e.getDate();return p(Math.ceil(a/7),2)}return 0===h(t,r)?"01":"00"},"%V":function(n){var r,t=new Date(n.tm_year+1900,0,4),e=new Date(n.tm_year+1901,0,4),o=y(t),a=y(e),i=xn(new Date(n.tm_year+1900,0,1),n.tm_yday);return h(i,o)<0?"53":h(a,i)<=0?"01":(r=o.getFullYear()<n.tm_year+1900?n.tm_yday+32-o.getDate():n.tm_yday+1-o.getDate(),p(Math.ceil(r/7),2))},"%w":function(n){return n.tm_wday},"%W":function(n){var r=new Date(n.tm_year,0,1),t=1===r.getDay()?r:xn(r,0===r.getDay()?1:7-r.getDay()+1),e=new Date(n.tm_year+1900,n.tm_mon,n.tm_mday);if(h(t,e)<0){var o=On(Sn(e.getFullYear())?Un:In,e.getMonth()-1)-31,a=31-t.getDate()+o+e.getDate();return p(Math.ceil(a/7),2)}return 0===h(t,r)?"01":"00"},"%y":function(n){return(n.tm_year+1900).toString().substring(2)},"%Y":function(n){return n.tm_year+1900},"%z":function(n){var r=n.tm_gmtoff,t=r>=0;return r=(r=Math.abs(r)/60)/60*100+r%60,(t?"+":"-")+String("0000"+r).slice(-4)},"%Z":function(n){return n.tm_zone},"%%":function(){return"%"}};for(var c in w)i.includes(c)&&(i=i.replace(new RegExp(c,"g"),w[c](a)));var b,T,A,F=(T=m(b=i)+1,v(b,A=new Array(T),0,A.length),A);return F.length>r?0:(function(n,r){_.set(n,r)}(F,n),F.length-1)}(n,r,t,e)},F:function(n){return n?(52,C[qn()>>2]=52,-1):0}},Vn=(function(){var r={a:Hn};function t(r,t){var e,o=r.exports;n.asm=o,O((l=n.asm.J).buffer),U=n.asm.Q,e=n.asm.K,Y.unshift(e),function(r){if(V--,n.monitorRunDependencies&&n.monitorRunDependencies(V),0==V&&(null!==N&&(clearInterval(N),N=null),B)){var t=B;B=null,t()}}()}function o(n){t(n.instance)}function a(n){return(s||"function"!=typeof fetch?Promise.resolve().then((function(){return G(L)})):fetch(L,{credentials:"same-origin"}).then((function(n){if(!n.ok)throw"failed to load wasm binary file at '"+L+"'";return n.arrayBuffer()})).catch((function(){return G(L)}))).then((function(n){return WebAssembly.instantiate(n,r)})).then(n,(function(n){h("failed to asynchronously prepare wasm: "+n),q(n)}))}if(V++,n.monitorRunDependencies&&n.monitorRunDependencies(V),n.instantiateWasm)try{return n.instantiateWasm(r,t)}catch(n){return h("Module.instantiateWasm callback failed with error: "+n),!1}(s||"function"!=typeof WebAssembly.instantiateStreaming||z(L)||"function"!=typeof fetch?a(o):fetch(L,{credentials:"same-origin"}).then((function(n){return WebAssembly.instantiateStreaming(n,r).then(o,(function(n){return h("wasm streaming compile failed: "+n),h("falling back to ArrayBuffer instantiation"),a(o)}))}))).catch(e)}(),n.___wasm_call_ctors=function(){return(n.___wasm_call_ctors=n.asm.K).apply(null,arguments)},n._malloc=function(){return(Vn=n._malloc=n.asm.L).apply(null,arguments)}),Nn=n._free=function(){return(Nn=n._free=n.asm.M).apply(null,arguments)},Bn=n.___getTypeName=function(){return(Bn=n.___getTypeName=n.asm.N).apply(null,arguments)},qn=(n.___embind_register_native_and_builtin_types=function(){return(n.___embind_register_native_and_builtin_types=n.asm.O).apply(null,arguments)},n.___errno_location=function(){return(qn=n.___errno_location=n.asm.P).apply(null,arguments)});function zn(t){function e(){Yn||(Yn=!0,n.calledRun=!0,y||(J(Y),r(n),n.onRuntimeInitialized&&n.onRuntimeInitialized(),function(){if(n.postRun)for("function"==typeof n.postRun&&(n.postRun=[n.postRun]);n.postRun.length;)r=n.postRun.shift(),H.unshift(r);var r;J(H)}()))}t=t||u,V>0||(function(){if(n.preRun)for("function"==typeof n.preRun&&(n.preRun=[n.preRun]);n.preRun.length;)r=n.preRun.shift(),x.unshift(r);var r;J(x)}(),V>0||(n.setStatus?(n.setStatus("Running..."),setTimeout((function(){setTimeout((function(){n.setStatus("")}),1),e()}),1)):e()))}if(n.dynCall_jiji=function(){return(n.dynCall_jiji=n.asm.R).apply(null,arguments)},n.dynCall_iiji=function(){return(n.dynCall_iiji=n.asm.S).apply(null,arguments)},n.dynCall_iiiiij=function(){return(n.dynCall_iiiiij=n.asm.T).apply(null,arguments)},n.dynCall_iiiiijj=function(){return(n.dynCall_iiiiijj=n.asm.U).apply(null,arguments)},n.dynCall_iiiiiijj=function(){return(n.dynCall_iiiiiijj=n.asm.V).apply(null,arguments)},n.dynCall_viijii=function(){return(n.dynCall_viijii=n.asm.W).apply(null,arguments)},B=function n(){Yn||zn(),Yn||(B=n)},n.run=zn,n.preInit)for("function"==typeof n.preInit&&(n.preInit=[n.preInit]);n.preInit.length>0;)n.preInit.pop()();return zn(),n.ready})},192:(n,r,t)=>{n.exports=t.p+"3789600d79f77913a61e.wasm"}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,