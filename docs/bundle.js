(()=>{var n,r,e={757:(n,r,e)=>{n.exports=e(666)},666:n=>{var r=function(n){"use strict";var r,e=Object.prototype,t=e.hasOwnProperty,o="function"==typeof Symbol?Symbol:{},a=o.iterator||"@@iterator",i=o.asyncIterator||"@@asyncIterator",u=o.toStringTag||"@@toStringTag";function c(n,r,e){return Object.defineProperty(n,r,{value:e,enumerable:!0,configurable:!0,writable:!0}),n[r]}try{c({},"")}catch(n){c=function(n,r,e){return n[r]=e}}function s(n,r,e,t){var o=r&&r.prototype instanceof m?r:m,a=Object.create(o.prototype),i=new x(t||[]);return a._invoke=function(n,r,e){var t=l;return function(o,a){if(t===p)throw new Error("Generator is already running");if(t===h){if("throw"===o)throw a;return F()}for(e.method=o,e.arg=a;;){var i=e.delegate;if(i){var u=C(i,e);if(u){if(u===v)continue;return u}}if("next"===e.method)e.sent=e._sent=e.arg;else if("throw"===e.method){if(t===l)throw t=h,e.arg;e.dispatchException(e.arg)}else"return"===e.method&&e.abrupt("return",e.arg);t=p;var c=f(n,r,e);if("normal"===c.type){if(t=e.done?h:d,c.arg===v)continue;return{value:c.arg,done:e.done}}"throw"===c.type&&(t=h,e.method="throw",e.arg=c.arg)}}}(n,e,i),a}function f(n,r,e){try{return{type:"normal",arg:n.call(r,e)}}catch(n){return{type:"throw",arg:n}}}n.wrap=s;var l="suspendedStart",d="suspendedYield",p="executing",h="completed",v={};function m(){}function g(){}function y(){}var w={};c(w,a,(function(){return this}));var b=Object.getPrototypeOf,_=b&&b(b(W([])));_&&_!==e&&t.call(_,a)&&(w=_);var A=y.prototype=m.prototype=Object.create(w);function T(n){["next","throw","return"].forEach((function(r){c(n,r,(function(n){return this._invoke(r,n)}))}))}function E(n,r){function e(o,a,i,u){var c=f(n[o],n,a);if("throw"!==c.type){var s=c.arg,l=s.value;return l&&"object"==typeof l&&t.call(l,"__await")?r.resolve(l.__await).then((function(n){e("next",n,i,u)}),(function(n){e("throw",n,i,u)})):r.resolve(l).then((function(n){s.value=n,i(s)}),(function(n){return e("throw",n,i,u)}))}u(c.arg)}var o;this._invoke=function(n,t){function a(){return new r((function(r,o){e(n,t,r,o)}))}return o=o?o.then(a,a):a()}}function C(n,e){var t=n.iterator[e.method];if(t===r){if(e.delegate=null,"throw"===e.method){if(n.iterator.return&&(e.method="return",e.arg=r,C(n,e),"throw"===e.method))return v;e.method="throw",e.arg=new TypeError("The iterator does not provide a 'throw' method")}return v}var o=f(t,n.iterator,e.arg);if("throw"===o.type)return e.method="throw",e.arg=o.arg,e.delegate=null,v;var a=o.arg;return a?a.done?(e[n.resultName]=a.value,e.next=n.nextLoc,"return"!==e.method&&(e.method="next",e.arg=r),e.delegate=null,v):a:(e.method="throw",e.arg=new TypeError("iterator result is not an object"),e.delegate=null,v)}function P(n){var r={tryLoc:n[0]};1 in n&&(r.catchLoc=n[1]),2 in n&&(r.finallyLoc=n[2],r.afterLoc=n[3]),this.tryEntries.push(r)}function k(n){var r=n.completion||{};r.type="normal",delete r.arg,n.completion=r}function x(n){this.tryEntries=[{tryLoc:"root"}],n.forEach(P,this),this.reset(!0)}function W(n){if(n){var e=n[a];if(e)return e.call(n);if("function"==typeof n.next)return n;if(!isNaN(n.length)){var o=-1,i=function e(){for(;++o<n.length;)if(t.call(n,o))return e.value=n[o],e.done=!1,e;return e.value=r,e.done=!0,e};return i.next=i}}return{next:F}}function F(){return{value:r,done:!0}}return g.prototype=y,c(A,"constructor",y),c(y,"constructor",g),g.displayName=c(y,u,"GeneratorFunction"),n.isGeneratorFunction=function(n){var r="function"==typeof n&&n.constructor;return!!r&&(r===g||"GeneratorFunction"===(r.displayName||r.name))},n.mark=function(n){return Object.setPrototypeOf?Object.setPrototypeOf(n,y):(n.__proto__=y,c(n,u,"GeneratorFunction")),n.prototype=Object.create(A),n},n.awrap=function(n){return{__await:n}},T(E.prototype),c(E.prototype,i,(function(){return this})),n.AsyncIterator=E,n.async=function(r,e,t,o,a){void 0===a&&(a=Promise);var i=new E(s(r,e,t,o),a);return n.isGeneratorFunction(e)?i:i.next().then((function(n){return n.done?n.value:i.next()}))},T(A),c(A,u,"Generator"),c(A,a,(function(){return this})),c(A,"toString",(function(){return"[object Generator]"})),n.keys=function(n){var r=[];for(var e in n)r.push(e);return r.reverse(),function e(){for(;r.length;){var t=r.pop();if(t in n)return e.value=t,e.done=!1,e}return e.done=!0,e}},n.values=W,x.prototype={constructor:x,reset:function(n){if(this.prev=0,this.next=0,this.sent=this._sent=r,this.done=!1,this.delegate=null,this.method="next",this.arg=r,this.tryEntries.forEach(k),!n)for(var e in this)"t"===e.charAt(0)&&t.call(this,e)&&!isNaN(+e.slice(1))&&(this[e]=r)},stop:function(){this.done=!0;var n=this.tryEntries[0].completion;if("throw"===n.type)throw n.arg;return this.rval},dispatchException:function(n){if(this.done)throw n;var e=this;function o(t,o){return u.type="throw",u.arg=n,e.next=t,o&&(e.method="next",e.arg=r),!!o}for(var a=this.tryEntries.length-1;a>=0;--a){var i=this.tryEntries[a],u=i.completion;if("root"===i.tryLoc)return o("end");if(i.tryLoc<=this.prev){var c=t.call(i,"catchLoc"),s=t.call(i,"finallyLoc");if(c&&s){if(this.prev<i.catchLoc)return o(i.catchLoc,!0);if(this.prev<i.finallyLoc)return o(i.finallyLoc)}else if(c){if(this.prev<i.catchLoc)return o(i.catchLoc,!0)}else{if(!s)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return o(i.finallyLoc)}}}},abrupt:function(n,r){for(var e=this.tryEntries.length-1;e>=0;--e){var o=this.tryEntries[e];if(o.tryLoc<=this.prev&&t.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var a=o;break}}a&&("break"===n||"continue"===n)&&a.tryLoc<=r&&r<=a.finallyLoc&&(a=null);var i=a?a.completion:{};return i.type=n,i.arg=r,a?(this.method="next",this.next=a.finallyLoc,v):this.complete(i)},complete:function(n,r){if("throw"===n.type)throw n.arg;return"break"===n.type||"continue"===n.type?this.next=n.arg:"return"===n.type?(this.rval=this.arg=n.arg,this.method="return",this.next="end"):"normal"===n.type&&r&&(this.next=r),v},finish:function(n){for(var r=this.tryEntries.length-1;r>=0;--r){var e=this.tryEntries[r];if(e.finallyLoc===n)return this.complete(e.completion,e.afterLoc),k(e),v}},catch:function(n){for(var r=this.tryEntries.length-1;r>=0;--r){var e=this.tryEntries[r];if(e.tryLoc===n){var t=e.completion;if("throw"===t.type){var o=t.arg;k(e)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(n,e,t){return this.delegate={iterator:W(n),resultName:e,nextLoc:t},"next"===this.method&&(this.arg=r),v}},n}(n.exports);try{regeneratorRuntime=r}catch(n){"object"==typeof globalThis?globalThis.regeneratorRuntime=r:Function("r","regeneratorRuntime = r")(r)}},199:(n,r,e)=>{"use strict";n.exports=e.p+"3ec28528078454f2f671.wasm"},211:(n,r,e)=>{"use strict";n.exports=e.p+"1ed09e1efa4c40c4d3a6.wasm"},91:(n,r,e)=>{"use strict";n.exports=e.p+"5ce50a1776f99f0b3cd0.wasm"},388:(n,r,e)=>{"use strict";n.exports=e.p+"7775ca90ae720a37cf35.wasm"},280:(n,r,e)=>{"use strict";n.exports=e.p+"98e98ab89a46d26eb6ac.wasm"},256:(n,r,e)=>{"use strict";n.exports=e.p+"ed58b5618aed33ba1c89.wasm"},49:(n,r,e)=>{"use strict";n.exports=e.p+"48548639c5627b995510.wasm"},531:(n,r,e)=>{"use strict";n.exports=e.p+"53d24b0b921df964531a.wasm"},389:(n,r,e)=>{"use strict";n.exports=e.p+"2b3cbe1189d0cc95bdf8.wasm"}},t={};function o(n){var r=t[n];if(void 0!==r)return r.exports;var a=t[n]={exports:{}};return e[n](a,a.exports,o),a.exports}o.m=e,o.n=n=>{var r=n&&n.__esModule?()=>n.default:()=>n;return o.d(r,{a:r}),r},o.d=(n,r)=>{for(var e in r)o.o(r,e)&&!o.o(n,e)&&Object.defineProperty(n,e,{enumerable:!0,get:r[e]})},o.f={},o.e=n=>Promise.all(Object.keys(o.f).reduce(((r,e)=>(o.f[e](n,r),r)),[])),o.u=n=>n+".bundle.js",o.miniCssF=n=>{},o.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(n){if("object"==typeof window)return window}}(),o.o=(n,r)=>Object.prototype.hasOwnProperty.call(n,r),n={},r="squoosh-browser-demo:",o.l=(e,t,a,i)=>{if(n[e])n[e].push(t);else{var u,c;if(void 0!==a)for(var s=document.getElementsByTagName("script"),f=0;f<s.length;f++){var l=s[f];if(l.getAttribute("src")==e||l.getAttribute("data-webpack")==r+a){u=l;break}}u||(c=!0,(u=document.createElement("script")).charset="utf-8",u.timeout=120,o.nc&&u.setAttribute("nonce",o.nc),u.setAttribute("data-webpack",r+a),u.src=e),n[e]=[t];var d=(r,t)=>{u.onerror=u.onload=null,clearTimeout(p);var o=n[e];if(delete n[e],u.parentNode&&u.parentNode.removeChild(u),o&&o.forEach((n=>n(t))),r)return r(t)},p=setTimeout(d.bind(null,void 0,{type:"timeout",target:u}),12e4);u.onerror=d.bind(null,u.onerror),u.onload=d.bind(null,u.onload),c&&document.head.appendChild(u)}},o.r=n=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(n,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(n,"__esModule",{value:!0})},(()=>{var n;o.g.importScripts&&(n=o.g.location+"");var r=o.g.document;if(!n&&r&&(r.currentScript&&(n=r.currentScript.src),!n)){var e=r.getElementsByTagName("script");e.length&&(n=e[e.length-1].src)}if(!n)throw new Error("Automatic publicPath is not supported in this browser");n=n.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),o.p=n})(),(()=>{o.b=document.baseURI||self.location.href;var n={179:0};o.f.j=(r,e)=>{var t=o.o(n,r)?n[r]:void 0;if(0!==t)if(t)e.push(t[2]);else{var a=new Promise(((e,o)=>t=n[r]=[e,o]));e.push(t[2]=a);var i=o.p+o.u(r),u=new Error;o.l(i,(e=>{if(o.o(n,r)&&(0!==(t=n[r])&&(n[r]=void 0),t)){var a=e&&("load"===e.type?"missing":e.type),i=e&&e.target&&e.target.src;u.message="Loading chunk "+r+" failed.\n("+a+": "+i+")",u.name="ChunkLoadError",u.type=a,u.request=i,t[1](u)}}),"chunk-"+r,r)}};var r=(r,e)=>{var t,a,[i,u,c]=e,s=0;if(i.some((r=>0!==n[r]))){for(t in u)o.o(u,t)&&(o.m[t]=u[t]);c&&c(o)}for(r&&r(e);s<i.length;s++)a=i[s],o.o(n,a)&&n[a]&&n[a][0](),n[a]=0},e=self.webpackChunksquoosh_browser_demo=self.webpackChunksquoosh_browser_demo||[];e.forEach(r.bind(null,0)),e.push=r.bind(null,e.push.bind(e))})(),(()=>{"use strict";var n={};o.r(n),o.d(n,{defaultOptions:()=>x,extension:()=>k,label:()=>C,mimeType:()=>P});var r={};o.r(r),o.d(r,{defaultOptions:()=>S,extension:()=>R,label:()=>W,mimeType:()=>F});var e={};o.r(e),o.d(e,{defaultOptions:()=>U,extension:()=>O,label:()=>I,mimeType:()=>j});var t={};o.r(t),o.d(t,{defaultOptions:()=>B,extension:()=>L,label:()=>D,mimeType:()=>M});var a={};o.r(a),o.d(a,{defaultOptions:()=>z,extension:()=>N,label:()=>H,mimeType:()=>q});var i={};o.r(i),o.d(i,{defaultOptions:()=>$,extension:()=>J,label:()=>V,mimeType:()=>G});var u={};o.r(u),o.d(u,{defaultOptions:()=>Z,extension:()=>Y,label:()=>X,mimeType:()=>Q});var c={};o.r(c),o.d(c,{defaultOptions:()=>en,extension:()=>rn,label:()=>K,mimeType:()=>nn});var s={};function f(n,r){(null==r||r>n.length)&&(r=n.length);for(var e=0,t=new Array(r);e<r;e++)t[e]=n[e];return t}function l(n,r,e,t,o,a,i){try{var u=n[a](i),c=u.value}catch(n){return void e(n)}u.done?r(c):Promise.resolve(c).then(t,o)}function d(n){return function(){var r=this,e=arguments;return new Promise((function(t,o){var a=n.apply(r,e);function i(n){l(a,t,o,i,u,"next",n)}function u(n){l(a,t,o,i,u,"throw",n)}i(void 0)}))}}function p(n,r,e){return r in n?Object.defineProperty(n,r,{value:e,enumerable:!0,configurable:!0,writable:!0}):n[r]=e,n}o.r(s),o.d(s,{defaultOptions:()=>un,extension:()=>an,label:()=>tn,mimeType:()=>on});var h=o(757),v=o.n(h);async function m(n,r,e){const t=document.createElement("canvas");t.width=n.width,t.height=n.height;const o=t.getContext("2d");if(!o)throw Error("Canvas not initialized");let a;if(o.putImageData(n,0,0),"toBlob"in t)a=await new Promise((n=>t.toBlob(n,r,e)));else{const n=t.toDataURL(r,e),o=/data:([^;]+);base64,(.*)$/.exec(n);if(!o)throw Error("Data URL reading failed");const i=o[1],u=atob(o[2]),c=new Uint8Array(u.length);for(let n=0;n<c.length;n+=1)c[n]=u.charCodeAt(n);a=new Blob([c],{type:i})}if(!a)throw Error("Encoding failed");return a}function g(n){return"displayWidth"in n?n.displayWidth:n.width}function y(n){return"displayHeight"in n?n.displayHeight:n.height}function w(n,r={}){const{width:e=g(n),height:t=y(n),sx:o=0,sy:a=0,sw:i=g(n),sh:u=y(n)}=r,c=document.createElement("canvas");c.width=e,c.height=t;const s=c.getContext("2d");if(!s)throw new Error("Could not create canvas context");return s.drawImage(n,o,a,i,u,0,0,e,t),s.getImageData(0,0,e,t)}const b="undefined"!=typeof ImageDecoder;/Safari\//.test(navigator.userAgent)&&/Chrom(e|ium)\//.test(navigator.userAgent);const _=new Map;function A(n){return new Response(n).arrayBuffer()}const T=new Map([[/^%PDF-/,"application/pdf"],[/^GIF87a/,"image/gif"],[/^GIF89a/,"image/gif"],[/^\x89PNG\x0D\x0A\x1A\x0A/,"image/png"],[/^\xFF\xD8\xFF/,"image/jpeg"],[/^BM/,"image/bmp"],[/^I I/,"image/tiff"],[/^II*/,"image/tiff"],[/^MM\x00*/,"image/tiff"],[/^RIFF....WEBPVP8[LX ]/s,"image/webp"],[/^\xF4\xFF\x6F/,"image/webp2"],[/^\x00\x00\x00 ftypavif\x00\x00\x00\x00/,"image/avif"],[/^\xff\x0a/,"image/jxl"],[/^\x00\x00\x00\x0cJXL \x0d\x0a\x87\x0a/,"image/jxl"]]);async function E(n){const r=URL.createObjectURL(n);try{return await async function(n){const r=new Image;r.decoding="async",r.src=n;const e=new Promise(((n,e)=>{r.onload=()=>n(),r.onerror=()=>e(Error("Image loading error"))}));return r.decode&&await r.decode().catch((()=>null)),await e,r}(r)}finally{URL.revokeObjectURL(r)}}const C="AVIF",P="image/avif",k="avif",x={cqLevel:33,cqAlphaLevel:-1,denoiseLevel:0,tileColsLog2:0,tileRowsLog2:0,speed:6,subsample:1,chromaDeltaQ:!1,sharpness:0,tune:1},W="Browser GIF",F="image/gif",R="gif",S={},I="Browser JPEG",j="image/jpeg",O="jpg",U={quality:.75},D="Browser PNG",M="image/png",L="png",B={},H="JPEG XL (beta)",q="image/jxl",N="jxl",z={effort:7,quality:75,progressive:!1,epf:-1,lossyPalette:!1,decodingSpeedTier:0,photonNoiseIso:0,lossyModular:!1},V="MozJPEG",G="image/jpeg",J="jpg",$={quality:75,baseline:!1,arithmetic:!1,progressive:!0,optimize_coding:!0,smoothing:0,quant_table:3,trellis_multipass:!1,trellis_opt_zero:!1,trellis_opt_table:!1,trellis_loops:1,auto_subsample:!0,chroma_subsample:2,separate_chroma_quality:!1,chroma_quality:75},X="OxiPNG",Q="image/png",Y="png",Z={level:2,interlace:!1},K="WebP",nn="image/webp",rn="webp",en={quality:75,target_size:0,target_PSNR:0,method:4,sns_strength:50,filter_strength:60,filter_sharpness:0,filter_type:1,partitions:0,segments:4,pass:1,show_compressed:0,preprocessing:0,autofilter:0,partition_limit:0,alpha_compression:1,alpha_filtering:1,alpha_quality:100,lossless:0,exact:0,image_hint:0,emulate_jpeg_size:0,thread_level:0,low_memory:0,near_lossless:100,use_delta_palette:0,use_sharp_yuv:0},tn="WebP v2 (unstable)",on="image/webp2",an="wp2",un={quality:75,alpha_quality:75,effort:5,pass:1,uv_mode:"UVModeAuto",csp_type:"kYCoCg",sns:50,error_diffusion:0,use_random_matrix:!1};function cn(n){return n({noInitialRun:!0})}function sn(n){return new Response(n).arrayBuffer()}const fn=async()=>WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,5,1,96,0,1,123,3,2,1,0,10,10,1,8,0,65,0,253,15,253,98,11])),ln=()=>(async n=>{try{return"undefined"!=typeof MessageChannel&&(new MessageChannel).port1.postMessage(new SharedArrayBuffer(1)),WebAssembly.validate(n)}catch(n){return!1}})(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,5,4,1,3,1,1,10,11,1,9,0,65,0,254,16,2,0,26,11]));var dn=("file:///C:/Users/Dell7010/Desktop/web/tw/squoosh/codecs/avif/enc/avif_enc_mt.js",function(n){function r(){return T.buffer!=P&&J(T.buffer),k}function e(){return T.buffer!=P&&J(T.buffer),x}function t(){return T.buffer!=P&&J(T.buffer),W}function a(){return T.buffer!=P&&J(T.buffer),F}function i(){return T.buffer!=P&&J(T.buffer),R}function u(){return T.buffer!=P&&J(T.buffer),S}function c(){return T.buffer!=P&&J(T.buffer),j}var s,f;(n=void 0!==(n=n||{})?n:{}).ready=new Promise((function(n,r){s=n,f=r}));var l,d={};for(l in n)n.hasOwnProperty(l)&&(d[l]=n[l]);var p,h=[],v=function(n,r){throw r},m=n.ENVIRONMENT_IS_PTHREAD||!1,g="";function y(r){return n.locateFile?n.locateFile(r,g):g+r}g=self.location.href,g=0!==(g="file:///C:/Users/Dell7010/Desktop/web/tw/squoosh/codecs/avif/enc/avif_enc_mt.js").indexOf("blob:")?g.substr(0,g.lastIndexOf("/")+1):"",p=function(n){var r=new XMLHttpRequest;return r.open("GET",n,!1),r.responseType="arraybuffer",r.send(null),new Uint8Array(r.response)};var w=n.print||console.log.bind(console),b=n.printErr||console.warn.bind(console);for(l in d)d.hasOwnProperty(l)&&(n[l]=d[l]);d=null,n.arguments&&(h=n.arguments),n.thisProgram&&n.thisProgram,n.quit&&(v=n.quit);var _,A=0;Atomics.load,Atomics.store,Atomics.compareExchange,n.wasmBinary&&(_=n.wasmBinary);var T,E,C=n.noExitRuntime||!0;"object"!=typeof WebAssembly&&on("no native wasm support detected");var P,k,x,W,F,R,S,I,j,O=!1;function U(n,r){n||on("Assertion failed: "+r)}function D(n,r,e){for(var t=r+e,o="";!(r>=t);){var a=n[r++];if(!a)return o;if(128&a){var i=63&n[r++];if(192!=(224&a)){var u=63&n[r++];if((a=224==(240&a)?(15&a)<<12|i<<6|u:(7&a)<<18|i<<12|u<<6|63&n[r++])<65536)o+=String.fromCharCode(a);else{var c=a-65536;o+=String.fromCharCode(55296|c>>10,56320|1023&c)}}else o+=String.fromCharCode((31&a)<<6|i)}else o+=String.fromCharCode(a)}return o}function M(n,r){return n?D(e(),n,r):""}function L(n,r,t){return function(n,r,e,t){if(!(t>0))return 0;for(var o=e,a=e+t-1,i=0;i<n.length;++i){var u=n.charCodeAt(i);if(u>=55296&&u<=57343&&(u=65536+((1023&u)<<10)|1023&n.charCodeAt(++i)),u<=127){if(e>=a)break;r[e++]=u}else if(u<=2047){if(e+1>=a)break;r[e++]=192|u>>6,r[e++]=128|63&u}else if(u<=65535){if(e+2>=a)break;r[e++]=224|u>>12,r[e++]=128|u>>6&63,r[e++]=128|63&u}else{if(e+3>=a)break;r[e++]=240|u>>18,r[e++]=128|u>>12&63,r[e++]=128|u>>6&63,r[e++]=128|63&u}}return r[e]=0,e-o}(n,e(),r,t)}function B(n){for(var r=0,e=0;e<n.length;++e){var t=n.charCodeAt(e);t>=55296&&t<=57343&&(t=65536+((1023&t)<<10)|1023&n.charCodeAt(++e)),t<=127?++r:r+=t<=2047?2:t<=65535?3:4}return r}function H(n,r){for(var e="",o=0;!(o>=r/2);++o){var a=t()[n+2*o>>1];if(0==a)break;e+=String.fromCharCode(a)}return e}function q(n,r,e){if(void 0===e&&(e=2147483647),e<2)return 0;for(var o=r,a=(e-=2)<2*n.length?e/2:n.length,i=0;i<a;++i){var u=n.charCodeAt(i);t()[r>>1]=u,r+=2}return t()[r>>1]=0,r-o}function N(n){return 2*n.length}function z(n,r){for(var e=0,t="";!(e>=r/4);){var o=i()[n+4*e>>2];if(0==o)break;if(++e,o>=65536){var a=o-65536;t+=String.fromCharCode(55296|a>>10,56320|1023&a)}else t+=String.fromCharCode(o)}return t}function V(n,r,e){if(void 0===e&&(e=2147483647),e<4)return 0;for(var t=r,o=t+e-4,a=0;a<n.length;++a){var u=n.charCodeAt(a);if(u>=55296&&u<=57343&&(u=65536+((1023&u)<<10)|1023&n.charCodeAt(++a)),i()[r>>2]=u,(r+=4)+4>o)break}return i()[r>>2]=0,r-t}function G(n){for(var r=0,e=0;e<n.length;++e){var t=n.charCodeAt(e);t>=55296&&t<=57343&&++e,r+=4}return r}function J(r){P=r,n.HEAP8=k=new Int8Array(r),n.HEAP16=W=new Int16Array(r),n.HEAP32=R=new Int32Array(r),n.HEAPU8=x=new Uint8Array(r),n.HEAPU16=F=new Uint16Array(r),n.HEAPU32=S=new Uint32Array(r),n.HEAPF32=I=new Float32Array(r),n.HEAPF64=j=new Float64Array(r)}m&&(P=n.buffer);var $,X=n.INITIAL_MEMORY||16777216;if(m)T=n.wasmMemory,P=n.buffer;else if(n.wasmMemory)T=n.wasmMemory;else if(!((T=new WebAssembly.Memory({initial:X/65536,maximum:32768,shared:!0})).buffer instanceof SharedArrayBuffer))throw b("requested a shared WebAssembly.Memory but the returned buffer is not a SharedArrayBuffer, indicating that while the browser has SharedArrayBuffer it does not have WebAssembly threads support - you may need to set a flag"),Error("bad memory");T&&(P=T.buffer),X=P.byteLength,J(P);var Q=[],Y=[],Z=[],K=[];function nn(){m||fn(Y)}var rn=0,en=null,tn=null;function on(r){n.onAbort&&n.onAbort(r),m&&console.error("Pthread aborting at "+(new Error).stack),b(r+=""),O=!0,r="abort("+r+"). Build with -s ASSERTIONS=1 for more info.";var e=new WebAssembly.RuntimeError(r);throw f(e),e}function an(n){return n.startsWith("data:application/octet-stream;base64,")}if(n.preloadedImages={},n.preloadedAudios={},n.locateFile)an(un="avif_enc_mt.wasm")||(un=y(un));else var un=new URL(o(211),o.b).toString();function cn(n){try{if(n==un&&_)return new Uint8Array(_);if(p)return p(n);throw"both async and sync fetching of the wasm failed"}catch(n){on(n)}}var sn={601124:function(){throw"Canceled!"},601142:function(n,r){setTimeout((function(){kr(n,r)}),0)}};function fn(r){for(;r.length>0;){var e=r.shift();if("function"!=typeof e){var t=e.func;"number"==typeof t?void 0===e.arg?$.get(t)():$.get(t)(e.arg):t(void 0===e.arg?null:e.arg)}else e(n)}}function ln(n,e){if(n<=0||n>r().length||!0&n||e<0)return-28;if(0==e)return 0;e>=2147483647&&(e=1/0);var t=Atomics.load(i(),zr>>2),o=0;if(t==n&&Atomics.compareExchange(i(),zr>>2,t,0)==t&&(o=1,--e<=0))return 1;var a=Atomics.notify(i(),n>>2,e);if(a>=0)return a+o;throw"Atomics.notify returned an unexpected value "+a}function dn(n){if(m)throw"Internal Error! cleanupThread() can only ever be called from main application thread!";if(!n)throw"Internal Error! Null pthread_ptr in cleanupThread!";var r=hn.pthreads[n];if(r){i()[n+12>>2]=0;var e=r.worker;hn.returnWorkerToPool(e)}}n._emscripten_futex_wake=ln;var pn,hn={unusedWorkers:[],runningWorkers:[],tlsInitFunctions:[],initMainThreadBlock:function(){for(var n=navigator.hardwareConcurrency,r=0;r<n;++r)hn.allocateUnusedWorker()},initRuntime:function(){for(var n=Ar(228),r=0;r<57;++r)u()[n/4+r]=0;i()[n+12>>2]=n;var e=n+152;i()[e>>2]=e;var t=Ar(512);for(r=0;r<128;++r)u()[t/4+r]=0;Atomics.store(u(),n+100>>2,t),Atomics.store(u(),n+40>>2,n),Sr(n,!1,1),Cr(n)},initWorker:function(){},pthreads:{},threadExitHandlers:[],runExitHandlers:function(){for(;hn.threadExitHandlers.length>0;)hn.threadExitHandlers.pop()();m&&Ir()&&jr()},runExitHandlersAndDeinitThread:function(n,r){Atomics.store(u(),n+56>>2,1),Atomics.store(u(),n+60>>2,0),hn.runExitHandlers(),Atomics.store(u(),n+4>>2,r),Atomics.store(u(),n+0>>2,1),ln(n+0,2147483647),Sr(0,0,0)},setExitStatus:function(n){},threadExit:function(n){var r=Ir();r&&(hn.runExitHandlersAndDeinitThread(r,n),m&&postMessage({cmd:"exit"}))},threadCancel:function(){hn.runExitHandlersAndDeinitThread(Ir(),-1),postMessage({cmd:"cancelDone"})},terminateAllThreads:function(){for(var n in hn.pthreads)(t=hn.pthreads[n])&&t.worker&&hn.returnWorkerToPool(t.worker);hn.pthreads={};for(var r=0;r<hn.unusedWorkers.length;++r)(e=hn.unusedWorkers[r]).terminate();for(hn.unusedWorkers=[],r=0;r<hn.runningWorkers.length;++r){var e,t=(e=hn.runningWorkers[r]).pthread;hn.freeThreadData(t),e.terminate()}hn.runningWorkers=[]},freeThreadData:function(n){if(n){if(n.threadInfoStruct){var r=i()[n.threadInfoStruct+100>>2];i()[n.threadInfoStruct+100>>2]=0,Tr(r),Tr(n.threadInfoStruct)}n.threadInfoStruct=0,n.allocatedOwnStack&&n.stackBase&&Tr(n.stackBase),n.stackBase=0,n.worker&&(n.worker.pthread=null)}},returnWorkerToPool:function(n){hn.runWithoutMainThreadQueuedCalls((function(){delete hn.pthreads[n.pthread.threadInfoStruct],hn.unusedWorkers.push(n),hn.runningWorkers.splice(hn.runningWorkers.indexOf(n),1),hn.freeThreadData(n.pthread),n.pthread=void 0}))},runWithoutMainThreadQueuedCalls:function(n){i()[Nr>>2]=0;try{n()}finally{i()[Nr>>2]=1}},receiveObjectTransfer:function(n){},threadInit:function(){for(var n in hn.tlsInitFunctions)hn.tlsInitFunctions[n]()},loadWasmModuleToWorker:function(r,e){r.onmessage=function(t){var o=t.data,a=o.cmd;if(r.pthread&&(hn.currentProxiedOperationCallerThread=r.pthread.threadInfoStruct),o.targetThread&&o.targetThread!=Ir()){var c=hn.pthreads[o.targetThread];return c?c.worker.postMessage(t.data,o.transferList):console.error('Internal error! Worker sent a message "'+a+'" to target pthread '+o.targetThread+", but that thread no longer exists!"),void(hn.currentProxiedOperationCallerThread=void 0)}if("processQueuedMainThreadWork"===a)Wr();else if("spawnThread"===a)gr(t.data);else if("cleanupThread"===a)dn(o.thread);else if("killThread"===a)!function(n){if(m)throw"Internal Error! killThread() can only ever be called from main application thread!";if(!n)throw"Internal Error! Null pthread_ptr in killThread!";i()[n+12>>2]=0;var r=hn.pthreads[n];r.worker.terminate(),hn.freeThreadData(r),hn.runningWorkers.splice(hn.runningWorkers.indexOf(r.worker),1),r.worker.pthread=void 0}(o.thread);else if("cancelThread"===a)!function(n){if(m)throw"Internal Error! cancelThread() can only ever be called from main application thread!";if(!n)throw"Internal Error! Null pthread_ptr in cancelThread!";hn.pthreads[n].worker.postMessage({cmd:"cancel"})}(o.thread);else if("loaded"===a)r.loaded=!0,e&&e(r),r.runPthread&&(r.runPthread(),delete r.runPthread);else if("print"===a)w("Thread "+o.threadId+": "+o.text);else if("printErr"===a)b("Thread "+o.threadId+": "+o.text);else if("alert"===a)alert("Thread "+o.threadId+": "+o.text);else if("exit"===a)r.pthread&&Atomics.load(u(),r.pthread.threadInfoStruct+64>>2)&&hn.returnWorkerToPool(r);else if("exitProcess"===a)try{!function(r,e){if(m)throw postMessage({cmd:"exitProcess",returnCode:r}),new Vr(r);vn()||(hn.terminateAllThreads(),n.onExit&&n.onExit(r),O=!0),v(r,new Vr(r))}(o.returnCode)}catch(t){if(t instanceof Vr)return;throw t}else"cancelDone"===a?hn.returnWorkerToPool(r):"objectTransfer"===a?hn.receiveObjectTransfer(t.data):"setimmediate"===t.data.target?r.postMessage(t.data):b("worker sent an unknown command "+a);hn.currentProxiedOperationCallerThread=void 0},r.onerror=function(n){b("pthread sent an error! "+n.filename+":"+n.lineno+": "+n.message)},r.postMessage({cmd:"load",urlOrBlob:n.mainScriptUrlOrBlob,wasmMemory:T,wasmModule:E})},allocateUnusedWorker:function(){if(n.locateFile){var r=y("avif_enc_mt.worker.js");hn.unusedWorkers.push(new Worker(r))}else hn.unusedWorkers.push(new Worker(new URL(o.p+o.u(95),o.b)))},getNewWorker:function(){return 0==hn.unusedWorkers.length&&(hn.allocateUnusedWorker(),hn.loadWasmModuleToWorker(hn.unusedWorkers[0])),hn.unusedWorkers.pop()},busySpinWait:function(n){for(var r=performance.now()+n;performance.now()<r;);}};function vn(){return C||!1}function mn(n,r){hn.threadExitHandlers.push((function(){$.get(n)(r)}))}n.establishStackSpace=function(n,r){Lr(n,r),Dr(n)},n.invokeEntryPoint=function(n,r){return $.get(n)(r)},n.keepRuntimeAlive=vn,pn=m?function(){return performance.now()-n.__performance_now_clock_drift}:function(){return performance.now()};var gn={mappings:{},buffers:[null,[],[]],printChar:function(n,r){var e=gn.buffers[n];0===r||10===r?((1===n?w:b)(D(e,0)),e.length=0):e.push(r)},varargs:void 0,get:function(){return gn.varargs+=4,i()[gn.varargs-4>>2]},getStr:function(n){return M(n)},get64:function(n,r){return n}};function yn(n,r,e){return m?er(1,1,n,r,e):(gn.varargs=e,0)}function wn(n,r,e){return m?er(2,1,n,r,e):(gn.varargs=e,0)}function bn(n,r,e){if(m)return er(3,1,n,r,e);gn.varargs=e}var _n={};function An(n){for(;n.length;){var r=n.pop();n.pop()(r)}}function Tn(n){return this.fromWireType(u()[n>>2])}var En={},Cn={},Pn={};function kn(n){if(void 0===n)return"_unknown";var r=(n=n.replace(/[^a-zA-Z0-9_]/g,"$")).charCodeAt(0);return r>=48&&r<=57?"_"+n:n}function xn(n,r){return n=kn(n),new Function("body","return function "+n+'() {\n    "use strict";    return body.apply(this, arguments);\n};\n')(r)}function Wn(n,r){var e=xn(r,(function(n){this.name=r,this.message=n;var e=new Error(n).stack;void 0!==e&&(this.stack=this.toString()+"\n"+e.replace(/^Error(:[^\n]*)?\n/,""))}));return e.prototype=Object.create(n.prototype),e.prototype.constructor=e,e.prototype.toString=function(){return void 0===this.message?this.name:this.name+": "+this.message},e}var Fn=void 0;function Rn(n){throw new Fn(n)}function Sn(n,r,e){function t(r){var t=e(r);t.length!==n.length&&Rn("Mismatched type converter count");for(var o=0;o<n.length;++o)Mn(n[o],t[o])}n.forEach((function(n){Pn[n]=r}));var o=new Array(r.length),a=[],i=0;r.forEach((function(n,r){Cn.hasOwnProperty(n)?o[r]=Cn[n]:(a.push(n),En.hasOwnProperty(n)||(En[n]=[]),En[n].push((function(){o[r]=Cn[n],++i===a.length&&t(o)})))})),0===a.length&&t(o)}function In(n){switch(n){case 1:return 0;case 2:return 1;case 4:return 2;case 8:return 3;default:throw new TypeError("Unknown type size: "+n)}}var jn=void 0;function On(n){for(var r="",t=n;e()[t];)r+=jn[e()[t++]];return r}var Un=void 0;function Dn(n){throw new Un(n)}function Mn(n,r,e){if(e=e||{},!("argPackAdvance"in r))throw new TypeError("registerType registeredInstance requires argPackAdvance");var t=r.name;if(n||Dn('type "'+t+'" must have a positive integer typeid pointer'),Cn.hasOwnProperty(n)){if(e.ignoreDuplicateRegistrations)return;Dn("Cannot register type '"+t+"' twice")}if(Cn[n]=r,delete Pn[n],En.hasOwnProperty(n)){var o=En[n];delete En[n],o.forEach((function(n){n()}))}}var Ln=[],Bn=[{},{value:void 0},{value:null},{value:!0},{value:!1}];function Hn(n){n>4&&0==--Bn[n].refcount&&(Bn[n]=void 0,Ln.push(n))}function qn(n){switch(n){case void 0:return 1;case null:return 2;case!0:return 3;case!1:return 4;default:var r=Ln.length?Ln.pop():Bn.length;return Bn[r]={refcount:1,value:n},r}}function Nn(n){if(null===n)return"null";var r=typeof n;return"object"===r||"array"===r||"function"===r?n.toString():""+n}function zn(n,r){switch(r){case 2:return function(n){return this.fromWireType((T.buffer!=P&&J(T.buffer),I)[n>>2])};case 3:return function(n){return this.fromWireType(c()[n>>3])};default:throw new TypeError("Unknown float type: "+n)}}function Vn(r,e,t){return r.includes("j")?function(r,e,t){var o=n["dynCall_"+r];return t&&t.length?o.apply(null,[e].concat(t)):o.call(null,e)}(r,e,t):$.get(e).apply(null,t)}function Gn(n,r){var e,t,o,a=(n=On(n)).includes("j")?(e=n,t=r,o=[],function(){o.length=arguments.length;for(var n=0;n<arguments.length;n++)o[n]=arguments[n];return Vn(e,t,o)}):$.get(r);return"function"!=typeof a&&Dn("unknown function pointer with signature "+n+": "+r),a}var Jn=void 0;function $n(n){var r=Er(n),e=On(r);return Tr(r),e}function Xn(n,o,c){switch(o){case 0:return c?function(n){return r()[n]}:function(n){return e()[n]};case 1:return c?function(n){return t()[n>>1]}:function(n){return a()[n>>1]};case 2:return c?function(n){return i()[n>>2]}:function(n){return u()[n>>2]};default:throw new TypeError("Unknown integer type: "+n)}}var Qn={};function Yn(){return"object"==typeof globalThis?globalThis:Function("return this")()}function Zn(n,r){var e=Cn[n];return void 0===e&&Dn(r+" has unknown type "+$n(n)),e}var Kn={},nr=[];function rr(n,e,t){if(n<=0||n>r().length||!0&n)return-28;var o=Atomics.wait(i(),n>>2,e,t);if("timed-out"===o)return-73;if("not-equal"===o)return-6;if("ok"===o)return 0;throw"Atomics.wait returned an unexpected value "+o}function er(n,r){for(var e=arguments.length-2,t=Ur(),o=e,a=Mr(8*o),i=a>>3,u=0;u<e;u++){var s=arguments[2+u];c()[i+u]=s}var f=Fr(n,o,a,r);return Dr(t),f}var tr=[];function or(n){try{return T.grow(n-P.byteLength+65535>>>16),J(T.buffer),1}catch(n){}}var ar={inEventHandler:0,removeAllEventListeners:function(){for(var n=ar.eventHandlers.length-1;n>=0;--n)ar._removeHandler(n);ar.eventHandlers=[],ar.deferredCalls=[]},registerRemoveEventListeners:function(){ar.removeEventListenersRegistered||(Z.push(ar.removeAllEventListeners),ar.removeEventListenersRegistered=!0)},deferredCalls:[],deferCall:function(n,r,e){function t(n,r){if(n.length!=r.length)return!1;for(var e in n)if(n[e]!=r[e])return!1;return!0}for(var o in ar.deferredCalls){var a=ar.deferredCalls[o];if(a.targetFunction==n&&t(a.argsList,e))return}ar.deferredCalls.push({targetFunction:n,precedence:r,argsList:e}),ar.deferredCalls.sort((function(n,r){return n.precedence<r.precedence}))},removeDeferredCalls:function(n){for(var r=0;r<ar.deferredCalls.length;++r)ar.deferredCalls[r].targetFunction==n&&(ar.deferredCalls.splice(r,1),--r)},canPerformEventHandlerRequests:function(){return ar.inEventHandler&&ar.currentEventHandler.allowsDeferredCalls},runDeferredCalls:function(){if(ar.canPerformEventHandlerRequests())for(var n=0;n<ar.deferredCalls.length;++n){var r=ar.deferredCalls[n];ar.deferredCalls.splice(n,1),--n,r.targetFunction.apply(null,r.argsList)}},eventHandlers:[],removeAllHandlersOnTarget:function(n,r){for(var e=0;e<ar.eventHandlers.length;++e)ar.eventHandlers[e].target!=n||r&&r!=ar.eventHandlers[e].eventTypeString||ar._removeHandler(e--)},_removeHandler:function(n){var r=ar.eventHandlers[n];r.target.removeEventListener(r.eventTypeString,r.eventListenerFunc,r.useCapture),ar.eventHandlers.splice(n,1)},registerOrRemoveHandler:function(n){var r=function(r){++ar.inEventHandler,ar.currentEventHandler=n,ar.runDeferredCalls(),n.handlerFunc(r),ar.runDeferredCalls(),--ar.inEventHandler};if(n.callbackfunc)n.eventListenerFunc=r,n.target.addEventListener(n.eventTypeString,r,n.useCapture),ar.eventHandlers.push(n),ar.registerRemoveEventListeners();else for(var e=0;e<ar.eventHandlers.length;++e)ar.eventHandlers[e].target==n.target&&ar.eventHandlers[e].eventTypeString==n.eventTypeString&&ar._removeHandler(e--)},queueEventHandlerOnThread_iiii:function(n,r,e,t,o){var a=Ur(),u=Mr(12);i()[u>>2]=e,i()[u+4>>2]=t,i()[u+8>>2]=o,Rr(0,n,637534208,r,t,u),Dr(a)},getTargetThreadForEventCallback:function(n){switch(n){case 1:return 0;case 2:return hn.currentProxiedOperationCallerThread;default:return n}},getNodeNameForTarget:function(n){return n?n==window?"#window":n==screen?"#screen":n&&n.nodeName?n.nodeName:"":""},fullscreenEnabled:function(){return document.fullscreenEnabled||document.webkitFullscreenEnabled}};var ir=[0,"undefined"!=typeof document?document:0,"undefined"!=typeof window?window:0];function ur(n){return function(n){var r;return n=(r=n)>2?M(r):r,ir[n]||("undefined"!=typeof document?document.querySelector(n):void 0)}(n)}function cr(n,r,e){var t=ur(n);if(!t)return-4;if(t.canvasSharedPtr&&(i()[t.canvasSharedPtr>>2]=r,i()[t.canvasSharedPtr+4>>2]=e),!t.offscreenCanvas&&t.controlTransferredOffscreen)return t.canvasSharedPtr?(function(n,r,e,t){!function(n,r,e,t){var o,a,u,c=Ur(),s=Mr(12),f=0;r&&(a=B(o=r)+1,L(o,u=Ar(a),a),f=u),i()[s>>2]=f,i()[s+4>>2]=e,i()[s+8>>2]=t,Rr(0,n,657457152,0,f,s),Dr(c)}(n,r=r?M(r):"",e,t)}(i()[t.canvasSharedPtr+8>>2],n,r,e),1):-4;t.offscreenCanvas&&(t=t.offscreenCanvas);var o=!1;if(t.GLctxObject&&t.GLctxObject.GLctx){var a=t.GLctxObject.GLctx.getParameter(2978);o=0===a[0]&&0===a[1]&&a[2]===t.width&&a[3]===t.height}return t.width=r,t.height=e,o&&t.GLctxObject.GLctx.viewport(0,0,r,e),0}function sr(n,r,e){return m?er(4,1,n,r,e):cr(n,r,e)}var fr,lr={counter:1,buffers:[],programs:[],framebuffers:[],renderbuffers:[],textures:[],shaders:[],vaos:[],contexts:{},offscreenCanvases:{},queries:[],stringCache:{},unpackAlignment:4,recordError:function(n){lr.lastError||(lr.lastError=n)},getNewId:function(n){for(var r=lr.counter++,e=n.length;e<r;e++)n[e]=null;return r},getSource:function(n,r,e,t){for(var o="",a=0;a<r;++a){var u=t?i()[t+4*a>>2]:-1;o+=M(i()[e+4*a>>2],u<0?void 0:u)}return o},createContext:function(n,r){n.getContextSafariWebGL2Fixed||(n.getContextSafariWebGL2Fixed=n.getContext,n.getContext=function(r,e){var t=n.getContextSafariWebGL2Fixed(r,e);return"webgl"==r==t instanceof WebGLRenderingContext?t:null});var e=n.getContext("webgl",r);return e?lr.registerContext(e,r):0},registerContext:function(n,r){var e=Ar(8);i()[e+4>>2]=Ir();var t={handle:e,attributes:r,version:r.majorVersion,GLctx:n};return n.canvas&&(n.canvas.GLctxObject=t),lr.contexts[e]=t,(void 0===r.enableExtensionsByDefault||r.enableExtensionsByDefault)&&lr.initExtensions(t),e},makeContextCurrent:function(r){return lr.currentContext=lr.contexts[r],n.ctx=fr=lr.currentContext&&lr.currentContext.GLctx,!(r&&!fr)},getContext:function(n){return lr.contexts[n]},deleteContext:function(n){lr.currentContext===lr.contexts[n]&&(lr.currentContext=null),"object"==typeof ar&&ar.removeAllHandlersOnTarget(lr.contexts[n].GLctx.canvas),lr.contexts[n]&&lr.contexts[n].GLctx.canvas&&(lr.contexts[n].GLctx.canvas.GLctxObject=void 0),Tr(lr.contexts[n].handle),lr.contexts[n]=null},initExtensions:function(n){if(n||(n=lr.currentContext),!n.initExtensionsDone){n.initExtensionsDone=!0;var r,e=n.GLctx;!function(n){var r=n.getExtension("ANGLE_instanced_arrays");r&&(n.vertexAttribDivisor=function(n,e){r.vertexAttribDivisorANGLE(n,e)},n.drawArraysInstanced=function(n,e,t,o){r.drawArraysInstancedANGLE(n,e,t,o)},n.drawElementsInstanced=function(n,e,t,o,a){r.drawElementsInstancedANGLE(n,e,t,o,a)})}(e),function(n){var r=n.getExtension("OES_vertex_array_object");r&&(n.createVertexArray=function(){return r.createVertexArrayOES()},n.deleteVertexArray=function(n){r.deleteVertexArrayOES(n)},n.bindVertexArray=function(n){r.bindVertexArrayOES(n)},n.isVertexArray=function(n){return r.isVertexArrayOES(n)})}(e),function(n){var r=n.getExtension("WEBGL_draw_buffers");r&&(n.drawBuffers=function(n,e){r.drawBuffersWEBGL(n,e)})}(e),e.disjointTimerQueryExt=e.getExtension("EXT_disjoint_timer_query"),(r=e).multiDrawWebgl=r.getExtension("WEBGL_multi_draw"),(e.getSupportedExtensions()||[]).forEach((function(n){n.includes("lose_context")||n.includes("debug")||e.getExtension(n)}))}}},dr=["default","low-power","high-performance"];function pr(n){return m?er(5,1,n):0}function hr(n,r,e,t){if(m)return er(6,1,n,r,e,t);var o=gn.getStreamFromFD(n),a=gn.doReadv(o,r,e);return i()[t>>2]=a,0}function vr(n,r,e,t,o){if(m)return er(7,1,n,r,e,t,o)}function mr(n,r,t,o){if(m)return er(8,1,n,r,t,o);for(var a=0,u=0;u<t;u++){for(var c=i()[r+8*u>>2],s=i()[r+(8*u+4)>>2],f=0;f<s;f++)gn.printChar(n,e()[c+f]);a+=s}return i()[o>>2]=a,0}function gr(n){if(m)throw"Internal Error! spawnThread() can only ever be called from main application thread!";var r=hn.getNewWorker();if(!r)return 6;if(void 0!==r.pthread)throw"Internal error!";if(!n.pthread_ptr)throw"Internal error, no pthread ptr!";hn.runningWorkers.push(r);for(var e=Ar(512),t=0;t<128;++t)i()[e+4*t>>2]=0;var o=n.stackBase+n.stackSize,a=hn.pthreads[n.pthread_ptr]={worker:r,stackBase:n.stackBase,stackSize:n.stackSize,allocatedOwnStack:n.allocatedOwnStack,threadInfoStruct:n.pthread_ptr},c=a.threadInfoStruct>>2;Atomics.store(u(),c+16,n.detached),Atomics.store(u(),c+25,e),Atomics.store(u(),c+10,a.threadInfoStruct),Atomics.store(u(),c+20,n.stackSize),Atomics.store(u(),c+19,o),Atomics.store(u(),c+26,n.stackSize),Atomics.store(u(),c+28,o),Atomics.store(u(),c+29,n.detached);var s=Or()+40;Atomics.store(u(),c+43,s),r.pthread=a;var f={cmd:"run",start_routine:n.startRoutine,arg:n.arg,threadInfoStruct:n.pthread_ptr,stackBase:n.stackBase,stackSize:n.stackSize};return r.runPthread=function(){f.time=performance.now(),r.postMessage(f,n.transferList)},r.loaded&&(r.runPthread(),delete r.runPthread),0}function yr(){if(m){var n=Ir();if(n&&!Atomics.load(u(),n+56>>2)&&2==Atomics.load(u(),n+0>>2))throw"Canceled!"}}m||hn.initMainThreadBlock(),Fn=n.InternalError=Wn(Error,"InternalError"),function(){for(var n=new Array(256),r=0;r<256;++r)n[r]=String.fromCharCode(r);jn=n}(),Un=n.BindingError=Wn(Error,"BindingError"),n.count_emval_handles=function(){for(var n=0,r=5;r<Bn.length;++r)void 0!==Bn[r]&&++n;return n},n.get_first_emval=function(){for(var n=5;n<Bn.length;++n)if(void 0!==Bn[n])return Bn[n];return null},Jn=n.UnboundTypeError=Wn(Error,"UnboundTypeError");var wr,br=[null,yn,wn,bn,sr,pr,hr,vr,mr],_r={k:function(n,r,e,t){on("Assertion failed: "+M(n)+", at: "+[r?M(r):"unknown filename",e,t?M(t):"unknown function"])},C:function(n,r){return mn(n,r)},u:yn,P:wn,R:bn,F:function(n){var r=_n[n];delete _n[n];var e=r.rawConstructor,t=r.rawDestructor,o=r.fields;Sn([n],o.map((function(n){return n.getterReturnType})).concat(o.map((function(n){return n.setterArgumentType}))),(function(n){var a={};return o.forEach((function(r,e){var t=r.fieldName,i=n[e],u=r.getter,c=r.getterContext,s=n[e+o.length],f=r.setter,l=r.setterContext;a[t]={read:function(n){return i.fromWireType(u(c,n))},write:function(n,r){var e=[];f(l,n,s.toWireType(e,r)),An(e)}}})),[{name:r.name,fromWireType:function(n){var r={};for(var e in a)r[e]=a[e].read(n);return t(n),r},toWireType:function(n,r){for(var o in a)if(!(o in r))throw new TypeError('Missing field:  "'+o+'"');var i=e();for(o in a)a[o].write(i,r[o]);return null!==n&&n.push(t,i),i},argPackAdvance:8,readValueFromPointer:Tn,destructorFunction:t}]}))},I:function(n,r,e,t,o){},aa:function(n,e,o,a,u){var c=In(o);Mn(n,{name:e=On(e),fromWireType:function(n){return!!n},toWireType:function(n,r){return r?a:u},argPackAdvance:8,readValueFromPointer:function(n){var a;if(1===o)a=r();else if(2===o)a=t();else{if(4!==o)throw new TypeError("Unknown boolean type size: "+e);a=i()}return this.fromWireType(a[n>>c])},destructorFunction:null})},$:function(n,r){Mn(n,{name:r=On(r),fromWireType:function(n){var r=Bn[n].value;return Hn(n),r},toWireType:function(n,r){return qn(r)},argPackAdvance:8,readValueFromPointer:Tn,destructorFunction:null})},z:function(n,r,e){var t=In(e);Mn(n,{name:r=On(r),fromWireType:function(n){return n},toWireType:function(n,r){if("number"!=typeof r&&"boolean"!=typeof r)throw new TypeError('Cannot convert "'+Nn(r)+'" to '+this.name);return r},argPackAdvance:8,readValueFromPointer:zn(r,t),destructorFunction:null})},E:function(r,e,t,o,a,u){var c=function(n,r){for(var e=[],t=0;t<n;t++)e.push(i()[(r>>2)+t]);return e}(e,t);r=On(r),a=Gn(o,a),function(r,e,t){n.hasOwnProperty(r)?((void 0===t||void 0!==n[r].overloadTable&&void 0!==n[r].overloadTable[t])&&Dn("Cannot register public name '"+r+"' twice"),function(n,r,e){if(void 0===n[r].overloadTable){var t=n[r];n[r]=function(){return n[r].overloadTable.hasOwnProperty(arguments.length)||Dn("Function '"+e+"' called with an invalid number of arguments ("+arguments.length+") - expects one of ("+n[r].overloadTable+")!"),n[r].overloadTable[arguments.length].apply(this,arguments)},n[r].overloadTable=[],n[r].overloadTable[t.argCount]=t}}(n,r,r),n.hasOwnProperty(t)&&Dn("Cannot register multiple overloads of a function with the same number of arguments ("+t+")!"),n[r].overloadTable[t]=e):(n[r]=e,void 0!==t&&(n[r].numArguments=t))}(r,(function(){!function(n,r){var e=[],t={};throw r.forEach((function n(r){t[r]||Cn[r]||(Pn[r]?Pn[r].forEach(n):(e.push(r),t[r]=!0))})),new Jn(n+": "+e.map($n).join([", "]))}("Cannot call "+r+" due to unbound types",c)}),e-1),Sn([],c,(function(t){var o=[t[0],null].concat(t.slice(1));return function(r,e,t){n.hasOwnProperty(r)||Rn("Replacing nonexistant public symbol"),void 0!==n[r].overloadTable&&void 0!==t?n[r].overloadTable[t]=e:(n[r]=e,n[r].argCount=t)}(r,function(n,r,e,t,o){var a=r.length;a<2&&Dn("argTypes array size mismatch! Must at least get return value and 'this' types!");for(var i=null!==r[1]&&null!==e,u=!1,c=1;c<r.length;++c)if(null!==r[c]&&void 0===r[c].destructorFunction){u=!0;break}var s="void"!==r[0].name,f="",l="";for(c=0;c<a-2;++c)f+=(0!==c?", ":"")+"arg"+c,l+=(0!==c?", ":"")+"arg"+c+"Wired";var d="return function "+kn(n)+"("+f+") {\nif (arguments.length !== "+(a-2)+") {\nthrowBindingError('function "+n+" called with ' + arguments.length + ' arguments, expected "+(a-2)+" args!');\n}\n";u&&(d+="var destructors = [];\n");var p=u?"destructors":"null",h=["throwBindingError","invoker","fn","runDestructors","retType","classParam"],v=[Dn,t,o,An,r[0],r[1]];for(i&&(d+="var thisWired = classParam.toWireType("+p+", this);\n"),c=0;c<a-2;++c)d+="var arg"+c+"Wired = argType"+c+".toWireType("+p+", arg"+c+"); // "+r[c+2].name+"\n",h.push("argType"+c),v.push(r[c+2]);if(i&&(l="thisWired"+(l.length>0?", ":"")+l),d+=(s?"var rv = ":"")+"invoker(fn"+(l.length>0?", ":"")+l+");\n",u)d+="runDestructors(destructors);\n";else for(c=i?1:2;c<r.length;++c){var m=1===c?"thisWired":"arg"+(c-2)+"Wired";null!==r[c].destructorFunction&&(d+=m+"_dtor("+m+"); // "+r[c].name+"\n",h.push(m+"_dtor"),v.push(r[c].destructorFunction))}return s&&(d+="var ret = retType.fromWireType(rv);\nreturn ret;\n"),d+="}\n",h.push(d),function(n,r){if(!(n instanceof Function))throw new TypeError("new_ called with constructor type "+typeof n+" which is not a function");var e=xn(n.name||"unknownFunctionName",(function(){}));e.prototype=n.prototype;var t=new e,o=n.apply(t,r);return o instanceof Object?o:t}(Function,h).apply(null,v)}(r,o,null,a,u),e-1),[]}))},j:function(n,r,e,t,o){r=On(r),-1===o&&(o=4294967295);var a=In(e),i=function(n){return n};if(0===t){var u=32-8*e;i=function(n){return n<<u>>>u}}var c=r.includes("unsigned");Mn(n,{name:r,fromWireType:i,toWireType:function(n,e){if("number"!=typeof e&&"boolean"!=typeof e)throw new TypeError('Cannot convert "'+Nn(e)+'" to '+this.name);if(e<t||e>o)throw new TypeError('Passing a number "'+Nn(e)+'" from JS side to C/C++ side to an argument of type "'+r+'", which is outside the valid range ['+t+", "+o+"]!");return c?e>>>0:0|e},argPackAdvance:8,readValueFromPointer:Xn(r,a,0!==t),destructorFunction:null})},g:function(n,r,e){var t=[Int8Array,Uint8Array,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array][r];function o(n){n>>=2;var r=u(),e=r[n],o=r[n+1];return new t(P,o,e)}Mn(n,{name:e=On(e),fromWireType:o,argPackAdvance:8,readValueFromPointer:o},{ignoreDuplicateRegistrations:!0})},A:function(n,r){var t="std::string"===(r=On(r));Mn(n,{name:r,fromWireType:function(n){var r,o=u()[n>>2];if(t)for(var a=n+4,i=0;i<=o;++i){var c=n+4+i;if(i==o||0==e()[c]){var s=M(a,c-a);void 0===r?r=s:(r+=String.fromCharCode(0),r+=s),a=c+1}}else{var f=new Array(o);for(i=0;i<o;++i)f[i]=String.fromCharCode(e()[n+4+i]);r=f.join("")}return Tr(n),r},toWireType:function(n,r){r instanceof ArrayBuffer&&(r=new Uint8Array(r));var o="string"==typeof r;o||r instanceof Uint8Array||r instanceof Uint8ClampedArray||r instanceof Int8Array||Dn("Cannot pass non-string to std::string");var a=(t&&o?function(){return B(r)}:function(){return r.length})(),i=Ar(4+a+1);if(u()[i>>2]=a,t&&o)L(r,i+4,a+1);else if(o)for(var c=0;c<a;++c){var s=r.charCodeAt(c);s>255&&(Tr(i),Dn("String has UTF-16 code units that do not fit in 8 bits")),e()[i+4+c]=s}else for(c=0;c<a;++c)e()[i+4+c]=r[c];return null!==n&&n.push(Tr,i),i},argPackAdvance:8,readValueFromPointer:Tn,destructorFunction:function(n){Tr(n)}})},r:function(n,r,e){var t,o,i,c,s;e=On(e),2===r?(t=H,o=q,c=N,i=function(){return a()},s=1):4===r&&(t=z,o=V,c=G,i=function(){return u()},s=2),Mn(n,{name:e,fromWireType:function(n){for(var e,o=u()[n>>2],a=i(),c=n+4,f=0;f<=o;++f){var l=n+4+f*r;if(f==o||0==a[l>>s]){var d=t(c,l-c);void 0===e?e=d:(e+=String.fromCharCode(0),e+=d),c=l+r}}return Tr(n),e},toWireType:function(n,t){"string"!=typeof t&&Dn("Cannot pass non-string to C++ string type "+e);var a=c(t),i=Ar(4+a+r);return u()[i>>2]=a>>s,o(t,i+4,a+r),null!==n&&n.push(Tr,i),i},argPackAdvance:8,readValueFromPointer:Tn,destructorFunction:function(n){Tr(n)}})},K:function(n,r,e,t,o,a){_n[n]={name:On(r),rawConstructor:Gn(e,t),rawDestructor:Gn(o,a),fields:[]}},h:function(n,r,e,t,o,a,i,u,c,s){_n[n].fields.push({fieldName:On(r),getterReturnType:e,getter:Gn(t,o),getterContext:a,setterArgumentType:i,setter:Gn(u,c),setterContext:s})},ba:function(n,r){Mn(n,{isVoid:!0,name:r=On(r),argPackAdvance:0,fromWireType:function(){},toWireType:function(n,r){}})},Z:function(n,r){if(n==r)postMessage({cmd:"processQueuedMainThreadWork"});else if(m)postMessage({targetThread:n,cmd:"processThreadQueue"});else{var e=hn.pthreads[n],t=e&&e.worker;if(!t)return;t.postMessage({cmd:"processThreadQueue"})}return 1},o:Hn,_:function(n){return 0===n?qn(Yn()):(n=void 0===(e=Qn[r=n])?On(r):e,qn(Yn()[n]));var r,e},D:function(n){n>4&&(Bn[n].refcount+=1)},Q:function(r,e,t,o){r=function(n){return n||Dn("Cannot use deleted val. handle = "+n),Bn[n].value}(r);var a=Kn[e];return a||(a=function(r){for(var e="",t=0;t<r;++t)e+=(0!==t?", ":"")+"arg"+t;var o="return function emval_allocator_"+r+"(constructor, argTypes, args) {\n";for(t=0;t<r;++t)o+="var argType"+t+" = requireRegisteredType(Module['HEAP32'][(argTypes >>> 2) + "+t+'], "parameter '+t+'");\nvar arg'+t+" = argType"+t+".readValueFromPointer(args);\nargs += argType"+t+"['argPackAdvance'];\n";return o+="var obj = new constructor("+e+");\nreturn __emval_register(obj);\n}\n",new Function("requireRegisteredType","Module","__emval_register",o)(Zn,n,qn)}(e),Kn[e]=a),a(r,t,o)},i:function(){on()},y:function(n,r,t){var o=function(n,r){var t;for(nr.length=0,r>>=2;t=e()[n++];){var o=t<105;o&&1&r&&r++,nr.push(o?c()[r++>>1]:i()[r]),++r}return nr}(r,t);return sn[n].apply(null,o)},V:function(){},x:function(n,r){},l:rr,m:ln,p:pn,e:function(n,r){return function(n,r){throw Br(n,r||1),"longjmp"}(n,r)},M:function(n,r,t){e().copyWithin(n,r,r+t)},ea:function(){return navigator.hardwareConcurrency},W:function(n,r,e){tr.length=r;for(var t=e>>3,o=0;o<r;o++)tr[o]=c()[t+o];return(n<0?sn[-n-1]:br[n]).apply(null,tr)},N:function(n){var r=e().length;if((n>>>=0)<=r)return!1;var t,o=2147483648;if(n>o)return!1;for(var a=1;a<=4;a*=2){var i=r*(1+.2/a);if(i=Math.min(i,n+100663296),or(Math.min(o,((t=Math.max(n,i))%65536>0&&(t+=65536-t%65536),t))))return!0}return!1},X:function(n,r,e){return ur(n)?cr(n,r,e):sr(n,r,e)},w:function(n){},Y:function(n,r){return e=n,t=r>>2,o=i()[t+6],a={alpha:!!i()[t+0],depth:!!i()[t+1],stencil:!!i()[t+2],antialias:!!i()[t+3],premultipliedAlpha:!!i()[t+4],preserveDrawingBuffer:!!i()[t+5],powerPreference:dr[o],failIfMajorPerformanceCaveat:!!i()[t+7],majorVersion:i()[t+8],minorVersion:i()[t+9],enableExtensionsByDefault:i()[t+10],explicitSwapControl:i()[t+11],proxyContextToMainThread:i()[t+12],renderViaOffscreenBackBuffer:i()[t+13]},(u=ur(e))?a.explicitSwapControl?0:lr.createContext(u,a):0;var e,t,o,a,u},v:pr,O:hr,H:vr,S:mr,c:function(){return A},L:function(){hn.initRuntime()},q:function(n,r,e,t,o){var a=Ur();try{return $.get(n)(r,e,t,o)}catch(n){if(Dr(a),n!==n+0&&"longjmp"!==n)throw n;Br(1,0)}},s:function(n,r,e,t,o,a,i,u,c){var s=Ur();try{return $.get(n)(r,e,t,o,a,i,u,c)}catch(n){if(Dr(s),n!==n+0&&"longjmp"!==n)throw n;Br(1,0)}},t:function(n,r,e,t,o,a,i,u,c,s){var f=Ur();try{return $.get(n)(r,e,t,o,a,i,u,c,s)}catch(n){if(Dr(f),n!==n+0&&"longjmp"!==n)throw n;Br(1,0)}},J:function(n,r,e,t,o,a,i,u,c,s,f,l){var d=Ur();try{return $.get(n)(r,e,t,o,a,i,u,c,s,f,l)}catch(n){if(Dr(d),n!==n+0&&"longjmp"!==n)throw n;Br(1,0)}},G:function(n,r,e,t,o,a){var i=Ur();try{return qr(n,r,e,t,o,a)}catch(n){if(Dr(i),n!==n+0&&"longjmp"!==n)throw n;Br(1,0)}},n:function(n,r){var e=Ur();try{$.get(n)(r)}catch(n){if(Dr(e),n!==n+0&&"longjmp"!==n)throw n;Br(1,0)}},f:function(n,r,e){var t=Ur();try{$.get(n)(r,e)}catch(n){if(Dr(t),n!==n+0&&"longjmp"!==n)throw n;Br(1,0)}},d:function(n,r,e,t,o){var a=Ur();try{$.get(n)(r,e,t,o)}catch(n){if(Dr(a),n!==n+0&&"longjmp"!==n)throw n;Br(1,0)}},a:T||n.wasmMemory,T:function(n){var r=hn.threadExitHandlers.pop();n&&r()},U:mn,B:function(n,r,e,t){if("undefined"==typeof SharedArrayBuffer)return b("Current environment does not support SharedArrayBuffer, pthreads are not available!"),6;if(!n)return b("pthread_create called with a null thread pointer!"),28;var o=[];if(m&&0===o.length)return xr(687865856,n,r,e,t);var a=0,c=0,s=0;r&&-1!=r?(a=i()[r>>2],a+=81920,c=i()[r+8>>2],s=0!==i()[r+12>>2]):a=2097152;var f=0==c;f?c=Hr(16,a):U((c-=a)>0);for(var l=Ar(228),d=0;d<57;++d)u()[(l>>2)+d]=0;i()[n>>2]=l,i()[l+12>>2]=l;var p=l+152;i()[p>>2]=p;var h={stackBase:c,stackSize:a,allocatedOwnStack:f,detached:s,startRoutine:e,pthread_ptr:l,arg:t,transferList:o};return m?(h.cmd="spawnThread",postMessage(h,o),0):gr(h)},ca:function(n,r){return function(n,r,e){if(!n)return b("pthread_join attempted on a null thread pointer!"),71;if(m&&Ir()==n)return b("PThread "+n+" is attempting to join to itself!"),16;if(!m&&Pr()==n)return b("Main thread "+n+" is attempting to join to itself!"),16;if(i()[n+12>>2]!==n)return b("pthread_join attempted on thread "+n+", which does not point to a valid thread, or does not exist anymore!"),71;if(Atomics.load(u(),n+64>>2))return b("Attempted to join thread "+n+", which was already detached!"),28;for(;;){var t=Atomics.load(u(),n+0>>2);if(1==t){var o=Atomics.load(u(),n+4>>2);return r&&(i()[r>>2]=o),Atomics.store(u(),n+64>>2,1),m?postMessage({cmd:"cleanupThread",thread:n}):dn(n),0}0,yr(),m||Wr(),rr(n+0,t,m?100:1)}}(n,r)},b:function(n){A=n},da:function(n){var r=Date.now()/1e3|0;return n&&(i()[n>>2]=r),r}},Ar=(function(){var r={a:_r};function e(r,e){var t,o=r.exports;if(n.asm=o,$=n.asm.ja,t=n.asm.fa,Y.unshift(t),hn.tlsInitFunctions.push(n.asm.ia),E=e,!m){var a=hn.unusedWorkers.length;hn.unusedWorkers.forEach((function(r){hn.loadWasmModuleToWorker(r,(function(){--a||function(r){if(rn--,n.monitorRunDependencies&&n.monitorRunDependencies(rn),0==rn&&(null!==en&&(clearInterval(en),en=null),tn)){var e=tn;tn=null,e()}}()}))}))}}function t(n){e(n.instance,n.module)}function o(n){return(_||"function"!=typeof fetch?Promise.resolve().then((function(){return cn(un)})):fetch(un,{credentials:"same-origin"}).then((function(n){if(!n.ok)throw"failed to load wasm binary file at '"+un+"'";return n.arrayBuffer()})).catch((function(){return cn(un)}))).then((function(n){return WebAssembly.instantiate(n,r)})).then(n,(function(n){b("failed to asynchronously prepare wasm: "+n),on(n)}))}if(m||(U(!m,"addRunDependency cannot be used in a pthread worker"),rn++,n.monitorRunDependencies&&n.monitorRunDependencies(rn)),n.instantiateWasm)try{return n.instantiateWasm(r,e)}catch(n){return b("Module.instantiateWasm callback failed with error: "+n),!1}(_||"function"!=typeof WebAssembly.instantiateStreaming||an(un)||"function"!=typeof fetch?o(t):fetch(un,{credentials:"same-origin"}).then((function(n){return WebAssembly.instantiateStreaming(n,r).then(t,(function(n){return b("wasm streaming compile failed: "+n),b("falling back to ArrayBuffer instantiation"),o(t)}))}))).catch(f)}(),n.___wasm_call_ctors=function(){return(n.___wasm_call_ctors=n.asm.fa).apply(null,arguments)},n._malloc=function(){return(Ar=n._malloc=n.asm.ga).apply(null,arguments)}),Tr=n._free=function(){return(Tr=n._free=n.asm.ha).apply(null,arguments)},Er=(n._emscripten_tls_init=function(){return(n._emscripten_tls_init=n.asm.ia).apply(null,arguments)},n.___getTypeName=function(){return(Er=n.___getTypeName=n.asm.ka).apply(null,arguments)}),Cr=(n.___embind_register_native_and_builtin_types=function(){return(n.___embind_register_native_and_builtin_types=n.asm.la).apply(null,arguments)},n._emscripten_current_thread_process_queued_calls=function(){return(n._emscripten_current_thread_process_queued_calls=n.asm.ma).apply(null,arguments)},n._emscripten_register_main_browser_thread_id=function(){return(Cr=n._emscripten_register_main_browser_thread_id=n.asm.na).apply(null,arguments)}),Pr=n._emscripten_main_browser_thread_id=function(){return(Pr=n._emscripten_main_browser_thread_id=n.asm.oa).apply(null,arguments)},kr=n.__emscripten_do_dispatch_to_thread=function(){return(kr=n.__emscripten_do_dispatch_to_thread=n.asm.pa).apply(null,arguments)},xr=n._emscripten_sync_run_in_main_thread_4=function(){return(xr=n._emscripten_sync_run_in_main_thread_4=n.asm.qa).apply(null,arguments)},Wr=n._emscripten_main_thread_process_queued_calls=function(){return(Wr=n._emscripten_main_thread_process_queued_calls=n.asm.ra).apply(null,arguments)},Fr=n._emscripten_run_in_main_runtime_thread_js=function(){return(Fr=n._emscripten_run_in_main_runtime_thread_js=n.asm.sa).apply(null,arguments)},Rr=n.__emscripten_call_on_thread=function(){return(Rr=n.__emscripten_call_on_thread=n.asm.ta).apply(null,arguments)},Sr=n.__emscripten_thread_init=function(){return(Sr=n.__emscripten_thread_init=n.asm.ua).apply(null,arguments)},Ir=n._pthread_self=function(){return(Ir=n._pthread_self=n.asm.va).apply(null,arguments)},jr=n.___pthread_tsd_run_dtors=function(){return(jr=n.___pthread_tsd_run_dtors=n.asm.wa).apply(null,arguments)},Or=n._emscripten_get_global_libc=function(){return(Or=n._emscripten_get_global_libc=n.asm.xa).apply(null,arguments)},Ur=n.stackSave=function(){return(Ur=n.stackSave=n.asm.ya).apply(null,arguments)},Dr=n.stackRestore=function(){return(Dr=n.stackRestore=n.asm.za).apply(null,arguments)},Mr=n.stackAlloc=function(){return(Mr=n.stackAlloc=n.asm.Aa).apply(null,arguments)},Lr=n._emscripten_stack_set_limits=function(){return(Lr=n._emscripten_stack_set_limits=n.asm.Ba).apply(null,arguments)},Br=n._setThrew=function(){return(Br=n._setThrew=n.asm.Ca).apply(null,arguments)},Hr=n._memalign=function(){return(Hr=n._memalign=n.asm.Da).apply(null,arguments)},qr=(n.dynCall_jiiiiiiiii=function(){return(n.dynCall_jiiiiiiiii=n.asm.Ea).apply(null,arguments)},n.dynCall_ijiii=function(){return(qr=n.dynCall_ijiii=n.asm.Fa).apply(null,arguments)}),Nr=(n.dynCall_jiji=function(){return(n.dynCall_jiji=n.asm.Ga).apply(null,arguments)},n.dynCall_jiiiiiiii=function(){return(n.dynCall_jiiiiiiii=n.asm.Ha).apply(null,arguments)},n.dynCall_jiiiiii=function(){return(n.dynCall_jiiiiii=n.asm.Ia).apply(null,arguments)},n.dynCall_jiiiii=function(){return(n.dynCall_jiiiii=n.asm.Ja).apply(null,arguments)},n.dynCall_iiijii=function(){return(n.dynCall_iiijii=n.asm.Ka).apply(null,arguments)},n.__emscripten_allow_main_runtime_queued_calls=600816),zr=n.__emscripten_main_thread_futex=897300;function Vr(n){this.name="ExitStatus",this.message="Program terminated with exit("+n+")",this.status=n}function Gr(r){if(r=r||h,!(rn>0)){if(m)return s(n),nn(),void postMessage({cmd:"loaded"});!function(){if(!m){if(n.preRun)for("function"==typeof n.preRun&&(n.preRun=[n.preRun]);n.preRun.length;)r=n.preRun.shift(),Q.unshift(r);var r;fn(Q)}}(),rn>0||(n.setStatus?(n.setStatus("Running..."),setTimeout((function(){setTimeout((function(){n.setStatus("")}),1),e()}),1)):e())}function e(){wr||(wr=!0,n.calledRun=!0,O||(nn(),s(n),n.onRuntimeInitialized&&n.onRuntimeInitialized(),function(){if(!m){if(n.postRun)for("function"==typeof n.postRun&&(n.postRun=[n.postRun]);n.postRun.length;)r=n.postRun.shift(),K.unshift(r);var r;fn(K)}}()))}}if(n.PThread=hn,n.PThread=hn,n.wasmMemory=T,n.ExitStatus=Vr,tn=function n(){wr||Gr(),wr||(tn=n)},n.run=Gr,n.preInit)for("function"==typeof n.preInit&&(n.preInit=[n.preInit]);n.preInit.length>0;)n.preInit.pop()();return m&&(C=!1,hn.initWorker()),Gr(),n.ready});const pn=dn;var hn=function(n){var r,e;(n=void 0!==(n=n||{})?n:{}).ready=new Promise((function(n,t){r=n,e=t}));var t,a={};for(t in n)n.hasOwnProperty(t)&&(a[t]=n[t]);var i,u=[],c="";c=self.location.href,c=0!==(c="file:///C:/Users/Dell7010/Desktop/web/tw/squoosh/codecs/avif/enc/avif_enc.js").indexOf("blob:")?c.substr(0,c.lastIndexOf("/")+1):"",i=function(n){var r=new XMLHttpRequest;return r.open("GET",n,!1),r.responseType="arraybuffer",r.send(null),new Uint8Array(r.response)};var s=n.print||console.log.bind(console),f=n.printErr||console.warn.bind(console);for(t in a)a.hasOwnProperty(t)&&(n[t]=a[t]);a=null,n.arguments&&(u=n.arguments),n.thisProgram&&n.thisProgram,n.quit&&n.quit;var l,d,p=0;n.wasmBinary&&(l=n.wasmBinary),n.noExitRuntime,"object"!=typeof WebAssembly&&q("no native wasm support detected");var h=!1,v=new TextDecoder("utf8");function m(n,r){if(!n)return"";for(var e=n+r,t=n;!(t>=e)&&w[t];)++t;return v.decode(w.subarray(n,t))}var g,y,w,b,_,A,T,E,C,P=new TextDecoder("utf-16le");function k(n,r){for(var e=n,t=e>>1,o=t+r/2;!(t>=o)&&_[t];)++t;return e=t<<1,P.decode(w.subarray(n,e))}function x(n,r,e){if(void 0===e&&(e=2147483647),e<2)return 0;for(var t=r,o=(e-=2)<2*n.length?e/2:n.length,a=0;a<o;++a){var i=n.charCodeAt(a);b[r>>1]=i,r+=2}return b[r>>1]=0,r-t}function W(n){return 2*n.length}function F(n,r){for(var e=0,t="";!(e>=r/4);){var o=A[n+4*e>>2];if(0==o)break;if(++e,o>=65536){var a=o-65536;t+=String.fromCharCode(55296|a>>10,56320|1023&a)}else t+=String.fromCharCode(o)}return t}function R(n,r,e){if(void 0===e&&(e=2147483647),e<4)return 0;for(var t=r,o=t+e-4,a=0;a<n.length;++a){var i=n.charCodeAt(a);if(i>=55296&&i<=57343&&(i=65536+((1023&i)<<10)|1023&n.charCodeAt(++a)),A[r>>2]=i,(r+=4)+4>o)break}return A[r>>2]=0,r-t}function S(n){for(var r=0,e=0;e<n.length;++e){var t=n.charCodeAt(e);t>=55296&&t<=57343&&++e,r+=4}return r}function I(r){g=r,n.HEAP8=y=new Int8Array(r),n.HEAP16=b=new Int16Array(r),n.HEAP32=A=new Int32Array(r),n.HEAPU8=w=new Uint8Array(r),n.HEAPU16=_=new Uint16Array(r),n.HEAPU32=T=new Uint32Array(r),n.HEAPF32=E=new Float32Array(r),n.HEAPF64=C=new Float64Array(r)}n.INITIAL_MEMORY;var j,O,U=[],D=[],M=[],L=0,B=null,H=null;function q(r){n.onAbort&&n.onAbort(r),f(r+=""),h=!0,r="abort("+r+"). Build with -s ASSERTIONS=1 for more info.";var t=new WebAssembly.RuntimeError(r);throw e(t),t}function N(n){return n.startsWith("data:application/octet-stream;base64,")}if(n.preloadedImages={},n.preloadedAudios={},n.locateFile)N(z="avif_enc.wasm")||(O=z,z=n.locateFile?n.locateFile(O,c):c+O);else var z=new URL(o(199),o.b).toString();function V(n){try{if(n==z&&l)return new Uint8Array(l);if(i)return i(n);throw"both async and sync fetching of the wasm failed"}catch(n){q(n)}}function G(r){for(;r.length>0;){var e=r.shift();if("function"!=typeof e){var t=e.func;"number"==typeof t?void 0===e.arg?j.get(t)():j.get(t)(e.arg):t(void 0===e.arg?null:e.arg)}else e(n)}}var J={mappings:{},buffers:[null,[],[]],printChar:function(n,r){var e=J.buffers[n];0===r||10===r?((1===n?s:f)(function(n,r,e){for(var t=0;n[t]&&!(t>=NaN);)++t;return v.decode(n.subarray?n.subarray(0,t):new Uint8Array(n.slice(0,t)))}(e)),e.length=0):e.push(r)},varargs:void 0,get:function(){return J.varargs+=4,A[J.varargs-4>>2]},getStr:function(n){return m(n)},get64:function(n,r){return n}},$={};function X(n){for(;n.length;){var r=n.pop();n.pop()(r)}}function Q(n){return this.fromWireType(T[n>>2])}var Y={},Z={},K={};function nn(n){if(void 0===n)return"_unknown";var r=(n=n.replace(/[^a-zA-Z0-9_]/g,"$")).charCodeAt(0);return r>=48&&r<=57?"_"+n:n}function rn(n,r){return n=nn(n),new Function("body","return function "+n+'() {\n    "use strict";    return body.apply(this, arguments);\n};\n')(r)}function en(n,r){var e=rn(r,(function(n){this.name=r,this.message=n;var e=new Error(n).stack;void 0!==e&&(this.stack=this.toString()+"\n"+e.replace(/^Error(:[^\n]*)?\n/,""))}));return e.prototype=Object.create(n.prototype),e.prototype.constructor=e,e.prototype.toString=function(){return void 0===this.message?this.name:this.name+": "+this.message},e}var tn=void 0;function on(n){throw new tn(n)}function an(n,r,e){function t(r){var t=e(r);t.length!==n.length&&on("Mismatched type converter count");for(var o=0;o<n.length;++o)dn(n[o],t[o])}n.forEach((function(n){K[n]=r}));var o=new Array(r.length),a=[],i=0;r.forEach((function(n,r){Z.hasOwnProperty(n)?o[r]=Z[n]:(a.push(n),Y.hasOwnProperty(n)||(Y[n]=[]),Y[n].push((function(){o[r]=Z[n],++i===a.length&&t(o)})))})),0===a.length&&t(o)}function un(n){switch(n){case 1:return 0;case 2:return 1;case 4:return 2;case 8:return 3;default:throw new TypeError("Unknown type size: "+n)}}var cn=void 0;function sn(n){for(var r="",e=n;w[e];)r+=cn[w[e++]];return r}var fn=void 0;function ln(n){throw new fn(n)}function dn(n,r,e){if(e=e||{},!("argPackAdvance"in r))throw new TypeError("registerType registeredInstance requires argPackAdvance");var t=r.name;if(n||ln('type "'+t+'" must have a positive integer typeid pointer'),Z.hasOwnProperty(n)){if(e.ignoreDuplicateRegistrations)return;ln("Cannot register type '"+t+"' twice")}if(Z[n]=r,delete K[n],Y.hasOwnProperty(n)){var o=Y[n];delete Y[n],o.forEach((function(n){n()}))}}var pn=[],hn=[{},{value:void 0},{value:null},{value:!0},{value:!1}];function vn(n){n>4&&0==--hn[n].refcount&&(hn[n]=void 0,pn.push(n))}function mn(n){switch(n){case void 0:return 1;case null:return 2;case!0:return 3;case!1:return 4;default:var r=pn.length?pn.pop():hn.length;return hn[r]={refcount:1,value:n},r}}function gn(n){if(null===n)return"null";var r=typeof n;return"object"===r||"array"===r||"function"===r?n.toString():""+n}function yn(n,r){switch(r){case 2:return function(n){return this.fromWireType(E[n>>2])};case 3:return function(n){return this.fromWireType(C[n>>3])};default:throw new TypeError("Unknown float type: "+n)}}function wn(r,e,t){return r.includes("j")?function(r,e,t){var o=n["dynCall_"+r];return t&&t.length?o.apply(null,[e].concat(t)):o.call(null,e)}(r,e,t):j.get(e).apply(null,t)}function bn(n,r){var e,t,o,a=(n=sn(n)).includes("j")?(e=n,t=r,o=[],function(){o.length=arguments.length;for(var n=0;n<arguments.length;n++)o[n]=arguments[n];return wn(e,t,o)}):j.get(r);return"function"!=typeof a&&ln("unknown function pointer with signature "+n+": "+r),a}var _n=void 0;function An(n){var r=In(n),e=sn(r);return Sn(r),e}function Tn(n,r,e){switch(r){case 0:return e?function(n){return y[n]}:function(n){return w[n]};case 1:return e?function(n){return b[n>>1]}:function(n){return _[n>>1]};case 2:return e?function(n){return A[n>>2]}:function(n){return T[n>>2]};default:throw new TypeError("Unknown integer type: "+n)}}var En={};function Cn(){return"object"==typeof globalThis?globalThis:Function("return this")()}function Pn(n,r){var e=Z[n];return void 0===e&&ln(r+" has unknown type "+An(n)),e}var kn={};function xn(n){try{return d.grow(n-g.byteLength+65535>>>16),I(d.buffer),1}catch(n){}}tn=n.InternalError=en(Error,"InternalError"),function(){for(var n=new Array(256),r=0;r<256;++r)n[r]=String.fromCharCode(r);cn=n}(),fn=n.BindingError=en(Error,"BindingError"),n.count_emval_handles=function(){for(var n=0,r=5;r<hn.length;++r)void 0!==hn[r]&&++n;return n},n.get_first_emval=function(){for(var n=5;n<hn.length;++n)if(void 0!==hn[n])return hn[n];return null},_n=n.UnboundTypeError=en(Error,"UnboundTypeError");var Wn,Fn={O:function(n,r){},r:function(n,r,e){return J.varargs=e,0},G:function(n,r,e){return J.varargs=e,0},H:function(n,r,e){J.varargs=e},x:function(n){var r=$[n];delete $[n];var e=r.rawConstructor,t=r.rawDestructor,o=r.fields;an([n],o.map((function(n){return n.getterReturnType})).concat(o.map((function(n){return n.setterArgumentType}))),(function(n){var a={};return o.forEach((function(r,e){var t=r.fieldName,i=n[e],u=r.getter,c=r.getterContext,s=n[e+o.length],f=r.setter,l=r.setterContext;a[t]={read:function(n){return i.fromWireType(u(c,n))},write:function(n,r){var e=[];f(l,n,s.toWireType(e,r)),X(e)}}})),[{name:r.name,fromWireType:function(n){var r={};for(var e in a)r[e]=a[e].read(n);return t(n),r},toWireType:function(n,r){for(var o in a)if(!(o in r))throw new TypeError('Missing field:  "'+o+'"');var i=e();for(o in a)a[o].write(i,r[o]);return null!==n&&n.push(t,i),i},argPackAdvance:8,readValueFromPointer:Q,destructorFunction:t}]}))},B:function(n,r,e,t,o){},K:function(n,r,e,t,o){var a=un(e);dn(n,{name:r=sn(r),fromWireType:function(n){return!!n},toWireType:function(n,r){return r?t:o},argPackAdvance:8,readValueFromPointer:function(n){var t;if(1===e)t=y;else if(2===e)t=b;else{if(4!==e)throw new TypeError("Unknown boolean type size: "+r);t=A}return this.fromWireType(t[n>>a])},destructorFunction:null})},J:function(n,r){dn(n,{name:r=sn(r),fromWireType:function(n){var r=hn[n].value;return vn(n),r},toWireType:function(n,r){return mn(r)},argPackAdvance:8,readValueFromPointer:Q,destructorFunction:null})},t:function(n,r,e){var t=un(e);dn(n,{name:r=sn(r),fromWireType:function(n){return n},toWireType:function(n,r){if("number"!=typeof r&&"boolean"!=typeof r)throw new TypeError('Cannot convert "'+gn(r)+'" to '+this.name);return r},argPackAdvance:8,readValueFromPointer:yn(r,t),destructorFunction:null})},w:function(r,e,t,o,a,i){var u=function(n,r){for(var e=[],t=0;t<n;t++)e.push(A[(r>>2)+t]);return e}(e,t);r=sn(r),a=bn(o,a),function(r,e,t){n.hasOwnProperty(r)?((void 0===t||void 0!==n[r].overloadTable&&void 0!==n[r].overloadTable[t])&&ln("Cannot register public name '"+r+"' twice"),function(n,r,e){if(void 0===n[r].overloadTable){var t=n[r];n[r]=function(){return n[r].overloadTable.hasOwnProperty(arguments.length)||ln("Function '"+e+"' called with an invalid number of arguments ("+arguments.length+") - expects one of ("+n[r].overloadTable+")!"),n[r].overloadTable[arguments.length].apply(this,arguments)},n[r].overloadTable=[],n[r].overloadTable[t.argCount]=t}}(n,r,r),n.hasOwnProperty(t)&&ln("Cannot register multiple overloads of a function with the same number of arguments ("+t+")!"),n[r].overloadTable[t]=e):(n[r]=e,void 0!==t&&(n[r].numArguments=t))}(r,(function(){!function(n,r){var e=[],t={};throw r.forEach((function n(r){t[r]||Z[r]||(K[r]?K[r].forEach(n):(e.push(r),t[r]=!0))})),new _n(n+": "+e.map(An).join([", "]))}("Cannot call "+r+" due to unbound types",u)}),e-1),an([],u,(function(t){var o=[t[0],null].concat(t.slice(1));return function(r,e,t){n.hasOwnProperty(r)||on("Replacing nonexistant public symbol"),void 0!==n[r].overloadTable&&void 0!==t?n[r].overloadTable[t]=e:(n[r]=e,n[r].argCount=t)}(r,function(n,r,e,t,o){var a=r.length;a<2&&ln("argTypes array size mismatch! Must at least get return value and 'this' types!");for(var i=null!==r[1]&&null!==e,u=!1,c=1;c<r.length;++c)if(null!==r[c]&&void 0===r[c].destructorFunction){u=!0;break}var s="void"!==r[0].name,f="",l="";for(c=0;c<a-2;++c)f+=(0!==c?", ":"")+"arg"+c,l+=(0!==c?", ":"")+"arg"+c+"Wired";var d="return function "+nn(n)+"("+f+") {\nif (arguments.length !== "+(a-2)+") {\nthrowBindingError('function "+n+" called with ' + arguments.length + ' arguments, expected "+(a-2)+" args!');\n}\n";u&&(d+="var destructors = [];\n");var p=u?"destructors":"null",h=["throwBindingError","invoker","fn","runDestructors","retType","classParam"],v=[ln,t,o,X,r[0],r[1]];for(i&&(d+="var thisWired = classParam.toWireType("+p+", this);\n"),c=0;c<a-2;++c)d+="var arg"+c+"Wired = argType"+c+".toWireType("+p+", arg"+c+"); // "+r[c+2].name+"\n",h.push("argType"+c),v.push(r[c+2]);if(i&&(l="thisWired"+(l.length>0?", ":"")+l),d+=(s?"var rv = ":"")+"invoker(fn"+(l.length>0?", ":"")+l+");\n",u)d+="runDestructors(destructors);\n";else for(c=i?1:2;c<r.length;++c){var m=1===c?"thisWired":"arg"+(c-2)+"Wired";null!==r[c].destructorFunction&&(d+=m+"_dtor("+m+"); // "+r[c].name+"\n",h.push(m+"_dtor"),v.push(r[c].destructorFunction))}return s&&(d+="var ret = retType.fromWireType(rv);\nreturn ret;\n"),d+="}\n",h.push(d),function(n,r){if(!(n instanceof Function))throw new TypeError("new_ called with constructor type "+typeof n+" which is not a function");var e=rn(n.name||"unknownFunctionName",(function(){}));e.prototype=n.prototype;var t=new e,o=n.apply(t,r);return o instanceof Object?o:t}(Function,h).apply(null,v)}(r,o,null,a,i),e-1),[]}))},i:function(n,r,e,t,o){r=sn(r),-1===o&&(o=4294967295);var a=un(e),i=function(n){return n};if(0===t){var u=32-8*e;i=function(n){return n<<u>>>u}}var c=r.includes("unsigned");dn(n,{name:r,fromWireType:i,toWireType:function(n,e){if("number"!=typeof e&&"boolean"!=typeof e)throw new TypeError('Cannot convert "'+gn(e)+'" to '+this.name);if(e<t||e>o)throw new TypeError('Passing a number "'+gn(e)+'" from JS side to C/C++ side to an argument of type "'+r+'", which is outside the valid range ['+t+", "+o+"]!");return c?e>>>0:0|e},argPackAdvance:8,readValueFromPointer:Tn(r,a,0!==t),destructorFunction:null})},e:function(n,r,e){var t=[Int8Array,Uint8Array,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array][r];function o(n){var r=T,e=r[n>>=2],o=r[n+1];return new t(g,o,e)}dn(n,{name:e=sn(e),fromWireType:o,argPackAdvance:8,readValueFromPointer:o},{ignoreDuplicateRegistrations:!0})},u:function(n,r){var e="std::string"===(r=sn(r));dn(n,{name:r,fromWireType:function(n){var r,t=T[n>>2];if(e)for(var o=n+4,a=0;a<=t;++a){var i=n+4+a;if(a==t||0==w[i]){var u=m(o,i-o);void 0===r?r=u:(r+=String.fromCharCode(0),r+=u),o=i+1}}else{var c=new Array(t);for(a=0;a<t;++a)c[a]=String.fromCharCode(w[n+4+a]);r=c.join("")}return Sn(n),r},toWireType:function(n,r){var t;r instanceof ArrayBuffer&&(r=new Uint8Array(r));var o="string"==typeof r;o||r instanceof Uint8Array||r instanceof Uint8ClampedArray||r instanceof Int8Array||ln("Cannot pass non-string to std::string"),t=e&&o?function(){return function(n){for(var r=0,e=0;e<n.length;++e){var t=n.charCodeAt(e);t>=55296&&t<=57343&&(t=65536+((1023&t)<<10)|1023&n.charCodeAt(++e)),t<=127?++r:r+=t<=2047?2:t<=65535?3:4}return r}(r)}:function(){return r.length};var a=t(),i=Rn(4+a+1);if(T[i>>2]=a,e&&o)!function(n,r,e,t){if(!(t>0))return 0;for(var o=e+t-1,a=0;a<n.length;++a){var i=n.charCodeAt(a);if(i>=55296&&i<=57343&&(i=65536+((1023&i)<<10)|1023&n.charCodeAt(++a)),i<=127){if(e>=o)break;r[e++]=i}else if(i<=2047){if(e+1>=o)break;r[e++]=192|i>>6,r[e++]=128|63&i}else if(i<=65535){if(e+2>=o)break;r[e++]=224|i>>12,r[e++]=128|i>>6&63,r[e++]=128|63&i}else{if(e+3>=o)break;r[e++]=240|i>>18,r[e++]=128|i>>12&63,r[e++]=128|i>>6&63,r[e++]=128|63&i}}r[e]=0}(r,w,i+4,a+1);else if(o)for(var u=0;u<a;++u){var c=r.charCodeAt(u);c>255&&(Sn(i),ln("String has UTF-16 code units that do not fit in 8 bits")),w[i+4+u]=c}else for(u=0;u<a;++u)w[i+4+u]=r[u];return null!==n&&n.push(Sn,i),i},argPackAdvance:8,readValueFromPointer:Q,destructorFunction:function(n){Sn(n)}})},o:function(n,r,e){var t,o,a,i,u;e=sn(e),2===r?(t=k,o=x,i=W,a=function(){return _},u=1):4===r&&(t=F,o=R,i=S,a=function(){return T},u=2),dn(n,{name:e,fromWireType:function(n){for(var e,o=T[n>>2],i=a(),c=n+4,s=0;s<=o;++s){var f=n+4+s*r;if(s==o||0==i[f>>u]){var l=t(c,f-c);void 0===e?e=l:(e+=String.fromCharCode(0),e+=l),c=f+r}}return Sn(n),e},toWireType:function(n,t){"string"!=typeof t&&ln("Cannot pass non-string to C++ string type "+e);var a=i(t),c=Rn(4+a+r);return T[c>>2]=a>>u,o(t,c+4,a+r),null!==n&&n.push(Sn,c),c},argPackAdvance:8,readValueFromPointer:Q,destructorFunction:function(n){Sn(n)}})},z:function(n,r,e,t,o,a){$[n]={name:sn(r),rawConstructor:bn(e,t),rawDestructor:bn(o,a),fields:[]}},g:function(n,r,e,t,o,a,i,u,c,s){$[n].fields.push({fieldName:sn(r),getterReturnType:e,getter:bn(t,o),getterContext:a,setterArgumentType:i,setter:bn(u,c),setterContext:s})},L:function(n,r){dn(n,{isVoid:!0,name:r=sn(r),argPackAdvance:0,fromWireType:function(){},toWireType:function(n,r){}})},j:vn,N:function(n){return 0===n?mn(Cn()):(n=void 0===(e=En[r=n])?sn(r):e,mn(Cn()[n]));var r,e},v:function(n){n>4&&(hn[n].refcount+=1)},D:function(r,e,t,o){r=function(n){return n||ln("Cannot use deleted val. handle = "+n),hn[n].value}(r);var a=kn[e];return a||(a=function(r){for(var e="",t=0;t<r;++t)e+=(0!==t?", ":"")+"arg"+t;var o="return function emval_allocator_"+r+"(constructor, argTypes, args) {\n";for(t=0;t<r;++t)o+="var argType"+t+" = requireRegisteredType(Module['HEAP32'][(argTypes >>> 2) + "+t+'], "parameter '+t+'");\nvar arg'+t+" = argType"+t+".readValueFromPointer(args);\nargs += argType"+t+"['argPackAdvance'];\n";return o+="var obj = new constructor("+e+");\nreturn __emval_register(obj);\n}\n",new Function("requireRegisteredType","Module","__emval_register",o)(Pn,n,mn)}(e),kn[e]=a),a(r,t,o)},f:function(){q()},d:function(n,r){return function(n,r){throw Un(n,r||1),"longjmp"}(n,r)},E:function(n,r,e){w.copyWithin(n,r,r+e)},n:function(n){var r,e=w.length,t=2147483648;if((n>>>=0)>t)return!1;for(var o=1;o<=4;o*=2){var a=e*(1+.2/o);if(a=Math.min(a,n+100663296),xn(Math.min(t,((r=Math.max(n,a))%65536>0&&(r+=65536-r%65536),r))))return!0}return!1},s:function(n){return 0},F:function(n,r,e,t){var o=J.getStreamFromFD(n),a=J.doReadv(o,r,e);return A[t>>2]=a,0},A:function(n,r,e,t,o){},I:function(n,r,e,t){for(var o=0,a=0;a<e;a++){for(var i=A[r+8*a>>2],u=A[r+(8*a+4)>>2],c=0;c<u;c++)J.printChar(n,w[i+c]);o+=u}return A[t>>2]=o,0},b:function(){return p},l:function(n,r,e,t,o){var a=jn();try{return j.get(n)(r,e,t,o)}catch(n){if(On(a),n!==n+0&&"longjmp"!==n)throw n;Un(1,0)}},p:function(n,r,e,t,o,a,i,u,c){var s=jn();try{return j.get(n)(r,e,t,o,a,i,u,c)}catch(n){if(On(s),n!==n+0&&"longjmp"!==n)throw n;Un(1,0)}},q:function(n,r,e,t,o,a,i,u,c,s){var f=jn();try{return j.get(n)(r,e,t,o,a,i,u,c,s)}catch(n){if(On(f),n!==n+0&&"longjmp"!==n)throw n;Un(1,0)}},C:function(n,r,e,t,o,a,i,u,c,s,f,l){var d=jn();try{return j.get(n)(r,e,t,o,a,i,u,c,s,f,l)}catch(n){if(On(d),n!==n+0&&"longjmp"!==n)throw n;Un(1,0)}},y:function(n,r,e,t,o,a){var i=jn();try{return Dn(n,r,e,t,o,a)}catch(n){if(On(i),n!==n+0&&"longjmp"!==n)throw n;Un(1,0)}},m:function(n,r){var e=jn();try{j.get(n)(r)}catch(n){if(On(e),n!==n+0&&"longjmp"!==n)throw n;Un(1,0)}},h:function(n,r,e){var t=jn();try{j.get(n)(r,e)}catch(n){if(On(t),n!==n+0&&"longjmp"!==n)throw n;Un(1,0)}},c:function(n,r,e,t,o){var a=jn();try{j.get(n)(r,e,t,o)}catch(n){if(On(a),n!==n+0&&"longjmp"!==n)throw n;Un(1,0)}},k:function(n,r,e,t,o,a,i,u,c,s,f){var l=jn();try{j.get(n)(r,e,t,o,a,i,u,c,s,f)}catch(n){if(On(l),n!==n+0&&"longjmp"!==n)throw n;Un(1,0)}},a:function(n){p=n},M:function(n){var r=Date.now()/1e3|0;return n&&(A[n>>2]=r),r}},Rn=(function(){var r={a:Fn};function t(r,e){var t,o=r.exports;n.asm=o,I((d=n.asm.P).buffer),j=n.asm.Y,t=n.asm.Q,D.unshift(t),function(r){if(L--,n.monitorRunDependencies&&n.monitorRunDependencies(L),0==L&&(null!==B&&(clearInterval(B),B=null),H)){var e=H;H=null,e()}}()}function o(n){t(n.instance)}function a(n){return(l||"function"!=typeof fetch?Promise.resolve().then((function(){return V(z)})):fetch(z,{credentials:"same-origin"}).then((function(n){if(!n.ok)throw"failed to load wasm binary file at '"+z+"'";return n.arrayBuffer()})).catch((function(){return V(z)}))).then((function(n){return WebAssembly.instantiate(n,r)})).then(n,(function(n){f("failed to asynchronously prepare wasm: "+n),q(n)}))}if(L++,n.monitorRunDependencies&&n.monitorRunDependencies(L),n.instantiateWasm)try{return n.instantiateWasm(r,t)}catch(n){return f("Module.instantiateWasm callback failed with error: "+n),!1}(l||"function"!=typeof WebAssembly.instantiateStreaming||N(z)||"function"!=typeof fetch?a(o):fetch(z,{credentials:"same-origin"}).then((function(n){return WebAssembly.instantiateStreaming(n,r).then(o,(function(n){return f("wasm streaming compile failed: "+n),f("falling back to ArrayBuffer instantiation"),a(o)}))}))).catch(e)}(),n.___wasm_call_ctors=function(){return(n.___wasm_call_ctors=n.asm.Q).apply(null,arguments)},n._malloc=function(){return(Rn=n._malloc=n.asm.R).apply(null,arguments)}),Sn=n._free=function(){return(Sn=n._free=n.asm.S).apply(null,arguments)},In=n.___getTypeName=function(){return(In=n.___getTypeName=n.asm.T).apply(null,arguments)},jn=(n.___embind_register_native_and_builtin_types=function(){return(n.___embind_register_native_and_builtin_types=n.asm.U).apply(null,arguments)},n.stackSave=function(){return(jn=n.stackSave=n.asm.V).apply(null,arguments)}),On=n.stackRestore=function(){return(On=n.stackRestore=n.asm.W).apply(null,arguments)},Un=n._setThrew=function(){return(Un=n._setThrew=n.asm.X).apply(null,arguments)},Dn=(n.dynCall_jiiiiiiiii=function(){return(n.dynCall_jiiiiiiiii=n.asm.Z).apply(null,arguments)},n.dynCall_ijiii=function(){return(Dn=n.dynCall_ijiii=n.asm._).apply(null,arguments)});function Mn(e){function t(){Wn||(Wn=!0,n.calledRun=!0,h||(G(D),r(n),n.onRuntimeInitialized&&n.onRuntimeInitialized(),function(){if(n.postRun)for("function"==typeof n.postRun&&(n.postRun=[n.postRun]);n.postRun.length;)r=n.postRun.shift(),M.unshift(r);var r;G(M)}()))}e=e||u,L>0||(function(){if(n.preRun)for("function"==typeof n.preRun&&(n.preRun=[n.preRun]);n.preRun.length;)r=n.preRun.shift(),U.unshift(r);var r;G(U)}(),L>0||(n.setStatus?(n.setStatus("Running..."),setTimeout((function(){setTimeout((function(){n.setStatus("")}),1),t()}),1)):t()))}if(n.dynCall_jiji=function(){return(n.dynCall_jiji=n.asm.$).apply(null,arguments)},n.dynCall_jiiiiiiii=function(){return(n.dynCall_jiiiiiiii=n.asm.aa).apply(null,arguments)},n.dynCall_jiiiiii=function(){return(n.dynCall_jiiiiii=n.asm.ba).apply(null,arguments)},n.dynCall_jiiiii=function(){return(n.dynCall_jiiiii=n.asm.ca).apply(null,arguments)},n.dynCall_iiijii=function(){return(n.dynCall_iiijii=n.asm.da).apply(null,arguments)},H=function n(){Wn||Mn(),Wn||(H=n)},n.run=Mn,n.preInit)for("function"==typeof n.preInit&&(n.preInit=[n.preInit]);n.preInit.length>0;)n.preInit.pop()();return Mn(),n.ready};const vn=hn;let mn;const gn=(n,r)=>async function(n,r){mn||(mn=async function(){return await ln()?await cn(pn):await cn(vn)}());const e=(await mn).encode(n.data,n.width,n.height,r);if(!e)throw new Error("Encoding error");return e.buffer}(n,r),yn=(n,r)=>m(n,F),wn=(n,r)=>m(n,j,r.quality),bn=(n,r)=>m(n,M);let _n;const An=(n,r)=>async function(n,r){_n||(_n=async function(){return await ln()?await fn()?cn((await o.e(39).then(o.bind(o,39))).default):cn((await o.e(866).then(o.bind(o,866))).default):cn((await o.e(487).then(o.bind(o,487))).default)}());const e=(await _n).encode(n.data,n.width,n.height,r);if(!e)throw new Error("Encoding error.");return e.buffer}(n,r);var Tn=function(n){var r,e;(n=void 0!==(n=n||{})?n:{}).ready=new Promise((function(n,t){r=n,e=t}));var t,a={};for(t in n)n.hasOwnProperty(t)&&(a[t]=n[t]);var i,u=[],c="./this.program",s=function(n,r){throw r},f="";f=self.location.href,f=0!==(f="file:///C:/Users/Dell7010/Desktop/web/tw/squoosh/codecs/mozjpeg/enc/mozjpeg_enc.js").indexOf("blob:")?f.substr(0,f.lastIndexOf("/")+1):"",i=function(n){var r=new XMLHttpRequest;return r.open("GET",n,!1),r.responseType="arraybuffer",r.send(null),new Uint8Array(r.response)};var l,d=n.print||console.log.bind(console),p=n.printErr||console.warn.bind(console);for(t in a)a.hasOwnProperty(t)&&(n[t]=a[t]);a=null,n.arguments&&(u=n.arguments),n.thisProgram&&(c=n.thisProgram),n.quit&&(s=n.quit),n.wasmBinary&&(l=n.wasmBinary);var h,v=n.noExitRuntime||!0;"object"!=typeof WebAssembly&&z("no native wasm support detected");var m=!1,g=new TextDecoder("utf8");function y(n,r){if(!n)return"";for(var e=n+r,t=n;!(t>=e)&&_[t];)++t;return g.decode(_.subarray(n,t))}var w,b,_,A,T,E,C,P,k,x=new TextDecoder("utf-16le");function W(n,r){for(var e=n,t=e>>1,o=t+r/2;!(t>=o)&&T[t];)++t;return e=t<<1,x.decode(_.subarray(n,e))}function F(n,r,e){if(void 0===e&&(e=2147483647),e<2)return 0;for(var t=r,o=(e-=2)<2*n.length?e/2:n.length,a=0;a<o;++a){var i=n.charCodeAt(a);A[r>>1]=i,r+=2}return A[r>>1]=0,r-t}function R(n){return 2*n.length}function S(n,r){for(var e=0,t="";!(e>=r/4);){var o=E[n+4*e>>2];if(0==o)break;if(++e,o>=65536){var a=o-65536;t+=String.fromCharCode(55296|a>>10,56320|1023&a)}else t+=String.fromCharCode(o)}return t}function I(n,r,e){if(void 0===e&&(e=2147483647),e<4)return 0;for(var t=r,o=t+e-4,a=0;a<n.length;++a){var i=n.charCodeAt(a);if(i>=55296&&i<=57343&&(i=65536+((1023&i)<<10)|1023&n.charCodeAt(++a)),E[r>>2]=i,(r+=4)+4>o)break}return E[r>>2]=0,r-t}function j(n){for(var r=0,e=0;e<n.length;++e){var t=n.charCodeAt(e);t>=55296&&t<=57343&&++e,r+=4}return r}function O(r){w=r,n.HEAP8=b=new Int8Array(r),n.HEAP16=A=new Int16Array(r),n.HEAP32=E=new Int32Array(r),n.HEAPU8=_=new Uint8Array(r),n.HEAPU16=T=new Uint16Array(r),n.HEAPU32=C=new Uint32Array(r),n.HEAPF32=P=new Float32Array(r),n.HEAPF64=k=new Float64Array(r)}n.INITIAL_MEMORY;var U,D,M=[],L=[],B=[],H=0,q=null,N=null;function z(r){n.onAbort&&n.onAbort(r),p(r+=""),m=!0,r="abort("+r+"). Build with -s ASSERTIONS=1 for more info.";var t=new WebAssembly.RuntimeError(r);throw e(t),t}function V(n){return n.startsWith("data:application/octet-stream;base64,")}if(n.preloadedImages={},n.preloadedAudios={},n.locateFile)V(G="mozjpeg_enc.wasm")||(D=G,G=n.locateFile?n.locateFile(D,f):f+D);else var G=new URL(o(256),o.b).toString();function J(n){try{if(n==G&&l)return new Uint8Array(l);if(i)return i(n);throw"both async and sync fetching of the wasm failed"}catch(n){z(n)}}function $(r){for(;r.length>0;){var e=r.shift();if("function"!=typeof e){var t=e.func;"number"==typeof t?void 0===e.arg?U.get(t)():U.get(t)(e.arg):t(void 0===e.arg?null:e.arg)}else e(n)}}function X(){return v||!1}var Q={};function Y(n){for(;n.length;){var r=n.pop();n.pop()(r)}}function Z(n){return this.fromWireType(C[n>>2])}var K={},nn={},rn={};function en(n){if(void 0===n)return"_unknown";var r=(n=n.replace(/[^a-zA-Z0-9_]/g,"$")).charCodeAt(0);return r>=48&&r<=57?"_"+n:n}function tn(n,r){return n=en(n),new Function("body","return function "+n+'() {\n    "use strict";    return body.apply(this, arguments);\n};\n')(r)}function on(n,r){var e=tn(r,(function(n){this.name=r,this.message=n;var e=new Error(n).stack;void 0!==e&&(this.stack=this.toString()+"\n"+e.replace(/^Error(:[^\n]*)?\n/,""))}));return e.prototype=Object.create(n.prototype),e.prototype.constructor=e,e.prototype.toString=function(){return void 0===this.message?this.name:this.name+": "+this.message},e}var an=void 0;function un(n){throw new an(n)}function cn(n,r,e){function t(r){var t=e(r);t.length!==n.length&&un("Mismatched type converter count");for(var o=0;o<n.length;++o)hn(n[o],t[o])}n.forEach((function(n){rn[n]=r}));var o=new Array(r.length),a=[],i=0;r.forEach((function(n,r){nn.hasOwnProperty(n)?o[r]=nn[n]:(a.push(n),K.hasOwnProperty(n)||(K[n]=[]),K[n].push((function(){o[r]=nn[n],++i===a.length&&t(o)})))})),0===a.length&&t(o)}function sn(n){switch(n){case 1:return 0;case 2:return 1;case 4:return 2;case 8:return 3;default:throw new TypeError("Unknown type size: "+n)}}var fn=void 0;function ln(n){for(var r="",e=n;_[e];)r+=fn[_[e++]];return r}var dn=void 0;function pn(n){throw new dn(n)}function hn(n,r,e){if(e=e||{},!("argPackAdvance"in r))throw new TypeError("registerType registeredInstance requires argPackAdvance");var t=r.name;if(n||pn('type "'+t+'" must have a positive integer typeid pointer'),nn.hasOwnProperty(n)){if(e.ignoreDuplicateRegistrations)return;pn("Cannot register type '"+t+"' twice")}if(nn[n]=r,delete rn[n],K.hasOwnProperty(n)){var o=K[n];delete K[n],o.forEach((function(n){n()}))}}var vn=[],mn=[{},{value:void 0},{value:null},{value:!0},{value:!1}];function gn(n){n>4&&0==--mn[n].refcount&&(mn[n]=void 0,vn.push(n))}function yn(n){switch(n){case void 0:return 1;case null:return 2;case!0:return 3;case!1:return 4;default:var r=vn.length?vn.pop():mn.length;return mn[r]={refcount:1,value:n},r}}function wn(n){if(null===n)return"null";var r=typeof n;return"object"===r||"array"===r||"function"===r?n.toString():""+n}function bn(n,r){switch(r){case 2:return function(n){return this.fromWireType(P[n>>2])};case 3:return function(n){return this.fromWireType(k[n>>3])};default:throw new TypeError("Unknown float type: "+n)}}function _n(r,e,t){return r.includes("j")?function(r,e,t){var o=n["dynCall_"+r];return t&&t.length?o.apply(null,[e].concat(t)):o.call(null,e)}(r,e,t):U.get(e).apply(null,t)}function An(n,r){var e,t,o,a=(n=ln(n)).includes("j")?(e=n,t=r,o=[],function(){o.length=arguments.length;for(var n=0;n<arguments.length;n++)o[n]=arguments[n];return _n(e,t,o)}):U.get(r);return"function"!=typeof a&&pn("unknown function pointer with signature "+n+": "+r),a}var Tn=void 0;function En(n){var r=Mn(n),e=ln(r);return Dn(r),e}function Cn(n,r,e){switch(r){case 0:return e?function(n){return b[n]}:function(n){return _[n]};case 1:return e?function(n){return A[n>>1]}:function(n){return T[n>>1]};case 2:return e?function(n){return E[n>>2]}:function(n){return C[n>>2]};default:throw new TypeError("Unknown integer type: "+n)}}var Pn={};function kn(){return"object"==typeof globalThis?globalThis:Function("return this")()}function xn(n,r){var e=nn[n];return void 0===e&&pn(r+" has unknown type "+En(n)),e}var Wn={};function Fn(n){try{return h.grow(n-w.byteLength+65535>>>16),O(h.buffer),1}catch(n){}}var Rn={};function Sn(){if(!Sn.strings){var n={USER:"web_user",LOGNAME:"web_user",PATH:"/",PWD:"/",HOME:"/home/web_user",LANG:("object"==typeof navigator&&navigator.languages&&navigator.languages[0]||"C").replace("-","_")+".UTF-8",_:c||"./this.program"};for(var r in Rn)n[r]=Rn[r];var e=[];for(var r in n)e.push(r+"="+n[r]);Sn.strings=e}return Sn.strings}var In={mappings:{},buffers:[null,[],[]],printChar:function(n,r){var e=In.buffers[n];0===r||10===r?((1===n?d:p)(function(n,r,e){for(var t=0;n[t]&&!(t>=NaN);)++t;return g.decode(n.subarray?n.subarray(0,t):new Uint8Array(n.slice(0,t)))}(e)),e.length=0):e.push(r)},varargs:void 0,get:function(){return In.varargs+=4,E[In.varargs-4>>2]},getStr:function(n){return y(n)},get64:function(n,r){return n}};an=n.InternalError=on(Error,"InternalError"),function(){for(var n=new Array(256),r=0;r<256;++r)n[r]=String.fromCharCode(r);fn=n}(),dn=n.BindingError=on(Error,"BindingError"),n.count_emval_handles=function(){for(var n=0,r=5;r<mn.length;++r)void 0!==mn[r]&&++n;return n},n.get_first_emval=function(){for(var n=5;n<mn.length;++n)if(void 0!==mn[n])return mn[n];return null},Tn=n.UnboundTypeError=on(Error,"UnboundTypeError");var jn,On={B:function(n,r){},l:function(n){var r=Q[n];delete Q[n];var e=r.rawConstructor,t=r.rawDestructor,o=r.fields;cn([n],o.map((function(n){return n.getterReturnType})).concat(o.map((function(n){return n.setterArgumentType}))),(function(n){var a={};return o.forEach((function(r,e){var t=r.fieldName,i=n[e],u=r.getter,c=r.getterContext,s=n[e+o.length],f=r.setter,l=r.setterContext;a[t]={read:function(n){return i.fromWireType(u(c,n))},write:function(n,r){var e=[];f(l,n,s.toWireType(e,r)),Y(e)}}})),[{name:r.name,fromWireType:function(n){var r={};for(var e in a)r[e]=a[e].read(n);return t(n),r},toWireType:function(n,r){for(var o in a)if(!(o in r))throw new TypeError('Missing field:  "'+o+'"');var i=e();for(o in a)a[o].write(i,r[o]);return null!==n&&n.push(t,i),i},argPackAdvance:8,readValueFromPointer:Z,destructorFunction:t}]}))},p:function(n,r,e,t,o){},y:function(n,r,e,t,o){var a=sn(e);hn(n,{name:r=ln(r),fromWireType:function(n){return!!n},toWireType:function(n,r){return r?t:o},argPackAdvance:8,readValueFromPointer:function(n){var t;if(1===e)t=b;else if(2===e)t=A;else{if(4!==e)throw new TypeError("Unknown boolean type size: "+r);t=E}return this.fromWireType(t[n>>a])},destructorFunction:null})},x:function(n,r){hn(n,{name:r=ln(r),fromWireType:function(n){var r=mn[n].value;return gn(n),r},toWireType:function(n,r){return yn(r)},argPackAdvance:8,readValueFromPointer:Z,destructorFunction:null})},i:function(n,r,e){var t=sn(e);hn(n,{name:r=ln(r),fromWireType:function(n){return n},toWireType:function(n,r){if("number"!=typeof r&&"boolean"!=typeof r)throw new TypeError('Cannot convert "'+wn(r)+'" to '+this.name);return r},argPackAdvance:8,readValueFromPointer:bn(r,t),destructorFunction:null})},f:function(r,e,t,o,a,i){var u=function(n,r){for(var e=[],t=0;t<n;t++)e.push(E[(r>>2)+t]);return e}(e,t);r=ln(r),a=An(o,a),function(r,e,t){n.hasOwnProperty(r)?((void 0===t||void 0!==n[r].overloadTable&&void 0!==n[r].overloadTable[t])&&pn("Cannot register public name '"+r+"' twice"),function(n,r,e){if(void 0===n[r].overloadTable){var t=n[r];n[r]=function(){return n[r].overloadTable.hasOwnProperty(arguments.length)||pn("Function '"+e+"' called with an invalid number of arguments ("+arguments.length+") - expects one of ("+n[r].overloadTable+")!"),n[r].overloadTable[arguments.length].apply(this,arguments)},n[r].overloadTable=[],n[r].overloadTable[t.argCount]=t}}(n,r,r),n.hasOwnProperty(t)&&pn("Cannot register multiple overloads of a function with the same number of arguments ("+t+")!"),n[r].overloadTable[t]=e):(n[r]=e,void 0!==t&&(n[r].numArguments=t))}(r,(function(){!function(n,r){var e=[],t={};throw r.forEach((function n(r){t[r]||nn[r]||(rn[r]?rn[r].forEach(n):(e.push(r),t[r]=!0))})),new Tn(n+": "+e.map(En).join([", "]))}("Cannot call "+r+" due to unbound types",u)}),e-1),cn([],u,(function(t){var o=[t[0],null].concat(t.slice(1));return function(r,e,t){n.hasOwnProperty(r)||un("Replacing nonexistant public symbol"),void 0!==n[r].overloadTable&&void 0!==t?n[r].overloadTable[t]=e:(n[r]=e,n[r].argCount=t)}(r,function(n,r,e,t,o){var a=r.length;a<2&&pn("argTypes array size mismatch! Must at least get return value and 'this' types!");for(var i=null!==r[1]&&null!==e,u=!1,c=1;c<r.length;++c)if(null!==r[c]&&void 0===r[c].destructorFunction){u=!0;break}var s="void"!==r[0].name,f="",l="";for(c=0;c<a-2;++c)f+=(0!==c?", ":"")+"arg"+c,l+=(0!==c?", ":"")+"arg"+c+"Wired";var d="return function "+en(n)+"("+f+") {\nif (arguments.length !== "+(a-2)+") {\nthrowBindingError('function "+n+" called with ' + arguments.length + ' arguments, expected "+(a-2)+" args!');\n}\n";u&&(d+="var destructors = [];\n");var p=u?"destructors":"null",h=["throwBindingError","invoker","fn","runDestructors","retType","classParam"],v=[pn,t,o,Y,r[0],r[1]];for(i&&(d+="var thisWired = classParam.toWireType("+p+", this);\n"),c=0;c<a-2;++c)d+="var arg"+c+"Wired = argType"+c+".toWireType("+p+", arg"+c+"); // "+r[c+2].name+"\n",h.push("argType"+c),v.push(r[c+2]);if(i&&(l="thisWired"+(l.length>0?", ":"")+l),d+=(s?"var rv = ":"")+"invoker(fn"+(l.length>0?", ":"")+l+");\n",u)d+="runDestructors(destructors);\n";else for(c=i?1:2;c<r.length;++c){var m=1===c?"thisWired":"arg"+(c-2)+"Wired";null!==r[c].destructorFunction&&(d+=m+"_dtor("+m+"); // "+r[c].name+"\n",h.push(m+"_dtor"),v.push(r[c].destructorFunction))}return s&&(d+="var ret = retType.fromWireType(rv);\nreturn ret;\n"),d+="}\n",h.push(d),function(n,r){if(!(n instanceof Function))throw new TypeError("new_ called with constructor type "+typeof n+" which is not a function");var e=tn(n.name||"unknownFunctionName",(function(){}));e.prototype=n.prototype;var t=new e,o=n.apply(t,r);return o instanceof Object?o:t}(Function,h).apply(null,v)}(r,o,null,a,i),e-1),[]}))},c:function(n,r,e,t,o){r=ln(r),-1===o&&(o=4294967295);var a=sn(e),i=function(n){return n};if(0===t){var u=32-8*e;i=function(n){return n<<u>>>u}}var c=r.includes("unsigned");hn(n,{name:r,fromWireType:i,toWireType:function(n,e){if("number"!=typeof e&&"boolean"!=typeof e)throw new TypeError('Cannot convert "'+wn(e)+'" to '+this.name);if(e<t||e>o)throw new TypeError('Passing a number "'+wn(e)+'" from JS side to C/C++ side to an argument of type "'+r+'", which is outside the valid range ['+t+", "+o+"]!");return c?e>>>0:0|e},argPackAdvance:8,readValueFromPointer:Cn(r,a,0!==t),destructorFunction:null})},b:function(n,r,e){var t=[Int8Array,Uint8Array,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array][r];function o(n){var r=C,e=r[n>>=2],o=r[n+1];return new t(w,o,e)}hn(n,{name:e=ln(e),fromWireType:o,argPackAdvance:8,readValueFromPointer:o},{ignoreDuplicateRegistrations:!0})},j:function(n,r){var e="std::string"===(r=ln(r));hn(n,{name:r,fromWireType:function(n){var r,t=C[n>>2];if(e)for(var o=n+4,a=0;a<=t;++a){var i=n+4+a;if(a==t||0==_[i]){var u=y(o,i-o);void 0===r?r=u:(r+=String.fromCharCode(0),r+=u),o=i+1}}else{var c=new Array(t);for(a=0;a<t;++a)c[a]=String.fromCharCode(_[n+4+a]);r=c.join("")}return Dn(n),r},toWireType:function(n,r){var t;r instanceof ArrayBuffer&&(r=new Uint8Array(r));var o="string"==typeof r;o||r instanceof Uint8Array||r instanceof Uint8ClampedArray||r instanceof Int8Array||pn("Cannot pass non-string to std::string"),t=e&&o?function(){return function(n){for(var r=0,e=0;e<n.length;++e){var t=n.charCodeAt(e);t>=55296&&t<=57343&&(t=65536+((1023&t)<<10)|1023&n.charCodeAt(++e)),t<=127?++r:r+=t<=2047?2:t<=65535?3:4}return r}(r)}:function(){return r.length};var a=t(),i=Un(4+a+1);if(C[i>>2]=a,e&&o)!function(n,r,e,t){if(!(t>0))return 0;for(var o=e+t-1,a=0;a<n.length;++a){var i=n.charCodeAt(a);if(i>=55296&&i<=57343&&(i=65536+((1023&i)<<10)|1023&n.charCodeAt(++a)),i<=127){if(e>=o)break;r[e++]=i}else if(i<=2047){if(e+1>=o)break;r[e++]=192|i>>6,r[e++]=128|63&i}else if(i<=65535){if(e+2>=o)break;r[e++]=224|i>>12,r[e++]=128|i>>6&63,r[e++]=128|63&i}else{if(e+3>=o)break;r[e++]=240|i>>18,r[e++]=128|i>>12&63,r[e++]=128|i>>6&63,r[e++]=128|63&i}}r[e]=0}(r,_,i+4,a+1);else if(o)for(var u=0;u<a;++u){var c=r.charCodeAt(u);c>255&&(Dn(i),pn("String has UTF-16 code units that do not fit in 8 bits")),_[i+4+u]=c}else for(u=0;u<a;++u)_[i+4+u]=r[u];return null!==n&&n.push(Dn,i),i},argPackAdvance:8,readValueFromPointer:Z,destructorFunction:function(n){Dn(n)}})},e:function(n,r,e){var t,o,a,i,u;e=ln(e),2===r?(t=W,o=F,i=R,a=function(){return T},u=1):4===r&&(t=S,o=I,i=j,a=function(){return C},u=2),hn(n,{name:e,fromWireType:function(n){for(var e,o=C[n>>2],i=a(),c=n+4,s=0;s<=o;++s){var f=n+4+s*r;if(s==o||0==i[f>>u]){var l=t(c,f-c);void 0===e?e=l:(e+=String.fromCharCode(0),e+=l),c=f+r}}return Dn(n),e},toWireType:function(n,t){"string"!=typeof t&&pn("Cannot pass non-string to C++ string type "+e);var a=i(t),c=Un(4+a+r);return C[c>>2]=a>>u,o(t,c+4,a+r),null!==n&&n.push(Dn,c),c},argPackAdvance:8,readValueFromPointer:Z,destructorFunction:function(n){Dn(n)}})},m:function(n,r,e,t,o,a){Q[n]={name:ln(r),rawConstructor:An(e,t),rawDestructor:An(o,a),fields:[]}},a:function(n,r,e,t,o,a,i,u,c,s){Q[n].fields.push({fieldName:ln(r),getterReturnType:e,getter:An(t,o),getterContext:a,setterArgumentType:i,setter:An(u,c),setterContext:s})},z:function(n,r){hn(n,{isVoid:!0,name:r=ln(r),argPackAdvance:0,fromWireType:function(){},toWireType:function(n,r){}})},g:gn,u:function(n){return 0===n?yn(kn()):(n=void 0===(e=Pn[r=n])?ln(r):e,yn(kn()[n]));var r,e},k:function(n){n>4&&(mn[n].refcount+=1)},n:function(r,e,t,o){r=function(n){return n||pn("Cannot use deleted val. handle = "+n),mn[n].value}(r);var a=Wn[e];return a||(a=function(r){for(var e="",t=0;t<r;++t)e+=(0!==t?", ":"")+"arg"+t;var o="return function emval_allocator_"+r+"(constructor, argTypes, args) {\n";for(t=0;t<r;++t)o+="var argType"+t+" = requireRegisteredType(Module['HEAP32'][(argTypes >>> 2) + "+t+'], "parameter '+t+'");\nvar arg'+t+" = argType"+t+".readValueFromPointer(args);\nargs += argType"+t+"['argPackAdvance'];\n";return o+="var obj = new constructor("+e+");\nreturn __emval_register(obj);\n}\n",new Function("requireRegisteredType","Module","__emval_register",o)(xn,n,yn)}(e),Wn[e]=a),a(r,t,o)},h:function(){z()},r:function(n,r,e){_.copyWithin(n,r,r+e)},d:function(n){var r,e=_.length,t=2147483648;if((n>>>=0)>t)return!1;for(var o=1;o<=4;o*=2){var a=e*(1+.2/o);if(a=Math.min(a,n+100663296),Fn(Math.min(t,((r=Math.max(n,a))%65536>0&&(r+=65536-r%65536),r))))return!0}return!1},s:function(n,r){var e=0;return Sn().forEach((function(t,o){var a=r+e;E[n+4*o>>2]=a,function(n,r,e){for(var t=0;t<n.length;++t)b[r++>>0]=n.charCodeAt(t);b[r>>0]=0}(t,a),e+=t.length+1})),0},t:function(n,r){var e=Sn();E[n>>2]=e.length;var t=0;return e.forEach((function(n){t+=n.length+1})),E[r>>2]=t,0},A:function(r){!function(r,e){X()||(n.onExit&&n.onExit(r),m=!0),s(r,new Ln(r))}(r)},w:function(n){return 0},o:function(n,r,e,t,o){},v:function(n,r,e,t){for(var o=0,a=0;a<e;a++){for(var i=E[r+8*a>>2],u=E[r+(8*a+4)>>2],c=0;c<u;c++)In.printChar(n,_[i+c]);o+=u}return E[t>>2]=o,0},q:function(n){}},Un=(function(){var r={a:On};function t(r,e){var t,o=r.exports;n.asm=o,O((h=n.asm.C).buffer),U=n.asm.I,t=n.asm.D,L.unshift(t),function(r){if(H--,n.monitorRunDependencies&&n.monitorRunDependencies(H),0==H&&(null!==q&&(clearInterval(q),q=null),N)){var e=N;N=null,e()}}()}function o(n){t(n.instance)}function a(n){return(l||"function"!=typeof fetch?Promise.resolve().then((function(){return J(G)})):fetch(G,{credentials:"same-origin"}).then((function(n){if(!n.ok)throw"failed to load wasm binary file at '"+G+"'";return n.arrayBuffer()})).catch((function(){return J(G)}))).then((function(n){return WebAssembly.instantiate(n,r)})).then(n,(function(n){p("failed to asynchronously prepare wasm: "+n),z(n)}))}if(H++,n.monitorRunDependencies&&n.monitorRunDependencies(H),n.instantiateWasm)try{return n.instantiateWasm(r,t)}catch(n){return p("Module.instantiateWasm callback failed with error: "+n),!1}(l||"function"!=typeof WebAssembly.instantiateStreaming||V(G)||"function"!=typeof fetch?a(o):fetch(G,{credentials:"same-origin"}).then((function(n){return WebAssembly.instantiateStreaming(n,r).then(o,(function(n){return p("wasm streaming compile failed: "+n),p("falling back to ArrayBuffer instantiation"),a(o)}))}))).catch(e)}(),n.___wasm_call_ctors=function(){return(n.___wasm_call_ctors=n.asm.D).apply(null,arguments)},n._malloc=function(){return(Un=n._malloc=n.asm.E).apply(null,arguments)}),Dn=n._free=function(){return(Dn=n._free=n.asm.F).apply(null,arguments)},Mn=n.___getTypeName=function(){return(Mn=n.___getTypeName=n.asm.G).apply(null,arguments)};function Ln(n){this.name="ExitStatus",this.message="Program terminated with exit("+n+")",this.status=n}function Bn(e){function t(){jn||(jn=!0,n.calledRun=!0,m||($(L),r(n),n.onRuntimeInitialized&&n.onRuntimeInitialized(),function(){if(n.postRun)for("function"==typeof n.postRun&&(n.postRun=[n.postRun]);n.postRun.length;)r=n.postRun.shift(),B.unshift(r);var r;$(B)}()))}e=e||u,H>0||(function(){if(n.preRun)for("function"==typeof n.preRun&&(n.preRun=[n.preRun]);n.preRun.length;)r=n.preRun.shift(),M.unshift(r);var r;$(M)}(),H>0||(n.setStatus?(n.setStatus("Running..."),setTimeout((function(){setTimeout((function(){n.setStatus("")}),1),t()}),1)):t()))}if(n.___embind_register_native_and_builtin_types=function(){return(n.___embind_register_native_and_builtin_types=n.asm.H).apply(null,arguments)},n.dynCall_jiji=function(){return(n.dynCall_jiji=n.asm.J).apply(null,arguments)},N=function n(){jn||Bn(),jn||(N=n)},n.run=Bn,n.preInit)for("function"==typeof n.preInit&&(n.preInit=[n.preInit]);n.preInit.length>0;)n.preInit.pop()();return Bn(),n.ready};const En=Tn;let Cn,Pn,kn;function xn(n,r){return async function(n,r){return Cn||(Cn=cn(En)),(await Cn).encode(n.data,n.width,n.height,r).buffer}(n,r)}async function Wn(n,r){const e=await m(n,"image/png");return async function(n,r){return Pn||(Pn=ln().then((n=>n?async function(){const{default:n,initThreadPool:r,optimise:e}=await o.e(362).then(o.bind(o,851));return await n(),await r(navigator.hardwareConcurrency),e}():async function(){const{default:n,optimise:r}=await o.e(693).then(o.bind(o,693));return await n(),r}()))),(await Pn)(new Uint8Array(n),r.level,r.interlace).buffer}(await A(e),r)}const Fn=(n,r)=>async function(n,r){kn||(kn=async function(){return await fn()?cn((await o.e(780).then(o.bind(o,780))).default):cn((await o.e(351).then(o.bind(o,351))).default)}());const e=(await kn).encode(n.data,n.width,n.height,r);if(!e)throw new Error("Encoding error.");return e.buffer}(n,r);let Rn;const Sn=(n,r)=>async function(n,r){Rn||(Rn=async function(){return await ln()?await fn()?cn((await o.e(235).then(o.bind(o,235))).default):cn((await o.e(909).then(o.bind(o,909))).default):cn((await o.e(580).then(o.bind(o,580))).default)}());const e=(await Rn).encode(n.data,n.width,n.height,r);if(!e)throw new Error("Encoding error.");return e.buffer}(n,r),In=["triangle","catrom","mitchell","lanczos3","hqx"],jn={avif:{meta:n,...gn},browserGIF:{meta:r,...yn},browserJPEG:{meta:e,...wn},browserPNG:{meta:t,...bn},jxl:{meta:a,...An},mozJPEG:{meta:i,...xn},oxiPNG:{meta:u,...Wn},webP:{meta:c,...Fn},wp2:{meta:s,...Sn}},On={quantize:{enabled:!1,zx:0,maxNumColors:256,dither:1},resize:{enabled:!1,width:1,height:1,method:"lanczos3",fitMethod:"stretch",premultiply:!0,linearRGB:!0}},Un={rotate:{rotate:0}};let Dn;var Mn=function(n){var r,e;(n=void 0!==(n=n||{})?n:{}).ready=new Promise((function(n,t){r=n,e=t}));var t,a={};for(t in n)n.hasOwnProperty(t)&&(a[t]=n[t]);var i,u=[],c="";c=self.location.href,c=0!==(c="file:///C:/Users/Dell7010/Desktop/web/tw/squoosh/codecs/jxl/dec/jxl_dec.js").indexOf("blob:")?c.substr(0,c.lastIndexOf("/")+1):"",i=function(n){var r=new XMLHttpRequest;return r.open("GET",n,!1),r.responseType="arraybuffer",r.send(null),new Uint8Array(r.response)};var s,f,l=n.print||console.log.bind(console),d=n.printErr||console.warn.bind(console);for(t in a)a.hasOwnProperty(t)&&(n[t]=a[t]);a=null,n.arguments&&(u=n.arguments),n.thisProgram&&n.thisProgram,n.quit&&n.quit,n.wasmBinary&&(s=n.wasmBinary),n.noExitRuntime,"object"!=typeof WebAssembly&&H("no native wasm support detected");var p=!1,h=new TextDecoder("utf8");function v(n,r){if(!n)return"";for(var e=n+r,t=n;!(t>=e)&&y[t];)++t;return h.decode(y.subarray(n,t))}var m,g,y,w,b,_,A,T,E,C=new TextDecoder("utf-16le");function P(n,r){for(var e=n,t=e>>1,o=t+r/2;!(t>=o)&&b[t];)++t;return e=t<<1,C.decode(y.subarray(n,e))}function k(n,r,e){if(void 0===e&&(e=2147483647),e<2)return 0;for(var t=r,o=(e-=2)<2*n.length?e/2:n.length,a=0;a<o;++a){var i=n.charCodeAt(a);w[r>>1]=i,r+=2}return w[r>>1]=0,r-t}function x(n){return 2*n.length}function W(n,r){for(var e=0,t="";!(e>=r/4);){var o=_[n+4*e>>2];if(0==o)break;if(++e,o>=65536){var a=o-65536;t+=String.fromCharCode(55296|a>>10,56320|1023&a)}else t+=String.fromCharCode(o)}return t}function F(n,r,e){if(void 0===e&&(e=2147483647),e<4)return 0;for(var t=r,o=t+e-4,a=0;a<n.length;++a){var i=n.charCodeAt(a);if(i>=55296&&i<=57343&&(i=65536+((1023&i)<<10)|1023&n.charCodeAt(++a)),_[r>>2]=i,(r+=4)+4>o)break}return _[r>>2]=0,r-t}function R(n){for(var r=0,e=0;e<n.length;++e){var t=n.charCodeAt(e);t>=55296&&t<=57343&&++e,r+=4}return r}function S(r){m=r,n.HEAP8=g=new Int8Array(r),n.HEAP16=w=new Int16Array(r),n.HEAP32=_=new Int32Array(r),n.HEAPU8=y=new Uint8Array(r),n.HEAPU16=b=new Uint16Array(r),n.HEAPU32=A=new Uint32Array(r),n.HEAPF32=T=new Float32Array(r),n.HEAPF64=E=new Float64Array(r)}n.INITIAL_MEMORY;var I,j,O=[],U=[],D=[],M=0,L=null,B=null;function H(r){n.onAbort&&n.onAbort(r),d(r+=""),p=!0,r="abort("+r+"). Build with -s ASSERTIONS=1 for more info.";var t=new WebAssembly.RuntimeError(r);throw e(t),t}function q(n){return n.startsWith("data:application/octet-stream;base64,")}if(n.preloadedImages={},n.preloadedAudios={},n.locateFile)q(N="jxl_dec.wasm")||(j=N,N=n.locateFile?n.locateFile(j,c):c+j);else var N=new URL(o(280),o.b).toString();function z(n){try{if(n==N&&s)return new Uint8Array(s);if(i)return i(n);throw"both async and sync fetching of the wasm failed"}catch(n){H(n)}}function V(r){for(;r.length>0;){var e=r.shift();if("function"!=typeof e){var t=e.func;"number"==typeof t?void 0===e.arg?I.get(t)():I.get(t)(e.arg):t(void 0===e.arg?null:e.arg)}else e(n)}}function G(n){switch(n){case 1:return 0;case 2:return 1;case 4:return 2;case 8:return 3;default:throw new TypeError("Unknown type size: "+n)}}var J=void 0;function $(n){for(var r="",e=n;y[e];)r+=J[y[e++]];return r}var X={},Q={},Y={};function Z(n){if(void 0===n)return"_unknown";var r=(n=n.replace(/[^a-zA-Z0-9_]/g,"$")).charCodeAt(0);return r>=48&&r<=57?"_"+n:n}function K(n,r){return n=Z(n),new Function("body","return function "+n+'() {\n    "use strict";    return body.apply(this, arguments);\n};\n')(r)}function nn(n,r){var e=K(r,(function(n){this.name=r,this.message=n;var e=new Error(n).stack;void 0!==e&&(this.stack=this.toString()+"\n"+e.replace(/^Error(:[^\n]*)?\n/,""))}));return e.prototype=Object.create(n.prototype),e.prototype.constructor=e,e.prototype.toString=function(){return void 0===this.message?this.name:this.name+": "+this.message},e}var rn=void 0;function en(n){throw new rn(n)}var tn=void 0;function on(n){throw new tn(n)}function an(n,r,e){if(e=e||{},!("argPackAdvance"in r))throw new TypeError("registerType registeredInstance requires argPackAdvance");var t=r.name;if(n||en('type "'+t+'" must have a positive integer typeid pointer'),Q.hasOwnProperty(n)){if(e.ignoreDuplicateRegistrations)return;en("Cannot register type '"+t+"' twice")}if(Q[n]=r,delete Y[n],X.hasOwnProperty(n)){var o=X[n];delete X[n],o.forEach((function(n){n()}))}}var un=[],cn=[{},{value:void 0},{value:null},{value:!0},{value:!1}];function sn(n){n>4&&0==--cn[n].refcount&&(cn[n]=void 0,un.push(n))}function fn(n){switch(n){case void 0:return 1;case null:return 2;case!0:return 3;case!1:return 4;default:var r=un.length?un.pop():cn.length;return cn[r]={refcount:1,value:n},r}}function ln(n){return this.fromWireType(A[n>>2])}function dn(n){if(null===n)return"null";var r=typeof n;return"object"===r||"array"===r||"function"===r?n.toString():""+n}function pn(n,r){switch(r){case 2:return function(n){return this.fromWireType(T[n>>2])};case 3:return function(n){return this.fromWireType(E[n>>3])};default:throw new TypeError("Unknown float type: "+n)}}function hn(n){for(;n.length;){var r=n.pop();n.pop()(r)}}function vn(r,e,t){return r.includes("j")?function(r,e,t){var o=n["dynCall_"+r];return t&&t.length?o.apply(null,[e].concat(t)):o.call(null,e)}(r,e,t):I.get(e).apply(null,t)}var mn=void 0;function gn(n){var r=Wn(n),e=$(r);return xn(r),e}function yn(n,r,e){switch(r){case 0:return e?function(n){return g[n]}:function(n){return y[n]};case 1:return e?function(n){return w[n>>1]}:function(n){return b[n>>1]};case 2:return e?function(n){return _[n>>2]}:function(n){return A[n>>2]};default:throw new TypeError("Unknown integer type: "+n)}}var wn={};function bn(){return"object"==typeof globalThis?globalThis:Function("return this")()}function _n(n,r){var e=Q[n];return void 0===e&&en(r+" has unknown type "+gn(n)),e}var An={};function Tn(n){try{return f.grow(n-m.byteLength+65535>>>16),S(f.buffer),1}catch(n){}}var En={mappings:{},buffers:[null,[],[]],printChar:function(n,r){var e=En.buffers[n];0===r||10===r?((1===n?l:d)(function(n,r,e){for(var t=0;n[t]&&!(t>=NaN);)++t;return h.decode(n.subarray?n.subarray(0,t):new Uint8Array(n.slice(0,t)))}(e)),e.length=0):e.push(r)},varargs:void 0,get:function(){return En.varargs+=4,_[En.varargs-4>>2]},getStr:function(n){return v(n)},get64:function(n,r){return n}};!function(){for(var n=new Array(256),r=0;r<256;++r)n[r]=String.fromCharCode(r);J=n}(),rn=n.BindingError=nn(Error,"BindingError"),tn=n.InternalError=nn(Error,"InternalError"),n.count_emval_handles=function(){for(var n=0,r=5;r<cn.length;++r)void 0!==cn[r]&&++n;return n},n.get_first_emval=function(){for(var n=5;n<cn.length;++n)if(void 0!==cn[n])return cn[n];return null},mn=n.UnboundTypeError=nn(Error,"UnboundTypeError");var Cn,Pn={b:function(n,r,e,t){H("Assertion failed: "+v(n)+", at: "+[r?v(r):"unknown filename",e,t?v(t):"unknown function"])},m:function(n,r){},r:function(n,r,e,t,o){},n:function(n,r,e,t,o){var a=G(e);an(n,{name:r=$(r),fromWireType:function(n){return!!n},toWireType:function(n,r){return r?t:o},argPackAdvance:8,readValueFromPointer:function(n){var t;if(1===e)t=g;else if(2===e)t=w;else{if(4!==e)throw new TypeError("Unknown boolean type size: "+r);t=_}return this.fromWireType(t[n>>a])},destructorFunction:null})},w:function(n,r){an(n,{name:r=$(r),fromWireType:function(n){var r=cn[n].value;return sn(n),r},toWireType:function(n,r){return fn(r)},argPackAdvance:8,readValueFromPointer:ln,destructorFunction:null})},j:function(n,r,e){var t=G(e);an(n,{name:r=$(r),fromWireType:function(n){return n},toWireType:function(n,r){if("number"!=typeof r&&"boolean"!=typeof r)throw new TypeError('Cannot convert "'+dn(r)+'" to '+this.name);return r},argPackAdvance:8,readValueFromPointer:pn(r,t),destructorFunction:null})},p:function(r,e,t,o,a,i){var u=function(n,r){for(var e=[],t=0;t<n;t++)e.push(_[(r>>2)+t]);return e}(e,t);r=$(r),a=function(n,r){var e,t,o,a=(n=$(n)).includes("j")?(e=n,t=r,o=[],function(){o.length=arguments.length;for(var n=0;n<arguments.length;n++)o[n]=arguments[n];return vn(e,t,o)}):I.get(r);return"function"!=typeof a&&en("unknown function pointer with signature "+n+": "+r),a}(o,a),function(r,e,t){n.hasOwnProperty(r)?((void 0===t||void 0!==n[r].overloadTable&&void 0!==n[r].overloadTable[t])&&en("Cannot register public name '"+r+"' twice"),function(n,r,e){if(void 0===n[r].overloadTable){var t=n[r];n[r]=function(){return n[r].overloadTable.hasOwnProperty(arguments.length)||en("Function '"+e+"' called with an invalid number of arguments ("+arguments.length+") - expects one of ("+n[r].overloadTable+")!"),n[r].overloadTable[arguments.length].apply(this,arguments)},n[r].overloadTable=[],n[r].overloadTable[t.argCount]=t}}(n,r,r),n.hasOwnProperty(t)&&en("Cannot register multiple overloads of a function with the same number of arguments ("+t+")!"),n[r].overloadTable[t]=e):(n[r]=e,void 0!==t&&(n[r].numArguments=t))}(r,(function(){!function(n,r){var e=[],t={};throw r.forEach((function n(r){t[r]||Q[r]||(Y[r]?Y[r].forEach(n):(e.push(r),t[r]=!0))})),new mn(n+": "+e.map(gn).join([", "]))}("Cannot call "+r+" due to unbound types",u)}),e-1),function(t,o,u){function c(o){var u=function(t){var o=[t[0],null].concat(t.slice(1));return function(r,e,t){n.hasOwnProperty(r)||on("Replacing nonexistant public symbol"),void 0!==n[r].overloadTable&&void 0!==t?n[r].overloadTable[t]=e:(n[r]=e,n[r].argCount=t)}(r,function(n,r,e,t,o){var a=r.length;a<2&&en("argTypes array size mismatch! Must at least get return value and 'this' types!");for(var i=null!==r[1]&&null!==e,u=!1,c=1;c<r.length;++c)if(null!==r[c]&&void 0===r[c].destructorFunction){u=!0;break}var s="void"!==r[0].name,f="",l="";for(c=0;c<a-2;++c)f+=(0!==c?", ":"")+"arg"+c,l+=(0!==c?", ":"")+"arg"+c+"Wired";var d="return function "+Z(n)+"("+f+") {\nif (arguments.length !== "+(a-2)+") {\nthrowBindingError('function "+n+" called with ' + arguments.length + ' arguments, expected "+(a-2)+" args!');\n}\n";u&&(d+="var destructors = [];\n");var p=u?"destructors":"null",h=["throwBindingError","invoker","fn","runDestructors","retType","classParam"],v=[en,t,o,hn,r[0],r[1]];for(i&&(d+="var thisWired = classParam.toWireType("+p+", this);\n"),c=0;c<a-2;++c)d+="var arg"+c+"Wired = argType"+c+".toWireType("+p+", arg"+c+"); // "+r[c+2].name+"\n",h.push("argType"+c),v.push(r[c+2]);if(i&&(l="thisWired"+(l.length>0?", ":"")+l),d+=(s?"var rv = ":"")+"invoker(fn"+(l.length>0?", ":"")+l+");\n",u)d+="runDestructors(destructors);\n";else for(c=i?1:2;c<r.length;++c){var m=1===c?"thisWired":"arg"+(c-2)+"Wired";null!==r[c].destructorFunction&&(d+=m+"_dtor("+m+"); // "+r[c].name+"\n",h.push(m+"_dtor"),v.push(r[c].destructorFunction))}return s&&(d+="var ret = retType.fromWireType(rv);\nreturn ret;\n"),d+="}\n",h.push(d),function(n,r){if(!(n instanceof Function))throw new TypeError("new_ called with constructor type "+typeof n+" which is not a function");var e=K(n.name||"unknownFunctionName",(function(){}));e.prototype=n.prototype;var t=new e,o=n.apply(t,r);return o instanceof Object?o:t}(Function,h).apply(null,v)}(r,o,null,a,i),e-1),[]}(o);u.length!==t.length&&on("Mismatched type converter count");for(var c=0;c<t.length;++c)an(t[c],u[c])}t.forEach((function(n){Y[n]=o}));var s=new Array(o.length),f=[],l=0;o.forEach((function(n,r){Q.hasOwnProperty(n)?s[r]=Q[n]:(f.push(n),X.hasOwnProperty(n)||(X[n]=[]),X[n].push((function(){s[r]=Q[n],++l===f.length&&c(s)})))})),0===f.length&&c(s)}([],u)},d:function(n,r,e,t,o){r=$(r),-1===o&&(o=4294967295);var a=G(e),i=function(n){return n};if(0===t){var u=32-8*e;i=function(n){return n<<u>>>u}}var c=r.includes("unsigned");an(n,{name:r,fromWireType:i,toWireType:function(n,e){if("number"!=typeof e&&"boolean"!=typeof e)throw new TypeError('Cannot convert "'+dn(e)+'" to '+this.name);if(e<t||e>o)throw new TypeError('Passing a number "'+dn(e)+'" from JS side to C/C++ side to an argument of type "'+r+'", which is outside the valid range ['+t+", "+o+"]!");return c?e>>>0:0|e},argPackAdvance:8,readValueFromPointer:yn(r,a,0!==t),destructorFunction:null})},c:function(n,r,e){var t=[Int8Array,Uint8Array,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array][r];function o(n){var r=A,e=r[n>>=2],o=r[n+1];return new t(m,o,e)}an(n,{name:e=$(e),fromWireType:o,argPackAdvance:8,readValueFromPointer:o},{ignoreDuplicateRegistrations:!0})},k:function(n,r){var e="std::string"===(r=$(r));an(n,{name:r,fromWireType:function(n){var r,t=A[n>>2];if(e)for(var o=n+4,a=0;a<=t;++a){var i=n+4+a;if(a==t||0==y[i]){var u=v(o,i-o);void 0===r?r=u:(r+=String.fromCharCode(0),r+=u),o=i+1}}else{var c=new Array(t);for(a=0;a<t;++a)c[a]=String.fromCharCode(y[n+4+a]);r=c.join("")}return xn(n),r},toWireType:function(n,r){var t;r instanceof ArrayBuffer&&(r=new Uint8Array(r));var o="string"==typeof r;o||r instanceof Uint8Array||r instanceof Uint8ClampedArray||r instanceof Int8Array||en("Cannot pass non-string to std::string"),t=e&&o?function(){return function(n){for(var r=0,e=0;e<n.length;++e){var t=n.charCodeAt(e);t>=55296&&t<=57343&&(t=65536+((1023&t)<<10)|1023&n.charCodeAt(++e)),t<=127?++r:r+=t<=2047?2:t<=65535?3:4}return r}(r)}:function(){return r.length};var a=t(),i=kn(4+a+1);if(A[i>>2]=a,e&&o)!function(n,r,e,t){if(!(t>0))return 0;for(var o=e+t-1,a=0;a<n.length;++a){var i=n.charCodeAt(a);if(i>=55296&&i<=57343&&(i=65536+((1023&i)<<10)|1023&n.charCodeAt(++a)),i<=127){if(e>=o)break;r[e++]=i}else if(i<=2047){if(e+1>=o)break;r[e++]=192|i>>6,r[e++]=128|63&i}else if(i<=65535){if(e+2>=o)break;r[e++]=224|i>>12,r[e++]=128|i>>6&63,r[e++]=128|63&i}else{if(e+3>=o)break;r[e++]=240|i>>18,r[e++]=128|i>>12&63,r[e++]=128|i>>6&63,r[e++]=128|63&i}}r[e]=0}(r,y,i+4,a+1);else if(o)for(var u=0;u<a;++u){var c=r.charCodeAt(u);c>255&&(xn(i),en("String has UTF-16 code units that do not fit in 8 bits")),y[i+4+u]=c}else for(u=0;u<a;++u)y[i+4+u]=r[u];return null!==n&&n.push(xn,i),i},argPackAdvance:8,readValueFromPointer:ln,destructorFunction:function(n){xn(n)}})},g:function(n,r,e){var t,o,a,i,u;e=$(e),2===r?(t=P,o=k,i=x,a=function(){return b},u=1):4===r&&(t=W,o=F,i=R,a=function(){return A},u=2),an(n,{name:e,fromWireType:function(n){for(var e,o=A[n>>2],i=a(),c=n+4,s=0;s<=o;++s){var f=n+4+s*r;if(s==o||0==i[f>>u]){var l=t(c,f-c);void 0===e?e=l:(e+=String.fromCharCode(0),e+=l),c=f+r}}return xn(n),e},toWireType:function(n,t){"string"!=typeof t&&en("Cannot pass non-string to C++ string type "+e);var a=i(t),c=kn(4+a+r);return A[c>>2]=a>>u,o(t,c+4,a+r),null!==n&&n.push(xn,c),c},argPackAdvance:8,readValueFromPointer:ln,destructorFunction:function(n){xn(n)}})},o:function(n,r){an(n,{isVoid:!0,name:r=$(r),argPackAdvance:0,fromWireType:function(){},toWireType:function(n,r){}})},e:sn,l:function(n){return 0===n?fn(bn()):(n=void 0===(e=wn[r=n])?$(r):e,fn(bn()[n]));var r,e},h:function(n){n>4&&(cn[n].refcount+=1)},i:function(r,e,t,o){r=function(n){return n||en("Cannot use deleted val. handle = "+n),cn[n].value}(r);var a=An[e];return a||(a=function(r){for(var e="",t=0;t<r;++t)e+=(0!==t?", ":"")+"arg"+t;var o="return function emval_allocator_"+r+"(constructor, argTypes, args) {\n";for(t=0;t<r;++t)o+="var argType"+t+" = requireRegisteredType(Module['HEAP32'][(argTypes >>> 2) + "+t+'], "parameter '+t+'");\nvar arg'+t+" = argType"+t+".readValueFromPointer(args);\nargs += argType"+t+"['argPackAdvance'];\n";return o+="var obj = new constructor("+e+");\nreturn __emval_register(obj);\n}\n",new Function("requireRegisteredType","Module","__emval_register",o)(_n,n,fn)}(e),An[e]=a),a(r,t,o)},a:function(){H()},t:function(n,r,e){y.copyWithin(n,r,r+e)},f:function(n){var r,e=y.length,t=2147483648;if((n>>>=0)>t)return!1;for(var o=1;o<=4;o*=2){var a=e*(1+.2/o);if(a=Math.min(a,n+100663296),Tn(Math.min(t,((r=Math.max(n,a))%65536>0&&(r+=65536-r%65536),r))))return!0}return!1},u:function(n){return 0},q:function(n,r,e,t,o){},v:function(n,r,e,t){for(var o=0,a=0;a<e;a++){for(var i=_[r+8*a>>2],u=_[r+(8*a+4)>>2],c=0;c<u;c++)En.printChar(n,y[i+c]);o+=u}return _[t>>2]=o,0},s:function(n){}},kn=(function(){var r={a:Pn};function t(r,e){var t,o=r.exports;n.asm=o,S((f=n.asm.x).buffer),I=n.asm.D,t=n.asm.y,U.unshift(t),function(r){if(M--,n.monitorRunDependencies&&n.monitorRunDependencies(M),0==M&&(null!==L&&(clearInterval(L),L=null),B)){var e=B;B=null,e()}}()}function o(n){t(n.instance)}function a(n){return(s||"function"!=typeof fetch?Promise.resolve().then((function(){return z(N)})):fetch(N,{credentials:"same-origin"}).then((function(n){if(!n.ok)throw"failed to load wasm binary file at '"+N+"'";return n.arrayBuffer()})).catch((function(){return z(N)}))).then((function(n){return WebAssembly.instantiate(n,r)})).then(n,(function(n){d("failed to asynchronously prepare wasm: "+n),H(n)}))}if(M++,n.monitorRunDependencies&&n.monitorRunDependencies(M),n.instantiateWasm)try{return n.instantiateWasm(r,t)}catch(n){return d("Module.instantiateWasm callback failed with error: "+n),!1}(s||"function"!=typeof WebAssembly.instantiateStreaming||q(N)||"function"!=typeof fetch?a(o):fetch(N,{credentials:"same-origin"}).then((function(n){return WebAssembly.instantiateStreaming(n,r).then(o,(function(n){return d("wasm streaming compile failed: "+n),d("falling back to ArrayBuffer instantiation"),a(o)}))}))).catch(e)}(),n.___wasm_call_ctors=function(){return(n.___wasm_call_ctors=n.asm.y).apply(null,arguments)},n._malloc=function(){return(kn=n._malloc=n.asm.z).apply(null,arguments)}),xn=n._free=function(){return(xn=n._free=n.asm.A).apply(null,arguments)},Wn=n.___getTypeName=function(){return(Wn=n.___getTypeName=n.asm.B).apply(null,arguments)};function Fn(e){function t(){Cn||(Cn=!0,n.calledRun=!0,p||(V(U),r(n),n.onRuntimeInitialized&&n.onRuntimeInitialized(),function(){if(n.postRun)for("function"==typeof n.postRun&&(n.postRun=[n.postRun]);n.postRun.length;)r=n.postRun.shift(),D.unshift(r);var r;V(D)}()))}e=e||u,M>0||(function(){if(n.preRun)for("function"==typeof n.preRun&&(n.preRun=[n.preRun]);n.preRun.length;)r=n.preRun.shift(),O.unshift(r);var r;V(O)}(),M>0||(n.setStatus?(n.setStatus("Running..."),setTimeout((function(){setTimeout((function(){n.setStatus("")}),1),t()}),1)):t()))}if(n.___embind_register_native_and_builtin_types=function(){return(n.___embind_register_native_and_builtin_types=n.asm.C).apply(null,arguments)},n.dynCall_iiji=function(){return(n.dynCall_iiji=n.asm.E).apply(null,arguments)},n.dynCall_jiji=function(){return(n.dynCall_jiji=n.asm.F).apply(null,arguments)},B=function n(){Cn||Fn(),Cn||(B=n)},n.run=Fn,n.preInit)for("function"==typeof n.preInit&&(n.preInit=[n.preInit]);n.preInit.length>0;)n.preInit.pop()();return Fn(),n.ready};const Ln=Mn;let Bn,Hn;var qn=function(n){var r,e;(n=void 0!==(n=n||{})?n:{}).ready=new Promise((function(n,t){r=n,e=t}));var t,a={};for(t in n)n.hasOwnProperty(t)&&(a[t]=n[t]);var i,u=[],c="";c=self.location.href,c=0!==(c="file:///C:/Users/Dell7010/Desktop/web/tw/squoosh/codecs/wp2/dec/wp2_dec.js").indexOf("blob:")?c.substr(0,c.lastIndexOf("/")+1):"",i=function(n){var r=new XMLHttpRequest;return r.open("GET",n,!1),r.responseType="arraybuffer",r.send(null),new Uint8Array(r.response)};var s,f,l=n.print||console.log.bind(console),d=n.printErr||console.warn.bind(console);for(t in a)a.hasOwnProperty(t)&&(n[t]=a[t]);a=null,n.arguments&&(u=n.arguments),n.thisProgram&&n.thisProgram,n.quit&&n.quit,n.wasmBinary&&(s=n.wasmBinary),n.noExitRuntime,"object"!=typeof WebAssembly&&H("no native wasm support detected");var p=!1,h=new TextDecoder("utf8");function v(n,r){if(!n)return"";for(var e=n+r,t=n;!(t>=e)&&y[t];)++t;return h.decode(y.subarray(n,t))}var m,g,y,w,b,_,A,T,E,C=new TextDecoder("utf-16le");function P(n,r){for(var e=n,t=e>>1,o=t+r/2;!(t>=o)&&b[t];)++t;return e=t<<1,C.decode(y.subarray(n,e))}function k(n,r,e){if(void 0===e&&(e=2147483647),e<2)return 0;for(var t=r,o=(e-=2)<2*n.length?e/2:n.length,a=0;a<o;++a){var i=n.charCodeAt(a);w[r>>1]=i,r+=2}return w[r>>1]=0,r-t}function x(n){return 2*n.length}function W(n,r){for(var e=0,t="";!(e>=r/4);){var o=_[n+4*e>>2];if(0==o)break;if(++e,o>=65536){var a=o-65536;t+=String.fromCharCode(55296|a>>10,56320|1023&a)}else t+=String.fromCharCode(o)}return t}function F(n,r,e){if(void 0===e&&(e=2147483647),e<4)return 0;for(var t=r,o=t+e-4,a=0;a<n.length;++a){var i=n.charCodeAt(a);if(i>=55296&&i<=57343&&(i=65536+((1023&i)<<10)|1023&n.charCodeAt(++a)),_[r>>2]=i,(r+=4)+4>o)break}return _[r>>2]=0,r-t}function R(n){for(var r=0,e=0;e<n.length;++e){var t=n.charCodeAt(e);t>=55296&&t<=57343&&++e,r+=4}return r}function S(r){m=r,n.HEAP8=g=new Int8Array(r),n.HEAP16=w=new Int16Array(r),n.HEAP32=_=new Int32Array(r),n.HEAPU8=y=new Uint8Array(r),n.HEAPU16=b=new Uint16Array(r),n.HEAPU32=A=new Uint32Array(r),n.HEAPF32=T=new Float32Array(r),n.HEAPF64=E=new Float64Array(r)}n.INITIAL_MEMORY;var I,j,O=[],U=[],D=[],M=0,L=null,B=null;function H(r){n.onAbort&&n.onAbort(r),d(r+=""),p=!0,r="abort("+r+"). Build with -s ASSERTIONS=1 for more info.";var t=new WebAssembly.RuntimeError(r);throw e(t),t}function q(n){return n.startsWith("data:application/octet-stream;base64,")}if(n.preloadedImages={},n.preloadedAudios={},n.locateFile)q(N="wp2_dec.wasm")||(j=N,N=n.locateFile?n.locateFile(j,c):c+j);else var N=new URL(o(389),o.b).toString();function z(n){try{if(n==N&&s)return new Uint8Array(s);if(i)return i(n);throw"both async and sync fetching of the wasm failed"}catch(n){H(n)}}function V(r){for(;r.length>0;){var e=r.shift();if("function"!=typeof e){var t=e.func;"number"==typeof t?void 0===e.arg?I.get(t)():I.get(t)(e.arg):t(void 0===e.arg?null:e.arg)}else e(n)}}function G(n){this.excPtr=n,this.ptr=n-16,this.set_type=function(n){_[this.ptr+8>>2]=n},this.get_type=function(){return _[this.ptr+8>>2]},this.set_destructor=function(n){_[this.ptr+0>>2]=n},this.get_destructor=function(){return _[this.ptr+0>>2]},this.set_refcount=function(n){_[this.ptr+4>>2]=n},this.set_caught=function(n){n=n?1:0,g[this.ptr+12>>0]=n},this.get_caught=function(){return 0!=g[this.ptr+12>>0]},this.set_rethrown=function(n){n=n?1:0,g[this.ptr+13>>0]=n},this.get_rethrown=function(){return 0!=g[this.ptr+13>>0]},this.init=function(n,r){this.set_type(n),this.set_destructor(r),this.set_refcount(0),this.set_caught(!1),this.set_rethrown(!1)},this.add_ref=function(){var n=_[this.ptr+4>>2];_[this.ptr+4>>2]=n+1},this.release_ref=function(){var n=_[this.ptr+4>>2];return _[this.ptr+4>>2]=n-1,1===n}}function J(n){switch(n){case 1:return 0;case 2:return 1;case 4:return 2;case 8:return 3;default:throw new TypeError("Unknown type size: "+n)}}var $=void 0;function X(n){for(var r="",e=n;y[e];)r+=$[y[e++]];return r}var Q={},Y={},Z={};function K(n){if(void 0===n)return"_unknown";var r=(n=n.replace(/[^a-zA-Z0-9_]/g,"$")).charCodeAt(0);return r>=48&&r<=57?"_"+n:n}function nn(n,r){return n=K(n),new Function("body","return function "+n+'() {\n    "use strict";    return body.apply(this, arguments);\n};\n')(r)}function rn(n,r){var e=nn(r,(function(n){this.name=r,this.message=n;var e=new Error(n).stack;void 0!==e&&(this.stack=this.toString()+"\n"+e.replace(/^Error(:[^\n]*)?\n/,""))}));return e.prototype=Object.create(n.prototype),e.prototype.constructor=e,e.prototype.toString=function(){return void 0===this.message?this.name:this.name+": "+this.message},e}var en=void 0;function tn(n){throw new en(n)}var on=void 0;function an(n){throw new on(n)}function un(n,r,e){if(e=e||{},!("argPackAdvance"in r))throw new TypeError("registerType registeredInstance requires argPackAdvance");var t=r.name;if(n||tn('type "'+t+'" must have a positive integer typeid pointer'),Y.hasOwnProperty(n)){if(e.ignoreDuplicateRegistrations)return;tn("Cannot register type '"+t+"' twice")}if(Y[n]=r,delete Z[n],Q.hasOwnProperty(n)){var o=Q[n];delete Q[n],o.forEach((function(n){n()}))}}var cn=[],sn=[{},{value:void 0},{value:null},{value:!0},{value:!1}];function fn(n){n>4&&0==--sn[n].refcount&&(sn[n]=void 0,cn.push(n))}function ln(n){switch(n){case void 0:return 1;case null:return 2;case!0:return 3;case!1:return 4;default:var r=cn.length?cn.pop():sn.length;return sn[r]={refcount:1,value:n},r}}function dn(n){return this.fromWireType(A[n>>2])}function pn(n){if(null===n)return"null";var r=typeof n;return"object"===r||"array"===r||"function"===r?n.toString():""+n}function hn(n,r){switch(r){case 2:return function(n){return this.fromWireType(T[n>>2])};case 3:return function(n){return this.fromWireType(E[n>>3])};default:throw new TypeError("Unknown float type: "+n)}}function vn(n){for(;n.length;){var r=n.pop();n.pop()(r)}}function mn(r,e,t){return r.includes("j")?function(r,e,t){var o=n["dynCall_"+r];return t&&t.length?o.apply(null,[e].concat(t)):o.call(null,e)}(r,e,t):I.get(e).apply(null,t)}var gn=void 0;function yn(n){var r=Fn(n),e=X(r);return xn(r),e}function wn(n,r,e){switch(r){case 0:return e?function(n){return g[n]}:function(n){return y[n]};case 1:return e?function(n){return w[n>>1]}:function(n){return b[n>>1]};case 2:return e?function(n){return _[n>>2]}:function(n){return A[n>>2]};default:throw new TypeError("Unknown integer type: "+n)}}var bn={};function _n(){return"object"==typeof globalThis?globalThis:Function("return this")()}function An(n,r){var e=Y[n];return void 0===e&&tn(r+" has unknown type "+yn(n)),e}var Tn={};function En(n){try{return f.grow(n-m.byteLength+65535>>>16),S(f.buffer),1}catch(n){}}var Cn={mappings:{},buffers:[null,[],[]],printChar:function(n,r){var e=Cn.buffers[n];0===r||10===r?((1===n?l:d)(function(n,r,e){for(var t=0;n[t]&&!(t>=NaN);)++t;return h.decode(n.subarray?n.subarray(0,t):new Uint8Array(n.slice(0,t)))}(e)),e.length=0):e.push(r)},varargs:void 0,get:function(){return Cn.varargs+=4,_[Cn.varargs-4>>2]},getStr:function(n){return v(n)},get64:function(n,r){return n}};!function(){for(var n=new Array(256),r=0;r<256;++r)n[r]=String.fromCharCode(r);$=n}(),en=n.BindingError=rn(Error,"BindingError"),on=n.InternalError=rn(Error,"InternalError"),n.count_emval_handles=function(){for(var n=0,r=5;r<sn.length;++r)void 0!==sn[r]&&++n;return n},n.get_first_emval=function(){for(var n=5;n<sn.length;++n)if(void 0!==sn[n])return sn[n];return null},gn=n.UnboundTypeError=rn(Error,"UnboundTypeError");var Pn,kn={p:function(n){return Wn(n+16)+16},e:function(n,r){},o:function(n,r,e){throw new G(n).init(r,e),n},r:function(n,r,e,t,o){},m:function(n,r,e,t,o){var a=J(e);un(n,{name:r=X(r),fromWireType:function(n){return!!n},toWireType:function(n,r){return r?t:o},argPackAdvance:8,readValueFromPointer:function(n){var t;if(1===e)t=g;else if(2===e)t=w;else{if(4!==e)throw new TypeError("Unknown boolean type size: "+r);t=_}return this.fromWireType(t[n>>a])},destructorFunction:null})},v:function(n,r){un(n,{name:r=X(r),fromWireType:function(n){var r=sn[n].value;return fn(n),r},toWireType:function(n,r){return ln(r)},argPackAdvance:8,readValueFromPointer:dn,destructorFunction:null})},k:function(n,r,e){var t=J(e);un(n,{name:r=X(r),fromWireType:function(n){return n},toWireType:function(n,r){if("number"!=typeof r&&"boolean"!=typeof r)throw new TypeError('Cannot convert "'+pn(r)+'" to '+this.name);return r},argPackAdvance:8,readValueFromPointer:hn(r,t),destructorFunction:null})},q:function(r,e,t,o,a,i){var u=function(n,r){for(var e=[],t=0;t<n;t++)e.push(_[(r>>2)+t]);return e}(e,t);r=X(r),a=function(n,r){var e,t,o,a=(n=X(n)).includes("j")?(e=n,t=r,o=[],function(){o.length=arguments.length;for(var n=0;n<arguments.length;n++)o[n]=arguments[n];return mn(e,t,o)}):I.get(r);return"function"!=typeof a&&tn("unknown function pointer with signature "+n+": "+r),a}(o,a),function(r,e,t){n.hasOwnProperty(r)?((void 0===t||void 0!==n[r].overloadTable&&void 0!==n[r].overloadTable[t])&&tn("Cannot register public name '"+r+"' twice"),function(n,r,e){if(void 0===n[r].overloadTable){var t=n[r];n[r]=function(){return n[r].overloadTable.hasOwnProperty(arguments.length)||tn("Function '"+e+"' called with an invalid number of arguments ("+arguments.length+") - expects one of ("+n[r].overloadTable+")!"),n[r].overloadTable[arguments.length].apply(this,arguments)},n[r].overloadTable=[],n[r].overloadTable[t.argCount]=t}}(n,r,r),n.hasOwnProperty(t)&&tn("Cannot register multiple overloads of a function with the same number of arguments ("+t+")!"),n[r].overloadTable[t]=e):(n[r]=e,void 0!==t&&(n[r].numArguments=t))}(r,(function(){!function(n,r){var e=[],t={};throw r.forEach((function n(r){t[r]||Y[r]||(Z[r]?Z[r].forEach(n):(e.push(r),t[r]=!0))})),new gn(n+": "+e.map(yn).join([", "]))}("Cannot call "+r+" due to unbound types",u)}),e-1),function(t,o,u){function c(o){var u=function(t){var o=[t[0],null].concat(t.slice(1));return function(r,e,t){n.hasOwnProperty(r)||an("Replacing nonexistant public symbol"),void 0!==n[r].overloadTable&&void 0!==t?n[r].overloadTable[t]=e:(n[r]=e,n[r].argCount=t)}(r,function(n,r,e,t,o){var a=r.length;a<2&&tn("argTypes array size mismatch! Must at least get return value and 'this' types!");for(var i=null!==r[1]&&null!==e,u=!1,c=1;c<r.length;++c)if(null!==r[c]&&void 0===r[c].destructorFunction){u=!0;break}var s="void"!==r[0].name,f="",l="";for(c=0;c<a-2;++c)f+=(0!==c?", ":"")+"arg"+c,l+=(0!==c?", ":"")+"arg"+c+"Wired";var d="return function "+K(n)+"("+f+") {\nif (arguments.length !== "+(a-2)+") {\nthrowBindingError('function "+n+" called with ' + arguments.length + ' arguments, expected "+(a-2)+" args!');\n}\n";u&&(d+="var destructors = [];\n");var p=u?"destructors":"null",h=["throwBindingError","invoker","fn","runDestructors","retType","classParam"],v=[tn,t,o,vn,r[0],r[1]];for(i&&(d+="var thisWired = classParam.toWireType("+p+", this);\n"),c=0;c<a-2;++c)d+="var arg"+c+"Wired = argType"+c+".toWireType("+p+", arg"+c+"); // "+r[c+2].name+"\n",h.push("argType"+c),v.push(r[c+2]);if(i&&(l="thisWired"+(l.length>0?", ":"")+l),d+=(s?"var rv = ":"")+"invoker(fn"+(l.length>0?", ":"")+l+");\n",u)d+="runDestructors(destructors);\n";else for(c=i?1:2;c<r.length;++c){var m=1===c?"thisWired":"arg"+(c-2)+"Wired";null!==r[c].destructorFunction&&(d+=m+"_dtor("+m+"); // "+r[c].name+"\n",h.push(m+"_dtor"),v.push(r[c].destructorFunction))}return s&&(d+="var ret = retType.fromWireType(rv);\nreturn ret;\n"),d+="}\n",h.push(d),function(n,r){if(!(n instanceof Function))throw new TypeError("new_ called with constructor type "+typeof n+" which is not a function");var e=nn(n.name||"unknownFunctionName",(function(){}));e.prototype=n.prototype;var t=new e,o=n.apply(t,r);return o instanceof Object?o:t}(Function,h).apply(null,v)}(r,o,null,a,i),e-1),[]}(o);u.length!==t.length&&an("Mismatched type converter count");for(var c=0;c<t.length;++c)un(t[c],u[c])}t.forEach((function(n){Z[n]=o}));var s=new Array(o.length),f=[],l=0;o.forEach((function(n,r){Y.hasOwnProperty(n)?s[r]=Y[n]:(f.push(n),Q.hasOwnProperty(n)||(Q[n]=[]),Q[n].push((function(){s[r]=Y[n],++l===f.length&&c(s)})))})),0===f.length&&c(s)}([],u)},b:function(n,r,e,t,o){r=X(r),-1===o&&(o=4294967295);var a=J(e),i=function(n){return n};if(0===t){var u=32-8*e;i=function(n){return n<<u>>>u}}var c=r.includes("unsigned");un(n,{name:r,fromWireType:i,toWireType:function(n,e){if("number"!=typeof e&&"boolean"!=typeof e)throw new TypeError('Cannot convert "'+pn(e)+'" to '+this.name);if(e<t||e>o)throw new TypeError('Passing a number "'+pn(e)+'" from JS side to C/C++ side to an argument of type "'+r+'", which is outside the valid range ['+t+", "+o+"]!");return c?e>>>0:0|e},argPackAdvance:8,readValueFromPointer:wn(r,a,0!==t),destructorFunction:null})},a:function(n,r,e){var t=[Int8Array,Uint8Array,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array][r];function o(n){var r=A,e=r[n>>=2],o=r[n+1];return new t(m,o,e)}un(n,{name:e=X(e),fromWireType:o,argPackAdvance:8,readValueFromPointer:o},{ignoreDuplicateRegistrations:!0})},l:function(n,r){var e="std::string"===(r=X(r));un(n,{name:r,fromWireType:function(n){var r,t=A[n>>2];if(e)for(var o=n+4,a=0;a<=t;++a){var i=n+4+a;if(a==t||0==y[i]){var u=v(o,i-o);void 0===r?r=u:(r+=String.fromCharCode(0),r+=u),o=i+1}}else{var c=new Array(t);for(a=0;a<t;++a)c[a]=String.fromCharCode(y[n+4+a]);r=c.join("")}return xn(n),r},toWireType:function(n,r){var t;r instanceof ArrayBuffer&&(r=new Uint8Array(r));var o="string"==typeof r;o||r instanceof Uint8Array||r instanceof Uint8ClampedArray||r instanceof Int8Array||tn("Cannot pass non-string to std::string"),t=e&&o?function(){return function(n){for(var r=0,e=0;e<n.length;++e){var t=n.charCodeAt(e);t>=55296&&t<=57343&&(t=65536+((1023&t)<<10)|1023&n.charCodeAt(++e)),t<=127?++r:r+=t<=2047?2:t<=65535?3:4}return r}(r)}:function(){return r.length};var a=t(),i=Wn(4+a+1);if(A[i>>2]=a,e&&o)!function(n,r,e,t){if(!(t>0))return 0;for(var o=e+t-1,a=0;a<n.length;++a){var i=n.charCodeAt(a);if(i>=55296&&i<=57343&&(i=65536+((1023&i)<<10)|1023&n.charCodeAt(++a)),i<=127){if(e>=o)break;r[e++]=i}else if(i<=2047){if(e+1>=o)break;r[e++]=192|i>>6,r[e++]=128|63&i}else if(i<=65535){if(e+2>=o)break;r[e++]=224|i>>12,r[e++]=128|i>>6&63,r[e++]=128|63&i}else{if(e+3>=o)break;r[e++]=240|i>>18,r[e++]=128|i>>12&63,r[e++]=128|i>>6&63,r[e++]=128|63&i}}r[e]=0}(r,y,i+4,a+1);else if(o)for(var u=0;u<a;++u){var c=r.charCodeAt(u);c>255&&(xn(i),tn("String has UTF-16 code units that do not fit in 8 bits")),y[i+4+u]=c}else for(u=0;u<a;++u)y[i+4+u]=r[u];return null!==n&&n.push(xn,i),i},argPackAdvance:8,readValueFromPointer:dn,destructorFunction:function(n){xn(n)}})},g:function(n,r,e){var t,o,a,i,u;e=X(e),2===r?(t=P,o=k,i=x,a=function(){return b},u=1):4===r&&(t=W,o=F,i=R,a=function(){return A},u=2),un(n,{name:e,fromWireType:function(n){for(var e,o=A[n>>2],i=a(),c=n+4,s=0;s<=o;++s){var f=n+4+s*r;if(s==o||0==i[f>>u]){var l=t(c,f-c);void 0===e?e=l:(e+=String.fromCharCode(0),e+=l),c=f+r}}return xn(n),e},toWireType:function(n,t){"string"!=typeof t&&tn("Cannot pass non-string to C++ string type "+e);var a=i(t),c=Wn(4+a+r);return A[c>>2]=a>>u,o(t,c+4,a+r),null!==n&&n.push(xn,c),c},argPackAdvance:8,readValueFromPointer:dn,destructorFunction:function(n){xn(n)}})},n:function(n,r){un(n,{isVoid:!0,name:r=X(r),argPackAdvance:0,fromWireType:function(){},toWireType:function(n,r){}})},c:fn,d:function(n){return 0===n?ln(_n()):(n=void 0===(e=bn[r=n])?X(r):e,ln(_n()[n]));var r,e},h:function(n){n>4&&(sn[n].refcount+=1)},i:function(r,e,t,o){r=function(n){return n||tn("Cannot use deleted val. handle = "+n),sn[n].value}(r);var a=Tn[e];return a||(a=function(r){for(var e="",t=0;t<r;++t)e+=(0!==t?", ":"")+"arg"+t;var o="return function emval_allocator_"+r+"(constructor, argTypes, args) {\n";for(t=0;t<r;++t)o+="var argType"+t+" = requireRegisteredType(Module['HEAP32'][(argTypes >>> 2) + "+t+'], "parameter '+t+'");\nvar arg'+t+" = argType"+t+".readValueFromPointer(args);\nargs += argType"+t+"['argPackAdvance'];\n";return o+="var obj = new constructor("+e+");\nreturn __emval_register(obj);\n}\n",new Function("requireRegisteredType","Module","__emval_register",o)(An,n,ln)}(e),Tn[e]=a),a(r,t,o)},j:function(){H()},t:function(n,r,e){y.copyWithin(n,r,r+e)},f:function(n){var r,e=y.length,t=2147483648;if((n>>>=0)>t)return!1;for(var o=1;o<=4;o*=2){var a=e*(1+.2/o);if(a=Math.min(a,n+100663296),En(Math.min(t,((r=Math.max(n,a))%65536>0&&(r+=65536-r%65536),r))))return!0}return!1},u:function(n,r,e,t){for(var o=0,a=0;a<e;a++){for(var i=_[r+8*a>>2],u=_[r+(8*a+4)>>2],c=0;c<u;c++)Cn.printChar(n,y[i+c]);o+=u}return _[t>>2]=o,0},s:function(n){}},xn=(function(){var r={a:kn};function t(r,e){var t,o=r.exports;n.asm=o,S((f=n.asm.w).buffer),I=n.asm.C,t=n.asm.x,U.unshift(t),function(r){if(M--,n.monitorRunDependencies&&n.monitorRunDependencies(M),0==M&&(null!==L&&(clearInterval(L),L=null),B)){var e=B;B=null,e()}}()}function o(n){t(n.instance)}function a(n){return(s||"function"!=typeof fetch?Promise.resolve().then((function(){return z(N)})):fetch(N,{credentials:"same-origin"}).then((function(n){if(!n.ok)throw"failed to load wasm binary file at '"+N+"'";return n.arrayBuffer()})).catch((function(){return z(N)}))).then((function(n){return WebAssembly.instantiate(n,r)})).then(n,(function(n){d("failed to asynchronously prepare wasm: "+n),H(n)}))}if(M++,n.monitorRunDependencies&&n.monitorRunDependencies(M),n.instantiateWasm)try{return n.instantiateWasm(r,t)}catch(n){return d("Module.instantiateWasm callback failed with error: "+n),!1}(s||"function"!=typeof WebAssembly.instantiateStreaming||q(N)||"function"!=typeof fetch?a(o):fetch(N,{credentials:"same-origin"}).then((function(n){return WebAssembly.instantiateStreaming(n,r).then(o,(function(n){return d("wasm streaming compile failed: "+n),d("falling back to ArrayBuffer instantiation"),a(o)}))}))).catch(e)}(),n.___wasm_call_ctors=function(){return(n.___wasm_call_ctors=n.asm.x).apply(null,arguments)},n._free=function(){return(xn=n._free=n.asm.y).apply(null,arguments)}),Wn=n._malloc=function(){return(Wn=n._malloc=n.asm.z).apply(null,arguments)},Fn=n.___getTypeName=function(){return(Fn=n.___getTypeName=n.asm.A).apply(null,arguments)};function Rn(e){function t(){Pn||(Pn=!0,n.calledRun=!0,p||(V(U),r(n),n.onRuntimeInitialized&&n.onRuntimeInitialized(),function(){if(n.postRun)for("function"==typeof n.postRun&&(n.postRun=[n.postRun]);n.postRun.length;)r=n.postRun.shift(),D.unshift(r);var r;V(D)}()))}e=e||u,M>0||(function(){if(n.preRun)for("function"==typeof n.preRun&&(n.preRun=[n.preRun]);n.preRun.length;)r=n.preRun.shift(),O.unshift(r);var r;V(O)}(),M>0||(n.setStatus?(n.setStatus("Running..."),setTimeout((function(){setTimeout((function(){n.setStatus("")}),1),t()}),1)):t()))}if(n.___embind_register_native_and_builtin_types=function(){return(n.___embind_register_native_and_builtin_types=n.asm.B).apply(null,arguments)},n.dynCall_jiji=function(){return(n.dynCall_jiji=n.asm.D).apply(null,arguments)},B=function n(){Pn||Rn(),Pn||(B=n)},n.run=Rn,n.preInit)for("function"==typeof n.preInit&&(n.preInit=[n.preInit]);n.preInit.length>0;)n.preInit.pop()();return Rn(),n.ready};const Nn=qn;let zn,Vn;function Gn(n,r,e,t){const o=e/t;if(o>n/r){const e=n/o;return{sw:n,sh:e,sx:0,sy:(r-e)/2}}const a=r*o;return{sh:r,sw:a,sx:(n-a)/2,sy:0}}let Jn=null,$n=0;let Xn=null;function Qn(){return null!==Xn&&Xn.buffer===Vn.memory.buffer||(Xn=new Int32Array(Vn.memory.buffer)),Xn}let Yn=null;const Zn=async function n(r){void 0===r&&(r=new URL(o(49),o.b)),("string"==typeof r||"function"==typeof Request&&r instanceof Request||"function"==typeof URL&&r instanceof URL)&&(r=fetch(r));const{instance:e,module:t}=await async function(n,r){if("function"==typeof Response&&n instanceof Response){if("function"==typeof WebAssembly.instantiateStreaming)try{return await WebAssembly.instantiateStreaming(n,r)}catch(r){if("application/wasm"==n.headers.get("Content-Type"))throw r;console.warn("`WebAssembly.instantiateStreaming` failed because your server does not serve wasm with `application/wasm` MIME type. Falling back to `WebAssembly.instantiate` which is slower. Original error:\n",r)}const e=await n.arrayBuffer();return await WebAssembly.instantiate(e,r)}{const e=await WebAssembly.instantiate(n,r);return e instanceof WebAssembly.Instance?{instance:e,module:n}:e}}(await r,{});return Vn=e.exports,n.__wbindgen_wasm_module=t,Vn};let Kn,nr=null;function rr(){return null!==nr&&nr.buffer===Kn.memory.buffer||(nr=new Uint32Array(Kn.memory.buffer)),nr}let er=0,tr=null;function or(){return null!==tr&&tr.buffer===Kn.memory.buffer||(tr=new Int32Array(Kn.memory.buffer)),tr}const ar=async function n(r){void 0===r&&(r=new URL(o(91),o.b)),("string"==typeof r||"function"==typeof Request&&r instanceof Request||"function"==typeof URL&&r instanceof URL)&&(r=fetch(r));const{instance:e,module:t}=await async function(n,r){if("function"==typeof Response&&n instanceof Response){if("function"==typeof WebAssembly.instantiateStreaming)try{return await WebAssembly.instantiateStreaming(n,r)}catch(r){if("application/wasm"==n.headers.get("Content-Type"))throw r;console.warn("`WebAssembly.instantiateStreaming` failed because your server does not serve wasm with `application/wasm` MIME type. Falling back to `WebAssembly.instantiate` which is slower. Original error:\n",r)}const e=await n.arrayBuffer();return await WebAssembly.instantiate(e,r)}{const e=await WebAssembly.instantiate(n,r);return e instanceof WebAssembly.Instance?{instance:e,module:n}:e}}(await r,{});return Kn=e.exports,n.__wbindgen_wasm_module=t,Kn},ir=["triangle","catrom","mitchell","lanczos3"];let ur,cr;async function sr(n,r){cr||(cr=ar()),await cr;const e=r.width/n.width,t=r.height/n.height,o=Math.max(e,t),a=function(n,{min:r=Number.MIN_VALUE,max:e=Number.MAX_VALUE}){return Math.min(Math.max(n,r),e)}(Math.ceil(o),{min:1,max:4});if(1===a)return n;const i=function(n,r,e,t){try{const l=Kn.__wbindgen_add_to_stack_pointer(-16);var o=function(n,r){const e=r(4*n.length);return rr().set(n,e/4),er=n.length,e}(n,Kn.__wbindgen_malloc),a=er;Kn.resize(l,o,a,r,e,t);var i=or()[l/4+0],u=or()[l/4+1],c=(s=i,f=u,rr().subarray(s/4,s/4+f)).slice();return Kn.__wbindgen_free(i,4*u),c}finally{Kn.__wbindgen_add_to_stack_pointer(16)}var s,f}(new Uint32Array(n.data.buffer),n.width,n.height,a);return new ImageData(new Uint8ClampedArray(i.buffer),n.width*a,n.height*a)}async function fr(n,r){let e=n;if(ur||(ur=Zn()),function(n){return"hqx"===n.method}(r)&&(e=await sr(e,r),r={...r,method:"catrom"}),await ur,"contain"===r.fitMethod){const{sx:t,sy:o,sw:a,sh:i}=Gn(n.width,n.height,r.width,r.height);e=function(n,r,e,t,o){const a=new Uint32Array(n.data.buffer);for(let i=0;i<o;i+=1){const o=(i+e)*n.width+r;a.copyWithin(i*t,o,o+t)}return new ImageData(new Uint8ClampedArray(a.buffer.slice(0,t*o*4)),t,o)}(e,Math.round(t),Math.round(o),Math.round(a),Math.round(i))}const t=function(n,r,e,t,o,a,i,u){try{const v=Vn.__wbindgen_add_to_stack_pointer(-16);var c=function(n,r){const e=r(1*n.length);return(null!==Jn&&Jn.buffer===Vn.memory.buffer||(Jn=new Uint8Array(Vn.memory.buffer)),Jn).set(n,e/1),$n=n.length,e}(n,Vn.__wbindgen_malloc),s=$n;Vn.resize(v,c,s,r,e,t,o,a,i,u);var f=Qn()[v/4+0],l=Qn()[v/4+1],d=(p=f,h=l,(null!==Yn&&Yn.buffer===Vn.memory.buffer||(Yn=new Uint8ClampedArray(Vn.memory.buffer)),Yn).subarray(p/1,p/1+h)).slice();return Vn.__wbindgen_free(f,1*l),d}finally{Vn.__wbindgen_add_to_stack_pointer(16)}var p,h}(new Uint8Array(e.data.buffer),e.width,e.height,r.width,r.height,ir.indexOf(r.method),r.premultiply,r.linearRGB);return new ImageData(new Uint8ClampedArray(t.buffer),r.width,r.height)}function lr(n,r){let e=0,t=0,o=n.width,a=n.height;return"contain"===r.fitMethod&&({sx:e,sy:t,sw:o,sh:a}=Gn(o,a,r.width,r.height)),function(n,r,e,t,o,a,i,u){const c=document.createElement("canvas");c.width=n.width,c.height=n.height,function(n,r){const e=n.getContext("2d");if(!e)throw Error("Canvas not initialized");e.clearRect(0,0,n.width,n.height),e.putImageData(r,0,0)}(c,n);const s=document.createElement("canvas");s.width=a,s.height=i;const f=s.getContext("2d");if(!f)throw new Error("Could not create canvas context");return"pixelated"===u?f.imageSmoothingEnabled=!1:f.imageSmoothingQuality=u,f.drawImage(c,r,e,t,o,0,0,a,i),f.getImageData(0,0,a,i)}(n,e,t,o,a,r.width,r.height,r.method.slice("browser-".length))}var dr=function(n){var r,e;(n=void 0!==(n=n||{})?n:{}).ready=new Promise((function(n,t){r=n,e=t}));var t,a={};for(t in n)n.hasOwnProperty(t)&&(a[t]=n[t]);var i,u=[],c="";c=self.location.href,c=0!==(c="file:///C:/Users/Dell7010/Desktop/web/tw/squoosh/codecs/imagequant/imagequant.js").indexOf("blob:")?c.substr(0,c.lastIndexOf("/")+1):"",i=function(n){var r=new XMLHttpRequest;return r.open("GET",n,!1),r.responseType="arraybuffer",r.send(null),new Uint8Array(r.response)};var s,f,l=n.print||console.log.bind(console),d=n.printErr||console.warn.bind(console);for(t in a)a.hasOwnProperty(t)&&(n[t]=a[t]);a=null,n.arguments&&(u=n.arguments),n.thisProgram&&n.thisProgram,n.quit&&n.quit,n.wasmBinary&&(s=n.wasmBinary),n.noExitRuntime,"object"!=typeof WebAssembly&&H("no native wasm support detected");var p=!1,h=new TextDecoder("utf8");function v(n,r){if(!n)return"";for(var e=n+r,t=n;!(t>=e)&&y[t];)++t;return h.decode(y.subarray(n,t))}var m,g,y,w,b,_,A,T,E,C=new TextDecoder("utf-16le");function P(n,r){for(var e=n,t=e>>1,o=t+r/2;!(t>=o)&&b[t];)++t;return e=t<<1,C.decode(y.subarray(n,e))}function k(n,r,e){if(void 0===e&&(e=2147483647),e<2)return 0;for(var t=r,o=(e-=2)<2*n.length?e/2:n.length,a=0;a<o;++a){var i=n.charCodeAt(a);w[r>>1]=i,r+=2}return w[r>>1]=0,r-t}function x(n){return 2*n.length}function W(n,r){for(var e=0,t="";!(e>=r/4);){var o=_[n+4*e>>2];if(0==o)break;if(++e,o>=65536){var a=o-65536;t+=String.fromCharCode(55296|a>>10,56320|1023&a)}else t+=String.fromCharCode(o)}return t}function F(n,r,e){if(void 0===e&&(e=2147483647),e<4)return 0;for(var t=r,o=t+e-4,a=0;a<n.length;++a){var i=n.charCodeAt(a);if(i>=55296&&i<=57343&&(i=65536+((1023&i)<<10)|1023&n.charCodeAt(++a)),_[r>>2]=i,(r+=4)+4>o)break}return _[r>>2]=0,r-t}function R(n){for(var r=0,e=0;e<n.length;++e){var t=n.charCodeAt(e);t>=55296&&t<=57343&&++e,r+=4}return r}function S(r){m=r,n.HEAP8=g=new Int8Array(r),n.HEAP16=w=new Int16Array(r),n.HEAP32=_=new Int32Array(r),n.HEAPU8=y=new Uint8Array(r),n.HEAPU16=b=new Uint16Array(r),n.HEAPU32=A=new Uint32Array(r),n.HEAPF32=T=new Float32Array(r),n.HEAPF64=E=new Float64Array(r)}n.INITIAL_MEMORY;var I,j,O=[],U=[],D=[],M=0,L=null,B=null;function H(r){n.onAbort&&n.onAbort(r),d(r+=""),p=!0,r="abort("+r+"). Build with -s ASSERTIONS=1 for more info.";var t=new WebAssembly.RuntimeError(r);throw e(t),t}function q(n){return n.startsWith("data:application/octet-stream;base64,")}if(n.preloadedImages={},n.preloadedAudios={},n.locateFile)q(N="imagequant.wasm")||(j=N,N=n.locateFile?n.locateFile(j,c):c+j);else var N=new URL(o(388),o.b).toString();function z(n){try{if(n==N&&s)return new Uint8Array(s);if(i)return i(n);throw"both async and sync fetching of the wasm failed"}catch(n){H(n)}}function V(r){for(;r.length>0;){var e=r.shift();if("function"!=typeof e){var t=e.func;"number"==typeof t?void 0===e.arg?I.get(t)():I.get(t)(e.arg):t(void 0===e.arg?null:e.arg)}else e(n)}}function G(n){switch(n){case 1:return 0;case 2:return 1;case 4:return 2;case 8:return 3;default:throw new TypeError("Unknown type size: "+n)}}var J=void 0;function $(n){for(var r="",e=n;y[e];)r+=J[y[e++]];return r}var X={},Q={},Y={};function Z(n){if(void 0===n)return"_unknown";var r=(n=n.replace(/[^a-zA-Z0-9_]/g,"$")).charCodeAt(0);return r>=48&&r<=57?"_"+n:n}function K(n,r){return n=Z(n),new Function("body","return function "+n+'() {\n    "use strict";    return body.apply(this, arguments);\n};\n')(r)}function nn(n,r){var e=K(r,(function(n){this.name=r,this.message=n;var e=new Error(n).stack;void 0!==e&&(this.stack=this.toString()+"\n"+e.replace(/^Error(:[^\n]*)?\n/,""))}));return e.prototype=Object.create(n.prototype),e.prototype.constructor=e,e.prototype.toString=function(){return void 0===this.message?this.name:this.name+": "+this.message},e}var rn=void 0;function en(n){throw new rn(n)}var tn=void 0;function on(n){throw new tn(n)}function an(n,r,e){if(e=e||{},!("argPackAdvance"in r))throw new TypeError("registerType registeredInstance requires argPackAdvance");var t=r.name;if(n||en('type "'+t+'" must have a positive integer typeid pointer'),Q.hasOwnProperty(n)){if(e.ignoreDuplicateRegistrations)return;en("Cannot register type '"+t+"' twice")}if(Q[n]=r,delete Y[n],X.hasOwnProperty(n)){var o=X[n];delete X[n],o.forEach((function(n){n()}))}}var un=[],cn=[{},{value:void 0},{value:null},{value:!0},{value:!1}];function sn(n){n>4&&0==--cn[n].refcount&&(cn[n]=void 0,un.push(n))}function fn(n){switch(n){case void 0:return 1;case null:return 2;case!0:return 3;case!1:return 4;default:var r=un.length?un.pop():cn.length;return cn[r]={refcount:1,value:n},r}}function ln(n){return this.fromWireType(A[n>>2])}function dn(n){if(null===n)return"null";var r=typeof n;return"object"===r||"array"===r||"function"===r?n.toString():""+n}function pn(n,r){switch(r){case 2:return function(n){return this.fromWireType(T[n>>2])};case 3:return function(n){return this.fromWireType(E[n>>3])};default:throw new TypeError("Unknown float type: "+n)}}function hn(n){for(;n.length;){var r=n.pop();n.pop()(r)}}function vn(r,e,t){return r.includes("j")?function(r,e,t){var o=n["dynCall_"+r];return t&&t.length?o.apply(null,[e].concat(t)):o.call(null,e)}(r,e,t):I.get(e).apply(null,t)}var mn=void 0;function gn(n){var r=Wn(n),e=$(r);return xn(r),e}function yn(n,r,e){switch(r){case 0:return e?function(n){return g[n]}:function(n){return y[n]};case 1:return e?function(n){return w[n>>1]}:function(n){return b[n>>1]};case 2:return e?function(n){return _[n>>2]}:function(n){return A[n>>2]};default:throw new TypeError("Unknown integer type: "+n)}}var wn={};function bn(){return"object"==typeof globalThis?globalThis:Function("return this")()}function _n(n,r){var e=Q[n];return void 0===e&&en(r+" has unknown type "+gn(n)),e}var An={};function Tn(n){try{return f.grow(n-m.byteLength+65535>>>16),S(f.buffer),1}catch(n){}}var En={mappings:{},buffers:[null,[],[]],printChar:function(n,r){var e=En.buffers[n];0===r||10===r?((1===n?l:d)(function(n,r,e){for(var t=0;n[t]&&!(t>=NaN);)++t;return h.decode(n.subarray?n.subarray(0,t):new Uint8Array(n.slice(0,t)))}(e)),e.length=0):e.push(r)},varargs:void 0,get:function(){return En.varargs+=4,_[En.varargs-4>>2]},getStr:function(n){return v(n)},get64:function(n,r){return n}};!function(){for(var n=new Array(256),r=0;r<256;++r)n[r]=String.fromCharCode(r);J=n}(),rn=n.BindingError=nn(Error,"BindingError"),tn=n.InternalError=nn(Error,"InternalError"),n.count_emval_handles=function(){for(var n=0,r=5;r<cn.length;++r)void 0!==cn[r]&&++n;return n},n.get_first_emval=function(){for(var n=5;n<cn.length;++n)if(void 0!==cn[n])return cn[n];return null},mn=n.UnboundTypeError=nn(Error,"UnboundTypeError");var Cn,Pn={m:function(n,r){},q:function(n,r,e,t,o){},n:function(n,r,e,t,o){var a=G(e);an(n,{name:r=$(r),fromWireType:function(n){return!!n},toWireType:function(n,r){return r?t:o},argPackAdvance:8,readValueFromPointer:function(n){var t;if(1===e)t=g;else if(2===e)t=w;else{if(4!==e)throw new TypeError("Unknown boolean type size: "+r);t=_}return this.fromWireType(t[n>>a])},destructorFunction:null})},v:function(n,r){an(n,{name:r=$(r),fromWireType:function(n){var r=cn[n].value;return sn(n),r},toWireType:function(n,r){return fn(r)},argPackAdvance:8,readValueFromPointer:ln,destructorFunction:null})},l:function(n,r,e){var t=G(e);an(n,{name:r=$(r),fromWireType:function(n){return n},toWireType:function(n,r){if("number"!=typeof r&&"boolean"!=typeof r)throw new TypeError('Cannot convert "'+dn(r)+'" to '+this.name);return r},argPackAdvance:8,readValueFromPointer:pn(r,t),destructorFunction:null})},c:function(r,e,t,o,a,i){var u=function(n,r){for(var e=[],t=0;t<n;t++)e.push(_[(r>>2)+t]);return e}(e,t);r=$(r),a=function(n,r){var e,t,o,a=(n=$(n)).includes("j")?(e=n,t=r,o=[],function(){o.length=arguments.length;for(var n=0;n<arguments.length;n++)o[n]=arguments[n];return vn(e,t,o)}):I.get(r);return"function"!=typeof a&&en("unknown function pointer with signature "+n+": "+r),a}(o,a),function(r,e,t){n.hasOwnProperty(r)?((void 0===t||void 0!==n[r].overloadTable&&void 0!==n[r].overloadTable[t])&&en("Cannot register public name '"+r+"' twice"),function(n,r,e){if(void 0===n[r].overloadTable){var t=n[r];n[r]=function(){return n[r].overloadTable.hasOwnProperty(arguments.length)||en("Function '"+e+"' called with an invalid number of arguments ("+arguments.length+") - expects one of ("+n[r].overloadTable+")!"),n[r].overloadTable[arguments.length].apply(this,arguments)},n[r].overloadTable=[],n[r].overloadTable[t.argCount]=t}}(n,r,r),n.hasOwnProperty(t)&&en("Cannot register multiple overloads of a function with the same number of arguments ("+t+")!"),n[r].overloadTable[t]=e):(n[r]=e,void 0!==t&&(n[r].numArguments=t))}(r,(function(){!function(n,r){var e=[],t={};throw r.forEach((function n(r){t[r]||Q[r]||(Y[r]?Y[r].forEach(n):(e.push(r),t[r]=!0))})),new mn(n+": "+e.map(gn).join([", "]))}("Cannot call "+r+" due to unbound types",u)}),e-1),function(t,o,u){function c(o){var u=function(t){var o=[t[0],null].concat(t.slice(1));return function(r,e,t){n.hasOwnProperty(r)||on("Replacing nonexistant public symbol"),void 0!==n[r].overloadTable&&void 0!==t?n[r].overloadTable[t]=e:(n[r]=e,n[r].argCount=t)}(r,function(n,r,e,t,o){var a=r.length;a<2&&en("argTypes array size mismatch! Must at least get return value and 'this' types!");for(var i=null!==r[1]&&null!==e,u=!1,c=1;c<r.length;++c)if(null!==r[c]&&void 0===r[c].destructorFunction){u=!0;break}var s="void"!==r[0].name,f="",l="";for(c=0;c<a-2;++c)f+=(0!==c?", ":"")+"arg"+c,l+=(0!==c?", ":"")+"arg"+c+"Wired";var d="return function "+Z(n)+"("+f+") {\nif (arguments.length !== "+(a-2)+") {\nthrowBindingError('function "+n+" called with ' + arguments.length + ' arguments, expected "+(a-2)+" args!');\n}\n";u&&(d+="var destructors = [];\n");var p=u?"destructors":"null",h=["throwBindingError","invoker","fn","runDestructors","retType","classParam"],v=[en,t,o,hn,r[0],r[1]];for(i&&(d+="var thisWired = classParam.toWireType("+p+", this);\n"),c=0;c<a-2;++c)d+="var arg"+c+"Wired = argType"+c+".toWireType("+p+", arg"+c+"); // "+r[c+2].name+"\n",h.push("argType"+c),v.push(r[c+2]);if(i&&(l="thisWired"+(l.length>0?", ":"")+l),d+=(s?"var rv = ":"")+"invoker(fn"+(l.length>0?", ":"")+l+");\n",u)d+="runDestructors(destructors);\n";else for(c=i?1:2;c<r.length;++c){var m=1===c?"thisWired":"arg"+(c-2)+"Wired";null!==r[c].destructorFunction&&(d+=m+"_dtor("+m+"); // "+r[c].name+"\n",h.push(m+"_dtor"),v.push(r[c].destructorFunction))}return s&&(d+="var ret = retType.fromWireType(rv);\nreturn ret;\n"),d+="}\n",h.push(d),function(n,r){if(!(n instanceof Function))throw new TypeError("new_ called with constructor type "+typeof n+" which is not a function");var e=K(n.name||"unknownFunctionName",(function(){}));e.prototype=n.prototype;var t=new e,o=n.apply(t,r);return o instanceof Object?o:t}(Function,h).apply(null,v)}(r,o,null,a,i),e-1),[]}(o);u.length!==t.length&&on("Mismatched type converter count");for(var c=0;c<t.length;++c)an(t[c],u[c])}t.forEach((function(n){Y[n]=o}));var s=new Array(o.length),f=[],l=0;o.forEach((function(n,r){Q.hasOwnProperty(n)?s[r]=Q[n]:(f.push(n),X.hasOwnProperty(n)||(X[n]=[]),X[n].push((function(){s[r]=Q[n],++l===f.length&&c(s)})))})),0===f.length&&c(s)}([],u)},b:function(n,r,e,t,o){r=$(r),-1===o&&(o=4294967295);var a=G(e),i=function(n){return n};if(0===t){var u=32-8*e;i=function(n){return n<<u>>>u}}var c=r.includes("unsigned");an(n,{name:r,fromWireType:i,toWireType:function(n,e){if("number"!=typeof e&&"boolean"!=typeof e)throw new TypeError('Cannot convert "'+dn(e)+'" to '+this.name);if(e<t||e>o)throw new TypeError('Passing a number "'+dn(e)+'" from JS side to C/C++ side to an argument of type "'+r+'", which is outside the valid range ['+t+", "+o+"]!");return c?e>>>0:0|e},argPackAdvance:8,readValueFromPointer:yn(r,a,0!==t),destructorFunction:null})},a:function(n,r,e){var t=[Int8Array,Uint8Array,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array][r];function o(n){var r=A,e=r[n>>=2],o=r[n+1];return new t(m,o,e)}an(n,{name:e=$(e),fromWireType:o,argPackAdvance:8,readValueFromPointer:o},{ignoreDuplicateRegistrations:!0})},h:function(n,r){var e="std::string"===(r=$(r));an(n,{name:r,fromWireType:function(n){var r,t=A[n>>2];if(e)for(var o=n+4,a=0;a<=t;++a){var i=n+4+a;if(a==t||0==y[i]){var u=v(o,i-o);void 0===r?r=u:(r+=String.fromCharCode(0),r+=u),o=i+1}}else{var c=new Array(t);for(a=0;a<t;++a)c[a]=String.fromCharCode(y[n+4+a]);r=c.join("")}return xn(n),r},toWireType:function(n,r){var t;r instanceof ArrayBuffer&&(r=new Uint8Array(r));var o="string"==typeof r;o||r instanceof Uint8Array||r instanceof Uint8ClampedArray||r instanceof Int8Array||en("Cannot pass non-string to std::string"),t=e&&o?function(){return function(n){for(var r=0,e=0;e<n.length;++e){var t=n.charCodeAt(e);t>=55296&&t<=57343&&(t=65536+((1023&t)<<10)|1023&n.charCodeAt(++e)),t<=127?++r:r+=t<=2047?2:t<=65535?3:4}return r}(r)}:function(){return r.length};var a=t(),i=kn(4+a+1);if(A[i>>2]=a,e&&o)!function(n,r,e,t){if(!(t>0))return 0;for(var o=e+t-1,a=0;a<n.length;++a){var i=n.charCodeAt(a);if(i>=55296&&i<=57343&&(i=65536+((1023&i)<<10)|1023&n.charCodeAt(++a)),i<=127){if(e>=o)break;r[e++]=i}else if(i<=2047){if(e+1>=o)break;r[e++]=192|i>>6,r[e++]=128|63&i}else if(i<=65535){if(e+2>=o)break;r[e++]=224|i>>12,r[e++]=128|i>>6&63,r[e++]=128|63&i}else{if(e+3>=o)break;r[e++]=240|i>>18,r[e++]=128|i>>12&63,r[e++]=128|i>>6&63,r[e++]=128|63&i}}r[e]=0}(r,y,i+4,a+1);else if(o)for(var u=0;u<a;++u){var c=r.charCodeAt(u);c>255&&(xn(i),en("String has UTF-16 code units that do not fit in 8 bits")),y[i+4+u]=c}else for(u=0;u<a;++u)y[i+4+u]=r[u];return null!==n&&n.push(xn,i),i},argPackAdvance:8,readValueFromPointer:ln,destructorFunction:function(n){xn(n)}})},f:function(n,r,e){var t,o,a,i,u;e=$(e),2===r?(t=P,o=k,i=x,a=function(){return b},u=1):4===r&&(t=W,o=F,i=R,a=function(){return A},u=2),an(n,{name:e,fromWireType:function(n){for(var e,o=A[n>>2],i=a(),c=n+4,s=0;s<=o;++s){var f=n+4+s*r;if(s==o||0==i[f>>u]){var l=t(c,f-c);void 0===e?e=l:(e+=String.fromCharCode(0),e+=l),c=f+r}}return xn(n),e},toWireType:function(n,t){"string"!=typeof t&&en("Cannot pass non-string to C++ string type "+e);var a=i(t),c=kn(4+a+r);return A[c>>2]=a>>u,o(t,c+4,a+r),null!==n&&n.push(xn,c),c},argPackAdvance:8,readValueFromPointer:ln,destructorFunction:function(n){xn(n)}})},o:function(n,r){an(n,{isVoid:!0,name:r=$(r),argPackAdvance:0,fromWireType:function(){},toWireType:function(n,r){}})},d:sn,k:function(n){return 0===n?fn(bn()):(n=void 0===(e=wn[r=n])?$(r):e,fn(bn()[n]));var r,e},i:function(n){n>4&&(cn[n].refcount+=1)},j:function(r,e,t,o){r=function(n){return n||en("Cannot use deleted val. handle = "+n),cn[n].value}(r);var a=An[e];return a||(a=function(r){for(var e="",t=0;t<r;++t)e+=(0!==t?", ":"")+"arg"+t;var o="return function emval_allocator_"+r+"(constructor, argTypes, args) {\n";for(t=0;t<r;++t)o+="var argType"+t+" = requireRegisteredType(Module['HEAP32'][(argTypes >>> 2) + "+t+'], "parameter '+t+'");\nvar arg'+t+" = argType"+t+".readValueFromPointer(args);\nargs += argType"+t+"['argPackAdvance'];\n";return o+="var obj = new constructor("+e+");\nreturn __emval_register(obj);\n}\n",new Function("requireRegisteredType","Module","__emval_register",o)(_n,n,fn)}(e),An[e]=a),a(r,t,o)},g:function(){H()},s:function(n,r,e){y.copyWithin(n,r,r+e)},e:function(n){var r,e=y.length,t=2147483648;if((n>>>=0)>t)return!1;for(var o=1;o<=4;o*=2){var a=e*(1+.2/o);if(a=Math.min(a,n+100663296),Tn(Math.min(t,((r=Math.max(n,a))%65536>0&&(r+=65536-r%65536),r))))return!0}return!1},u:function(n){return 0},p:function(n,r,e,t,o){},t:function(n,r,e,t){for(var o=0,a=0;a<e;a++){for(var i=_[r+8*a>>2],u=_[r+(8*a+4)>>2],c=0;c<u;c++)En.printChar(n,y[i+c]);o+=u}return _[t>>2]=o,0},r:function(n){}},kn=(function(){var r={a:Pn};function t(r,e){var t,o=r.exports;n.asm=o,S((f=n.asm.w).buffer),I=n.asm.C,t=n.asm.x,U.unshift(t),function(r){if(M--,n.monitorRunDependencies&&n.monitorRunDependencies(M),0==M&&(null!==L&&(clearInterval(L),L=null),B)){var e=B;B=null,e()}}()}function o(n){t(n.instance)}function a(n){return(s||"function"!=typeof fetch?Promise.resolve().then((function(){return z(N)})):fetch(N,{credentials:"same-origin"}).then((function(n){if(!n.ok)throw"failed to load wasm binary file at '"+N+"'";return n.arrayBuffer()})).catch((function(){return z(N)}))).then((function(n){return WebAssembly.instantiate(n,r)})).then(n,(function(n){d("failed to asynchronously prepare wasm: "+n),H(n)}))}if(M++,n.monitorRunDependencies&&n.monitorRunDependencies(M),n.instantiateWasm)try{return n.instantiateWasm(r,t)}catch(n){return d("Module.instantiateWasm callback failed with error: "+n),!1}(s||"function"!=typeof WebAssembly.instantiateStreaming||q(N)||"function"!=typeof fetch?a(o):fetch(N,{credentials:"same-origin"}).then((function(n){return WebAssembly.instantiateStreaming(n,r).then(o,(function(n){return d("wasm streaming compile failed: "+n),d("falling back to ArrayBuffer instantiation"),a(o)}))}))).catch(e)}(),n.___wasm_call_ctors=function(){return(n.___wasm_call_ctors=n.asm.x).apply(null,arguments)},n._malloc=function(){return(kn=n._malloc=n.asm.y).apply(null,arguments)}),xn=n._free=function(){return(xn=n._free=n.asm.z).apply(null,arguments)},Wn=n.___getTypeName=function(){return(Wn=n.___getTypeName=n.asm.A).apply(null,arguments)};function Fn(e){function t(){Cn||(Cn=!0,n.calledRun=!0,p||(V(U),r(n),n.onRuntimeInitialized&&n.onRuntimeInitialized(),function(){if(n.postRun)for("function"==typeof n.postRun&&(n.postRun=[n.postRun]);n.postRun.length;)r=n.postRun.shift(),D.unshift(r);var r;V(D)}()))}e=e||u,M>0||(function(){if(n.preRun)for("function"==typeof n.preRun&&(n.preRun=[n.preRun]);n.preRun.length;)r=n.preRun.shift(),O.unshift(r);var r;V(O)}(),M>0||(n.setStatus?(n.setStatus("Running..."),setTimeout((function(){setTimeout((function(){n.setStatus("")}),1),t()}),1)):t()))}if(n.___embind_register_native_and_builtin_types=function(){return(n.___embind_register_native_and_builtin_types=n.asm.B).apply(null,arguments)},n.dynCall_jiji=function(){return(n.dynCall_jiji=n.asm.D).apply(null,arguments)},B=function n(){Cn||Fn(),Cn||(B=n)},n.run=Fn,n.preInit)for("function"==typeof n.preInit&&(n.preInit=[n.preInit]);n.preInit.length>0;)n.preInit.pop()();return Fn(),n.ready};const pr=dr;let hr;var vr=o(531);const mr=fetch(vr).then((n=>n.arrayBuffer())).then((n=>WebAssembly.instantiate(n)));async function gr(n){const r=await async function(n){const r=await A(n.slice(0,16)),e=Array.from(new Uint8Array(r)).map((n=>String.fromCodePoint(n))).join("");for(const[n,r]of T)if(n.test(e))return r;return""}(n);if(!await function(n){if(!_.has(n)){const r=(async()=>{const r=document.createElement("picture"),e=document.createElement("img"),t=document.createElement("source");return t.srcset="data:,x",t.type=n,r.append(t,e),!!e.currentSrc})();_.set(n,r)}return _.get(n)}(r))switch(r){case"image/avif":return await async function(n){if(!Dn){const n=await o.e(330).then(o.bind(o,330));Dn=cn(n.default)}const[r,e]=await Promise.all([Dn,sn(n)]),t=r.decode(e);if(!t)throw new Error("Decoding error");return t}(n);case"image/webp":return await async function(n){Bn||(Bn=cn(Ln));const[r,e]=await Promise.all([Bn,sn(n)]),t=r.decode(e);if(!t)throw new Error("Decoding error");return t}(n);case"image/jxl":return await async function(n){if(!Hn){const n=await o.e(398).then(o.bind(o,398));Hn=cn(n.default)}const[r,e]=await Promise.all([Hn,sn(n)]),t=r.decode(e);if(!t)throw new Error("Decoding error");return t}(n);case"image/webp2":return await async function(n){zn||(zn=cn(Nn));const[r,e]=await Promise.all([zn,sn(n)]),t=r.decode(e);if(!t)throw new Error("Decoding error");return t}(n)}return await async function(n,r){if(await async function(n){if(!b)return!1;try{return await ImageDecoder.isTypeSupported(n)}catch(n){return!1}}(r))try{return await async function(n,r){if(!b)throw Error("This browser does not support ImageDecoder. This function should not have been called.");const e=new ImageDecoder({type:r,data:new Response(n).body}),{image:t}=await e.decode();return w(t)}(n,r)}catch(n){}return w("createImageBitmap"in self?await createImageBitmap(n):await E(n))}(n,r)}async function yr(n,r){let e=n.preprocessed;return r.resize.enabled&&(e=await async function(n,r){if("vector"===r.method){if(!n.vectorImage)throw Error("No vector image available");return function(n,r){let e=0,t=0,o=n.width,a=n.height;return"contain"===r.fitMethod&&({sx:e,sy:t,sw:o,sh:a}=Gn(o,a,r.width,r.height)),w(n,{sx:e,sy:t,sw:o,sh:a,width:r.width,height:r.height})}(n.vectorImage,r)}return e=r,In.includes(e.method)?fr(n.preprocessed,r):lr(n.preprocessed,r);var e}(n,r.resize)),r.quantize.enabled&&(e=await async function(n,r){hr||(hr=cn(pr));const e=await hr,t=r.zx?e.zx_quantize(n.data,n.width,n.height,r.dither):e.quantize(n.data,n.width,n.height,r.maxNumColors,r.dither);return new ImageData(t,n.width,n.height)}(e,r.quantize)),e}class wr{file;setting={encoderState:{type:"webP",options:jn.webP.meta.defaultOptions},processorState:On,preprocessorState:Un};constructor(n,r){this.file=n,r&&(this.setting=r)}async process(){let n,r;this.file.type.startsWith("image/svg+xml")?(r=await async function(n){const r=new DOMParser,e=await function(n){return new Response(n).text()}(n),t=r.parseFromString(e,"image/svg+xml"),o=t.documentElement;if(o.hasAttribute("width")&&o.hasAttribute("height"))return E(n);const a=o.getAttribute("viewBox");if(null===a)throw Error("SVG must have width/height or viewBox");const i=a.split(/\s+/);o.setAttribute("width",i[2]),o.setAttribute("height",i[3]);const u=(new XMLSerializer).serializeToString(t);return E(new Blob([u],{type:"image/svg+xml"}))}(this.file),n=w(r)):n=await gr(this.file);const e=await async function(n,r){let e=n;return 0!==r.rotate.rotate&&(e=await async function(n,r){const e=(await mr).instance,t=n.width*n.height*4,o=Math.ceil((2*t+8)/65536)-Math.floor(e.exports.memory.buffer.byteLength/65536);o>0&&e.exports.memory.grow(o);const a=new Uint8ClampedArray(e.exports.memory.buffer);a.set(n.data,8),e.exports.rotate(n.width,n.height,r.rotate);const i=r.rotate%180!=0;return new ImageData(a.slice(t+8,2*t+8),i?n.height:n.width,i?n.width:n.height)}(e,r.rotate)),e}(n,this.setting.preprocessorState),t={file:this.file,decoded:n,vectorImage:r,preprocessed:e},o=await yr(t,this.setting.processorState);return await async function(n,r,e){const t=jn[r.type];let o;switch(r.type){case"avif":o=await gn(n,r.options);break;case"browserGIF":o=await yn(n,r.options);break;case"browserJPEG":o=await wn(n,r.options);break;case"browserPNG":o=await bn(n,r.options);break;case"jxl":o=await An(n,r.options);break;case"mozJPEG":o=await xn(n,r.options);break;case"oxiPNG":o=await Wn(n,r.options);break;case"webP":o=await Fn(n,r.options);break;case"wp2":o=await Sn(n,r.options);break;default:o=new Blob}const a=t.meta.mimeType;return new File([o],e.replace(/.[^.]*$/,`.${t.meta.extension}`),{type:a})}(o,this.setting.encoderState,this.file.name)}}function br(n,r){var e=Object.keys(n);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(n);r&&(t=t.filter((function(r){return Object.getOwnPropertyDescriptor(n,r).enumerable}))),e.push.apply(e,t)}return e}function _r(n){for(var r=1;r<arguments.length;r++){var e=null!=arguments[r]?arguments[r]:{};r%2?br(Object(e),!0).forEach((function(r){p(n,r,e[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(e)):br(Object(e)).forEach((function(r){Object.defineProperty(n,r,Object.getOwnPropertyDescriptor(e,r))}))}return n}var Ar,Tr={encoderState:{type:"avif",options:{cqLevel:30,cqAlphaLevel:-1,denoiseLevel:0,tileColsLog2:0,tileRowsLog2:0,speed:7,subsample:2,chromaDeltaQ:!1,sharpness:0,tune:1}},preprocessorState:{rotate:{rotate:0}},processorState:{quantize:_r({enabled:!1},{zx:0,maxNumColors:256,dither:1}),resize:_r({enabled:!1},{width:1,height:1,method:"lanczos3",fitMethod:"stretch",premultiply:!0,linearRGB:!0})}},Er={encodeLog:function(n){var r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:void 0;console.log("Squoosh Browser"),console.log(new Date+"Filename: ".concat(n.size,"  (size ").concat(n.size,")")),r&&console.log("data",r)},encoder:function(n){var r=arguments,e=this;return d(v().mark((function t(){var o,a,i;return v().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return o=r.length>1&&void 0!==r[1]?r[1]:Tr,e.encodeLog(n,o),a=new wr(n,o),t.next=5,a.process();case 5:return i=t.sent,t.abrupt("return",i);case 7:case"end":return t.stop()}}),t)})))()},downloadBase64Data:function(n,r){var e=document.createElement("a");e.href=r,e.download=n},setImage:function(n,r){var e=new Image;e.src=n;var t=document.getElementById(r);null==t||t.appendChild(e)},changeCallback:(Ar=d(v().mark((function n(r){var e,t;return v().wrap((function(n){for(;;)switch(n.prev=n.next){case 0:if(t=r.target,null!==(e=t.files)&&void 0!==e&&e.length){n.next=3;break}return n.abrupt("return");case 3:(o=t.files,function(n){if(Array.isArray(n))return f(n)}(o)||function(n){if("undefined"!=typeof Symbol&&null!=n[Symbol.iterator]||null!=n["@@iterator"])return Array.from(n)}(o)||function(n,r){if(n){if("string"==typeof n)return f(n,r);var e=Object.prototype.toString.call(n).slice(8,-1);return"Object"===e&&n.constructor&&(e=n.constructor.name),"Map"===e||"Set"===e?Array.from(n):"Arguments"===e||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(e)?f(n,r):void 0}}(o)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()).forEach((function(n){Er.readImage(n).then((function(r){Er.loadOriginal(n),"string"==typeof r.imageSrc&&(Er.setImage(r.imageSrc,"encoded"),console.log(r))}))}));case 4:case"end":return n.stop()}var o}),n)}))),function(n){return Ar.apply(this,arguments)}),loadOriginal:function(n){return d(v().mark((function r(){var e;return v().wrap((function(r){for(;;)switch(r.prev=r.next){case 0:(e=new FileReader).onload=function(n){var r;Er.setImage(null===(r=n.target)||void 0===r?void 0:r.result,"original")},e.readAsDataURL(n);case 3:case"end":return r.stop()}}),r)})))()},readImage:function(n){return d(v().mark((function r(){var e,t;return v().wrap((function(r){for(;;)switch(r.prev=r.next){case 0:return r.next=2,Er.encoder(n);case 2:return e=r.sent,t=new FileReader,r.next=6,t.readAsDataURL(e);case 6:return r.abrupt("return",new Promise((function(n){t.onload=function(){n({imageSrc:t.result,name:""})}})));case 7:case"end":return r.stop()}}),r)})))()}},Cr=document.getElementById("file");Cr&&Cr.addEventListener("change",(function(n){var r=Er.changeCallback(n);console.log(r)}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,