"use strict";(self.webpackChunksquoosh=self.webpackChunksquoosh||[]).push([[447],{447:(e,r,n)=>{n.r(r),n.d(r,{default:()=>t});const t=("file:///C:/Users/Dell7010/Desktop/web/tw/squoosh/codecs/avif/enc/avif_enc_mt.js",function(e){function r(){return k.buffer!=x&&Q(k.buffer),E}function t(){return k.buffer!=x&&Q(k.buffer),W}function a(){return k.buffer!=x&&Q(k.buffer),S}function o(){return k.buffer!=x&&Q(k.buffer),P}function i(){return k.buffer!=x&&Q(k.buffer),j}function u(){return k.buffer!=x&&Q(k.buffer),I}function s(){return k.buffer!=x&&Q(k.buffer),R}var c,f;(e=void 0!==(e=e||{})?e:{}).ready=new Promise((function(e,r){c=e,f=r}));var l,d={};for(l in e)e.hasOwnProperty(l)&&(d[l]=e[l]);var p,h=[],v=function(e,r){throw r},m=e.ENVIRONMENT_IS_PTHREAD||!1,g="";function y(r){return e.locateFile?e.locateFile(r,g):g+r}g=self.location.href,g=0!==(g="file:///C:/Users/Dell7010/Desktop/web/tw/squoosh/codecs/avif/enc/avif_enc_mt.js").indexOf("blob:")?g.substr(0,g.lastIndexOf("/")+1):"",p=function(e){var r=new XMLHttpRequest;return r.open("GET",e,!1),r.responseType="arraybuffer",r.send(null),new Uint8Array(r.response)};var _=e.print||console.log.bind(console),w=e.printErr||console.warn.bind(console);for(l in d)d.hasOwnProperty(l)&&(e[l]=d[l]);d=null,e.arguments&&(h=e.arguments),e.thisProgram&&e.thisProgram,e.quit&&(v=e.quit);var b,T=0;Atomics.load,Atomics.store,Atomics.compareExchange,e.wasmBinary&&(b=e.wasmBinary);var k,A,C=e.noExitRuntime||!0;"object"!=typeof WebAssembly&&ae("no native wasm support detected");var x,E,W,S,P,j,I,F,R,H=!1;function L(e,r){e||ae("Assertion failed: "+r)}function M(e,r,n){for(var t=r+n,a="";!(r>=t);){var o=e[r++];if(!o)return a;if(128&o){var i=63&e[r++];if(192!=(224&o)){var u=63&e[r++];if((o=224==(240&o)?(15&o)<<12|i<<6|u:(7&o)<<18|i<<12|u<<6|63&e[r++])<65536)a+=String.fromCharCode(o);else{var s=o-65536;a+=String.fromCharCode(55296|s>>10,56320|1023&s)}}else a+=String.fromCharCode((31&o)<<6|i)}else a+=String.fromCharCode(o)}return a}function O(e,r){return e?M(t(),e,r):""}function D(e,r,n){return function(e,r,n,t){if(!(t>0))return 0;for(var a=n,o=n+t-1,i=0;i<e.length;++i){var u=e.charCodeAt(i);if(u>=55296&&u<=57343&&(u=65536+((1023&u)<<10)|1023&e.charCodeAt(++i)),u<=127){if(n>=o)break;r[n++]=u}else if(u<=2047){if(n+1>=o)break;r[n++]=192|u>>6,r[n++]=128|63&u}else if(u<=65535){if(n+2>=o)break;r[n++]=224|u>>12,r[n++]=128|u>>6&63,r[n++]=128|63&u}else{if(n+3>=o)break;r[n++]=240|u>>18,r[n++]=128|u>>12&63,r[n++]=128|u>>6&63,r[n++]=128|63&u}}return r[n]=0,n-a}(e,t(),r,n)}function B(e){for(var r=0,n=0;n<e.length;++n){var t=e.charCodeAt(n);t>=55296&&t<=57343&&(t=65536+((1023&t)<<10)|1023&e.charCodeAt(++n)),t<=127?++r:r+=t<=2047?2:t<=65535?3:4}return r}function U(e,r){for(var n="",t=0;!(t>=r/2);++t){var o=a()[e+2*t>>1];if(0==o)break;n+=String.fromCharCode(o)}return n}function G(e,r,n){if(void 0===n&&(n=2147483647),n<2)return 0;for(var t=r,o=(n-=2)<2*e.length?n/2:e.length,i=0;i<o;++i){var u=e.charCodeAt(i);a()[r>>1]=u,r+=2}return a()[r>>1]=0,r-t}function N(e){return 2*e.length}function q(e,r){for(var n=0,t="";!(n>=r/4);){var a=i()[e+4*n>>2];if(0==a)break;if(++n,a>=65536){var o=a-65536;t+=String.fromCharCode(55296|o>>10,56320|1023&o)}else t+=String.fromCharCode(a)}return t}function V(e,r,n){if(void 0===n&&(n=2147483647),n<4)return 0;for(var t=r,a=t+n-4,o=0;o<e.length;++o){var u=e.charCodeAt(o);if(u>=55296&&u<=57343&&(u=65536+((1023&u)<<10)|1023&e.charCodeAt(++o)),i()[r>>2]=u,(r+=4)+4>a)break}return i()[r>>2]=0,r-t}function z(e){for(var r=0,n=0;n<e.length;++n){var t=e.charCodeAt(n);t>=55296&&t<=57343&&++n,r+=4}return r}function Q(r){x=r,e.HEAP8=E=new Int8Array(r),e.HEAP16=S=new Int16Array(r),e.HEAP32=j=new Int32Array(r),e.HEAPU8=W=new Uint8Array(r),e.HEAPU16=P=new Uint16Array(r),e.HEAPU32=I=new Uint32Array(r),e.HEAPF32=F=new Float32Array(r),e.HEAPF64=R=new Float64Array(r)}m&&(x=e.buffer);var J,X=e.INITIAL_MEMORY||16777216;if(m)k=e.wasmMemory,x=e.buffer;else if(e.wasmMemory)k=e.wasmMemory;else if(!((k=new WebAssembly.Memory({initial:X/65536,maximum:32768,shared:!0})).buffer instanceof SharedArrayBuffer))throw w("requested a shared WebAssembly.Memory but the returned buffer is not a SharedArrayBuffer, indicating that while the browser has SharedArrayBuffer it does not have WebAssembly threads support - you may need to set a flag"),Error("bad memory");k&&(x=k.buffer),X=x.byteLength,Q(x);var K=[],Y=[],Z=[],$=[];function ee(){m||ce(Y)}var re=0,ne=null,te=null;function ae(r){e.onAbort&&e.onAbort(r),m&&console.error("Pthread aborting at "+(new Error).stack),w(r+=""),H=!0,r="abort("+r+"). Build with -s ASSERTIONS=1 for more info.";var n=new WebAssembly.RuntimeError(r);throw f(n),n}function oe(e){return e.startsWith("data:application/octet-stream;base64,")}if(e.preloadedImages={},e.preloadedAudios={},e.locateFile)oe(ie="avif_enc_mt.wasm")||(ie=y(ie));else var ie=new URL(n(211),n.b).toString();function ue(e){try{if(e==ie&&b)return new Uint8Array(b);if(p)return p(e);throw"both async and sync fetching of the wasm failed"}catch(e){ae(e)}}var se={600540:function(){throw"Canceled!"},600558:function(e,r){setTimeout((function(){xr(e,r)}),0)}};function ce(r){for(;r.length>0;){var n=r.shift();if("function"!=typeof n){var t=n.func;"number"==typeof t?void 0===n.arg?J.get(t)():J.get(t)(n.arg):t(void 0===n.arg?null:n.arg)}else n(e)}}function fe(e,n){if(e<=0||e>r().length||!0&e||n<0)return-28;if(0==n)return 0;n>=2147483647&&(n=1/0);var t=Atomics.load(i(),qr>>2),a=0;if(t==e&&Atomics.compareExchange(i(),qr>>2,t,0)==t&&(a=1,--n<=0))return 1;var o=Atomics.notify(i(),e>>2,n);if(o>=0)return o+a;throw"Atomics.notify returned an unexpected value "+o}function le(e){if(m)throw"Internal Error! cleanupThread() can only ever be called from main application thread!";if(!e)throw"Internal Error! Null pthread_ptr in cleanupThread!";var r=pe.pthreads[e];if(r){i()[e+12>>2]=0;var n=r.worker;pe.returnWorkerToPool(n)}}e._emscripten_futex_wake=fe;var de,pe={unusedWorkers:[],runningWorkers:[],tlsInitFunctions:[],initMainThreadBlock:function(){for(var e=navigator.hardwareConcurrency,r=0;r<e;++r)pe.allocateUnusedWorker()},initRuntime:function(){for(var e=br(228),r=0;r<57;++r)u()[e/4+r]=0;i()[e+12>>2]=e;var n=e+152;i()[n>>2]=n;var t=br(512);for(r=0;r<128;++r)u()[t/4+r]=0;Atomics.store(u(),e+100>>2,t),Atomics.store(u(),e+40>>2,e),jr(e,!1,1),Ar(e)},initWorker:function(){},pthreads:{},threadExitHandlers:[],runExitHandlers:function(){for(;pe.threadExitHandlers.length>0;)pe.threadExitHandlers.pop()();m&&Fr()&&Rr()},runExitHandlersAndDeinitThread:function(e,r){Atomics.store(u(),e+56>>2,1),Atomics.store(u(),e+60>>2,0),pe.runExitHandlers(),Atomics.store(u(),e+4>>2,r),Atomics.store(u(),e+0>>2,1),fe(e+0,2147483647),jr(0,0,0)},setExitStatus:function(e){},threadExit:function(e){var r=Fr();r&&(pe.runExitHandlersAndDeinitThread(r,e),m&&postMessage({cmd:"exit"}))},threadCancel:function(){pe.runExitHandlersAndDeinitThread(Fr(),-1),postMessage({cmd:"cancelDone"})},terminateAllThreads:function(){for(var e in pe.pthreads)(t=pe.pthreads[e])&&t.worker&&pe.returnWorkerToPool(t.worker);pe.pthreads={};for(var r=0;r<pe.unusedWorkers.length;++r)(n=pe.unusedWorkers[r]).terminate();for(pe.unusedWorkers=[],r=0;r<pe.runningWorkers.length;++r){var n,t=(n=pe.runningWorkers[r]).pthread;pe.freeThreadData(t),n.terminate()}pe.runningWorkers=[]},freeThreadData:function(e){if(e){if(e.threadInfoStruct){var r=i()[e.threadInfoStruct+100>>2];i()[e.threadInfoStruct+100>>2]=0,Tr(r),Tr(e.threadInfoStruct)}e.threadInfoStruct=0,e.allocatedOwnStack&&e.stackBase&&Tr(e.stackBase),e.stackBase=0,e.worker&&(e.worker.pthread=null)}},returnWorkerToPool:function(e){pe.runWithoutMainThreadQueuedCalls((function(){delete pe.pthreads[e.pthread.threadInfoStruct],pe.unusedWorkers.push(e),pe.runningWorkers.splice(pe.runningWorkers.indexOf(e),1),pe.freeThreadData(e.pthread),e.pthread=void 0}))},runWithoutMainThreadQueuedCalls:function(e){i()[Nr>>2]=0;try{e()}finally{i()[Nr>>2]=1}},receiveObjectTransfer:function(e){},threadInit:function(){for(var e in pe.tlsInitFunctions)pe.tlsInitFunctions[e]()},loadWasmModuleToWorker:function(r,n){r.onmessage=function(t){var a=t.data,o=a.cmd;if(r.pthread&&(pe.currentProxiedOperationCallerThread=r.pthread.threadInfoStruct),a.targetThread&&a.targetThread!=Fr()){var s=pe.pthreads[a.targetThread];return s?s.worker.postMessage(t.data,a.transferList):console.error('Internal error! Worker sent a message "'+o+'" to target pthread '+a.targetThread+", but that thread no longer exists!"),void(pe.currentProxiedOperationCallerThread=void 0)}if("processQueuedMainThreadWork"===o)Wr();else if("spawnThread"===o)mr(t.data);else if("cleanupThread"===o)le(a.thread);else if("killThread"===o)!function(e){if(m)throw"Internal Error! killThread() can only ever be called from main application thread!";if(!e)throw"Internal Error! Null pthread_ptr in killThread!";i()[e+12>>2]=0;var r=pe.pthreads[e];r.worker.terminate(),pe.freeThreadData(r),pe.runningWorkers.splice(pe.runningWorkers.indexOf(r.worker),1),r.worker.pthread=void 0}(a.thread);else if("cancelThread"===o)!function(e){if(m)throw"Internal Error! cancelThread() can only ever be called from main application thread!";if(!e)throw"Internal Error! Null pthread_ptr in cancelThread!";pe.pthreads[e].worker.postMessage({cmd:"cancel"})}(a.thread);else if("loaded"===o)r.loaded=!0,n&&n(r),r.runPthread&&(r.runPthread(),delete r.runPthread);else if("print"===o)_("Thread "+a.threadId+": "+a.text);else if("printErr"===o)w("Thread "+a.threadId+": "+a.text);else if("alert"===o)alert("Thread "+a.threadId+": "+a.text);else if("exit"===o)r.pthread&&Atomics.load(u(),r.pthread.threadInfoStruct+64>>2)&&pe.returnWorkerToPool(r);else if("exitProcess"===o)try{!function(r,n){if(m)throw postMessage({cmd:"exitProcess",returnCode:r}),new Vr(r);he()||(pe.terminateAllThreads(),e.onExit&&e.onExit(r),H=!0),v(r,new Vr(r))}(a.returnCode)}catch(t){if(t instanceof Vr)return;throw t}else"cancelDone"===o?pe.returnWorkerToPool(r):"objectTransfer"===o?pe.receiveObjectTransfer(t.data):"setimmediate"===t.data.target?r.postMessage(t.data):w("worker sent an unknown command "+o);pe.currentProxiedOperationCallerThread=void 0},r.onerror=function(e){w("pthread sent an error! "+e.filename+":"+e.lineno+": "+e.message)},r.postMessage({cmd:"load",urlOrBlob:e.mainScriptUrlOrBlob,wasmMemory:k,wasmModule:A})},allocateUnusedWorker:function(){if(e.locateFile){var r=y("avif_enc_mt.worker.js");pe.unusedWorkers.push(new Worker(r))}else pe.unusedWorkers.push(new Worker(new URL(n.p+n.u(95),n.b)))},getNewWorker:function(){return 0==pe.unusedWorkers.length&&(pe.allocateUnusedWorker(),pe.loadWasmModuleToWorker(pe.unusedWorkers[0])),pe.unusedWorkers.pop()},busySpinWait:function(e){for(var r=performance.now()+e;performance.now()<r;);}};function he(){return C||!1}function ve(e,r){pe.threadExitHandlers.push((function(){J.get(e)(r)}))}e.establishStackSpace=function(e,r){Or(e,r),Lr(e)},e.invokeEntryPoint=function(e,r){return J.get(e)(r)},e.keepRuntimeAlive=he,de=m?function(){return performance.now()-e.__performance_now_clock_drift}:function(){return performance.now()};var me={mappings:{},buffers:[null,[],[]],printChar:function(e,r){var n=me.buffers[e];0===r||10===r?((1===e?_:w)(M(n,0)),n.length=0):n.push(r)},varargs:void 0,get:function(){return me.varargs+=4,i()[me.varargs-4>>2]},getStr:function(e){return O(e)},get64:function(e,r){return e}};function ge(e,r,n){return m?rr(1,1,e,r,n):(me.varargs=n,0)}function ye(e,r,n){return m?rr(2,1,e,r,n):(me.varargs=n,0)}function _e(e,r,n){if(m)return rr(3,1,e,r,n);me.varargs=n}var we={};function be(e){for(;e.length;){var r=e.pop();e.pop()(r)}}function Te(e){return this.fromWireType(u()[e>>2])}var ke={},Ae={},Ce={};function xe(e){if(void 0===e)return"_unknown";var r=(e=e.replace(/[^a-zA-Z0-9_]/g,"$")).charCodeAt(0);return r>=48&&r<=57?"_"+e:e}function Ee(e,r){return e=xe(e),new Function("body","return function "+e+'() {\n    "use strict";    return body.apply(this, arguments);\n};\n')(r)}function We(e,r){var n=Ee(r,(function(e){this.name=r,this.message=e;var n=new Error(e).stack;void 0!==n&&(this.stack=this.toString()+"\n"+n.replace(/^Error(:[^\n]*)?\n/,""))}));return n.prototype=Object.create(e.prototype),n.prototype.constructor=n,n.prototype.toString=function(){return void 0===this.message?this.name:this.name+": "+this.message},n}var Se=void 0;function Pe(e){throw new Se(e)}function je(e,r,n){function t(r){var t=n(r);t.length!==e.length&&Pe("Mismatched type converter count");for(var a=0;a<e.length;++a)Me(e[a],t[a])}e.forEach((function(e){Ce[e]=r}));var a=new Array(r.length),o=[],i=0;r.forEach((function(e,r){Ae.hasOwnProperty(e)?a[r]=Ae[e]:(o.push(e),ke.hasOwnProperty(e)||(ke[e]=[]),ke[e].push((function(){a[r]=Ae[e],++i===o.length&&t(a)})))})),0===o.length&&t(a)}function Ie(e){switch(e){case 1:return 0;case 2:return 1;case 4:return 2;case 8:return 3;default:throw new TypeError("Unknown type size: "+e)}}var Fe=void 0;function Re(e){for(var r="",n=e;t()[n];)r+=Fe[t()[n++]];return r}var He=void 0;function Le(e){throw new He(e)}function Me(e,r,n){if(n=n||{},!("argPackAdvance"in r))throw new TypeError("registerType registeredInstance requires argPackAdvance");var t=r.name;if(e||Le('type "'+t+'" must have a positive integer typeid pointer'),Ae.hasOwnProperty(e)){if(n.ignoreDuplicateRegistrations)return;Le("Cannot register type '"+t+"' twice")}if(Ae[e]=r,delete Ce[e],ke.hasOwnProperty(e)){var a=ke[e];delete ke[e],a.forEach((function(e){e()}))}}var Oe=[],De=[{},{value:void 0},{value:null},{value:!0},{value:!1}];function Be(e){e>4&&0==--De[e].refcount&&(De[e]=void 0,Oe.push(e))}function Ue(e){switch(e){case void 0:return 1;case null:return 2;case!0:return 3;case!1:return 4;default:var r=Oe.length?Oe.pop():De.length;return De[r]={refcount:1,value:e},r}}function Ge(e){if(null===e)return"null";var r=typeof e;return"object"===r||"array"===r||"function"===r?e.toString():""+e}function Ne(e,r){switch(r){case 2:return function(e){return this.fromWireType((k.buffer!=x&&Q(k.buffer),F)[e>>2])};case 3:return function(e){return this.fromWireType(s()[e>>3])};default:throw new TypeError("Unknown float type: "+e)}}function qe(r,n,t){return r.includes("j")?function(r,n,t){var a=e["dynCall_"+r];return t&&t.length?a.apply(null,[n].concat(t)):a.call(null,n)}(r,n,t):J.get(n).apply(null,t)}function Ve(e,r){var n,t,a,o=(e=Re(e)).includes("j")?(n=e,t=r,a=[],function(){a.length=arguments.length;for(var e=0;e<arguments.length;e++)a[e]=arguments[e];return qe(n,t,a)}):J.get(r);return"function"!=typeof o&&Le("unknown function pointer with signature "+e+": "+r),o}var ze=void 0;function Qe(e){var r=kr(e),n=Re(r);return Tr(r),n}function Je(e,n,s){switch(n){case 0:return s?function(e){return r()[e]}:function(e){return t()[e]};case 1:return s?function(e){return a()[e>>1]}:function(e){return o()[e>>1]};case 2:return s?function(e){return i()[e>>2]}:function(e){return u()[e>>2]};default:throw new TypeError("Unknown integer type: "+e)}}var Xe={};function Ke(){return"object"==typeof globalThis?globalThis:Function("return this")()}function Ye(e,r){var n=Ae[e];return void 0===n&&Le(r+" has unknown type "+Qe(e)),n}var Ze={},$e=[];function er(e,n,t){if(e<=0||e>r().length||!0&e)return-28;var a=Atomics.wait(i(),e>>2,n,t);if("timed-out"===a)return-73;if("not-equal"===a)return-6;if("ok"===a)return 0;throw"Atomics.wait returned an unexpected value "+a}function rr(e,r){for(var n=arguments.length-2,t=Hr(),a=n,o=Mr(8*a),i=o>>3,u=0;u<n;u++){var c=arguments[2+u];s()[i+u]=c}var f=Sr(e,a,o,r);return Lr(t),f}var nr=[];function tr(e){try{return k.grow(e-x.byteLength+65535>>>16),Q(k.buffer),1}catch(e){}}var ar={inEventHandler:0,removeAllEventListeners:function(){for(var e=ar.eventHandlers.length-1;e>=0;--e)ar._removeHandler(e);ar.eventHandlers=[],ar.deferredCalls=[]},registerRemoveEventListeners:function(){ar.removeEventListenersRegistered||(Z.push(ar.removeAllEventListeners),ar.removeEventListenersRegistered=!0)},deferredCalls:[],deferCall:function(e,r,n){function t(e,r){if(e.length!=r.length)return!1;for(var n in e)if(e[n]!=r[n])return!1;return!0}for(var a in ar.deferredCalls){var o=ar.deferredCalls[a];if(o.targetFunction==e&&t(o.argsList,n))return}ar.deferredCalls.push({targetFunction:e,precedence:r,argsList:n}),ar.deferredCalls.sort((function(e,r){return e.precedence<r.precedence}))},removeDeferredCalls:function(e){for(var r=0;r<ar.deferredCalls.length;++r)ar.deferredCalls[r].targetFunction==e&&(ar.deferredCalls.splice(r,1),--r)},canPerformEventHandlerRequests:function(){return ar.inEventHandler&&ar.currentEventHandler.allowsDeferredCalls},runDeferredCalls:function(){if(ar.canPerformEventHandlerRequests())for(var e=0;e<ar.deferredCalls.length;++e){var r=ar.deferredCalls[e];ar.deferredCalls.splice(e,1),--e,r.targetFunction.apply(null,r.argsList)}},eventHandlers:[],removeAllHandlersOnTarget:function(e,r){for(var n=0;n<ar.eventHandlers.length;++n)ar.eventHandlers[n].target!=e||r&&r!=ar.eventHandlers[n].eventTypeString||ar._removeHandler(n--)},_removeHandler:function(e){var r=ar.eventHandlers[e];r.target.removeEventListener(r.eventTypeString,r.eventListenerFunc,r.useCapture),ar.eventHandlers.splice(e,1)},registerOrRemoveHandler:function(e){var r=function(r){++ar.inEventHandler,ar.currentEventHandler=e,ar.runDeferredCalls(),e.handlerFunc(r),ar.runDeferredCalls(),--ar.inEventHandler};if(e.callbackfunc)e.eventListenerFunc=r,e.target.addEventListener(e.eventTypeString,r,e.useCapture),ar.eventHandlers.push(e),ar.registerRemoveEventListeners();else for(var n=0;n<ar.eventHandlers.length;++n)ar.eventHandlers[n].target==e.target&&ar.eventHandlers[n].eventTypeString==e.eventTypeString&&ar._removeHandler(n--)},queueEventHandlerOnThread_iiii:function(e,r,n,t,a){var o=Hr(),u=Mr(12);i()[u>>2]=n,i()[u+4>>2]=t,i()[u+8>>2]=a,Pr(0,e,637534208,r,t,u),Lr(o)},getTargetThreadForEventCallback:function(e){switch(e){case 1:return 0;case 2:return pe.currentProxiedOperationCallerThread;default:return e}},getNodeNameForTarget:function(e){return e?e==window?"#window":e==screen?"#screen":e&&e.nodeName?e.nodeName:"":""},fullscreenEnabled:function(){return document.fullscreenEnabled||document.webkitFullscreenEnabled}};var or=[0,"undefined"!=typeof document?document:0,"undefined"!=typeof window?window:0];function ir(e){return function(e){var r;return e=(r=e)>2?O(r):r,or[e]||("undefined"!=typeof document?document.querySelector(e):void 0)}(e)}function ur(e,r,n){var t=ir(e);if(!t)return-4;if(t.canvasSharedPtr&&(i()[t.canvasSharedPtr>>2]=r,i()[t.canvasSharedPtr+4>>2]=n),!t.offscreenCanvas&&t.controlTransferredOffscreen)return t.canvasSharedPtr?(function(e,r,n,t){!function(e,r,n,t){var a,o,u,s=Hr(),c=Mr(12),f=0;r&&(o=B(a=r)+1,D(a,u=br(o),o),f=u),i()[c>>2]=f,i()[c+4>>2]=n,i()[c+8>>2]=t,Pr(0,e,657457152,0,f,c),Lr(s)}(e,r=r?O(r):"",n,t)}(i()[t.canvasSharedPtr+8>>2],e,r,n),1):-4;t.offscreenCanvas&&(t=t.offscreenCanvas);var a=!1;if(t.GLctxObject&&t.GLctxObject.GLctx){var o=t.GLctxObject.GLctx.getParameter(2978);a=0===o[0]&&0===o[1]&&o[2]===t.width&&o[3]===t.height}return t.width=r,t.height=n,a&&t.GLctxObject.GLctx.viewport(0,0,r,n),0}function sr(e,r,n){return m?rr(4,1,e,r,n):ur(e,r,n)}var cr,fr={counter:1,buffers:[],programs:[],framebuffers:[],renderbuffers:[],textures:[],shaders:[],vaos:[],contexts:{},offscreenCanvases:{},queries:[],stringCache:{},unpackAlignment:4,recordError:function(e){fr.lastError||(fr.lastError=e)},getNewId:function(e){for(var r=fr.counter++,n=e.length;n<r;n++)e[n]=null;return r},getSource:function(e,r,n,t){for(var a="",o=0;o<r;++o){var u=t?i()[t+4*o>>2]:-1;a+=O(i()[n+4*o>>2],u<0?void 0:u)}return a},createContext:function(e,r){e.getContextSafariWebGL2Fixed||(e.getContextSafariWebGL2Fixed=e.getContext,e.getContext=function(r,n){var t=e.getContextSafariWebGL2Fixed(r,n);return"webgl"==r==t instanceof WebGLRenderingContext?t:null});var n=e.getContext("webgl",r);return n?fr.registerContext(n,r):0},registerContext:function(e,r){var n=br(8);i()[n+4>>2]=Fr();var t={handle:n,attributes:r,version:r.majorVersion,GLctx:e};return e.canvas&&(e.canvas.GLctxObject=t),fr.contexts[n]=t,(void 0===r.enableExtensionsByDefault||r.enableExtensionsByDefault)&&fr.initExtensions(t),n},makeContextCurrent:function(r){return fr.currentContext=fr.contexts[r],e.ctx=cr=fr.currentContext&&fr.currentContext.GLctx,!(r&&!cr)},getContext:function(e){return fr.contexts[e]},deleteContext:function(e){fr.currentContext===fr.contexts[e]&&(fr.currentContext=null),"object"==typeof ar&&ar.removeAllHandlersOnTarget(fr.contexts[e].GLctx.canvas),fr.contexts[e]&&fr.contexts[e].GLctx.canvas&&(fr.contexts[e].GLctx.canvas.GLctxObject=void 0),Tr(fr.contexts[e].handle),fr.contexts[e]=null},initExtensions:function(e){if(e||(e=fr.currentContext),!e.initExtensionsDone){e.initExtensionsDone=!0;var r,n=e.GLctx;!function(e){var r=e.getExtension("ANGLE_instanced_arrays");r&&(e.vertexAttribDivisor=function(e,n){r.vertexAttribDivisorANGLE(e,n)},e.drawArraysInstanced=function(e,n,t,a){r.drawArraysInstancedANGLE(e,n,t,a)},e.drawElementsInstanced=function(e,n,t,a,o){r.drawElementsInstancedANGLE(e,n,t,a,o)})}(n),function(e){var r=e.getExtension("OES_vertex_array_object");r&&(e.createVertexArray=function(){return r.createVertexArrayOES()},e.deleteVertexArray=function(e){r.deleteVertexArrayOES(e)},e.bindVertexArray=function(e){r.bindVertexArrayOES(e)},e.isVertexArray=function(e){return r.isVertexArrayOES(e)})}(n),function(e){var r=e.getExtension("WEBGL_draw_buffers");r&&(e.drawBuffers=function(e,n){r.drawBuffersWEBGL(e,n)})}(n),n.disjointTimerQueryExt=n.getExtension("EXT_disjoint_timer_query"),(r=n).multiDrawWebgl=r.getExtension("WEBGL_multi_draw"),(n.getSupportedExtensions()||[]).forEach((function(e){e.includes("lose_context")||e.includes("debug")||n.getExtension(e)}))}}},lr=["default","low-power","high-performance"];function dr(e){return m?rr(5,1,e):0}function pr(e,r,n,t){if(m)return rr(6,1,e,r,n,t);var a=me.getStreamFromFD(e),o=me.doReadv(a,r,n);return i()[t>>2]=o,0}function hr(e,r,n,t,a){if(m)return rr(7,1,e,r,n,t,a)}function vr(e,r,n,a){if(m)return rr(8,1,e,r,n,a);for(var o=0,u=0;u<n;u++){for(var s=i()[r+8*u>>2],c=i()[r+(8*u+4)>>2],f=0;f<c;f++)me.printChar(e,t()[s+f]);o+=c}return i()[a>>2]=o,0}function mr(e){if(m)throw"Internal Error! spawnThread() can only ever be called from main application thread!";var r=pe.getNewWorker();if(!r)return 6;if(void 0!==r.pthread)throw"Internal error!";if(!e.pthread_ptr)throw"Internal error, no pthread ptr!";pe.runningWorkers.push(r);for(var n=br(512),t=0;t<128;++t)i()[n+4*t>>2]=0;var a=e.stackBase+e.stackSize,o=pe.pthreads[e.pthread_ptr]={worker:r,stackBase:e.stackBase,stackSize:e.stackSize,allocatedOwnStack:e.allocatedOwnStack,threadInfoStruct:e.pthread_ptr},s=o.threadInfoStruct>>2;Atomics.store(u(),s+16,e.detached),Atomics.store(u(),s+25,n),Atomics.store(u(),s+10,o.threadInfoStruct),Atomics.store(u(),s+20,e.stackSize),Atomics.store(u(),s+19,a),Atomics.store(u(),s+26,e.stackSize),Atomics.store(u(),s+28,a),Atomics.store(u(),s+29,e.detached);var c=Ir()+40;Atomics.store(u(),s+43,c),r.pthread=o;var f={cmd:"run",start_routine:e.startRoutine,arg:e.arg,threadInfoStruct:e.pthread_ptr,stackBase:e.stackBase,stackSize:e.stackSize};return r.runPthread=function(){f.time=performance.now(),r.postMessage(f,e.transferList)},r.loaded&&(r.runPthread(),delete r.runPthread),0}function gr(){if(m){var e=Fr();if(e&&!Atomics.load(u(),e+56>>2)&&2==Atomics.load(u(),e+0>>2))throw"Canceled!"}}m||pe.initMainThreadBlock(),Se=e.InternalError=We(Error,"InternalError"),function(){for(var e=new Array(256),r=0;r<256;++r)e[r]=String.fromCharCode(r);Fe=e}(),He=e.BindingError=We(Error,"BindingError"),e.count_emval_handles=function(){for(var e=0,r=5;r<De.length;++r)void 0!==De[r]&&++e;return e},e.get_first_emval=function(){for(var e=5;e<De.length;++e)if(void 0!==De[e])return De[e];return null},ze=e.UnboundTypeError=We(Error,"UnboundTypeError");var yr,_r=[null,ge,ye,_e,sr,dr,pr,hr,vr],wr={k:function(e,r,n,t){ae("Assertion failed: "+O(e)+", at: "+[r?O(r):"unknown filename",n,t?O(t):"unknown function"])},B:function(e,r){return ve(e,r)},t:ge,T:ye,U:_e,E:function(e){var r=we[e];delete we[e];var n=r.rawConstructor,t=r.rawDestructor,a=r.fields;je([e],a.map((function(e){return e.getterReturnType})).concat(a.map((function(e){return e.setterArgumentType}))),(function(e){var o={};return a.forEach((function(r,n){var t=r.fieldName,i=e[n],u=r.getter,s=r.getterContext,c=e[n+a.length],f=r.setter,l=r.setterContext;o[t]={read:function(e){return i.fromWireType(u(s,e))},write:function(e,r){var n=[];f(l,e,c.toWireType(n,r)),be(n)}}})),[{name:r.name,fromWireType:function(e){var r={};for(var n in o)r[n]=o[n].read(e);return t(e),r},toWireType:function(e,r){for(var a in o)if(!(a in r))throw new TypeError('Missing field:  "'+a+'"');var i=n();for(a in o)o[a].write(i,r[a]);return null!==e&&e.push(t,i),i},argPackAdvance:8,readValueFromPointer:Te,destructorFunction:t}]}))},I:function(e,r,n,t,a){},ca:function(e,n,t,o,u){var s=Ie(t);Me(e,{name:n=Re(n),fromWireType:function(e){return!!e},toWireType:function(e,r){return r?o:u},argPackAdvance:8,readValueFromPointer:function(e){var o;if(1===t)o=r();else if(2===t)o=a();else{if(4!==t)throw new TypeError("Unknown boolean type size: "+n);o=i()}return this.fromWireType(o[e>>s])},destructorFunction:null})},ba:function(e,r){Me(e,{name:r=Re(r),fromWireType:function(e){var r=De[e].value;return Be(e),r},toWireType:function(e,r){return Ue(r)},argPackAdvance:8,readValueFromPointer:Te,destructorFunction:null})},y:function(e,r,n){var t=Ie(n);Me(e,{name:r=Re(r),fromWireType:function(e){return e},toWireType:function(e,r){if("number"!=typeof r&&"boolean"!=typeof r)throw new TypeError('Cannot convert "'+Ge(r)+'" to '+this.name);return r},argPackAdvance:8,readValueFromPointer:Ne(r,t),destructorFunction:null})},D:function(r,n,t,a,o,u){var s=function(e,r){for(var n=[],t=0;t<e;t++)n.push(i()[(r>>2)+t]);return n}(n,t);r=Re(r),o=Ve(a,o),function(r,n,t){e.hasOwnProperty(r)?((void 0===t||void 0!==e[r].overloadTable&&void 0!==e[r].overloadTable[t])&&Le("Cannot register public name '"+r+"' twice"),function(e,r,n){if(void 0===e[r].overloadTable){var t=e[r];e[r]=function(){return e[r].overloadTable.hasOwnProperty(arguments.length)||Le("Function '"+n+"' called with an invalid number of arguments ("+arguments.length+") - expects one of ("+e[r].overloadTable+")!"),e[r].overloadTable[arguments.length].apply(this,arguments)},e[r].overloadTable=[],e[r].overloadTable[t.argCount]=t}}(e,r,r),e.hasOwnProperty(t)&&Le("Cannot register multiple overloads of a function with the same number of arguments ("+t+")!"),e[r].overloadTable[t]=n):(e[r]=n,void 0!==t&&(e[r].numArguments=t))}(r,(function(){!function(e,r){var n=[],t={};throw r.forEach((function e(r){t[r]||Ae[r]||(Ce[r]?Ce[r].forEach(e):(n.push(r),t[r]=!0))})),new ze(e+": "+n.map(Qe).join([", "]))}("Cannot call "+r+" due to unbound types",s)}),n-1),je([],s,(function(t){var a=[t[0],null].concat(t.slice(1));return function(r,n,t){e.hasOwnProperty(r)||Pe("Replacing nonexistant public symbol"),void 0!==e[r].overloadTable&&void 0!==t?e[r].overloadTable[t]=n:(e[r]=n,e[r].argCount=t)}(r,function(e,r,n,t,a){var o=r.length;o<2&&Le("argTypes array size mismatch! Must at least get return value and 'this' types!");for(var i=null!==r[1]&&null!==n,u=!1,s=1;s<r.length;++s)if(null!==r[s]&&void 0===r[s].destructorFunction){u=!0;break}var c="void"!==r[0].name,f="",l="";for(s=0;s<o-2;++s)f+=(0!==s?", ":"")+"arg"+s,l+=(0!==s?", ":"")+"arg"+s+"Wired";var d="return function "+xe(e)+"("+f+") {\nif (arguments.length !== "+(o-2)+") {\nthrowBindingError('function "+e+" called with ' + arguments.length + ' arguments, expected "+(o-2)+" args!');\n}\n";u&&(d+="var destructors = [];\n");var p=u?"destructors":"null",h=["throwBindingError","invoker","fn","runDestructors","retType","classParam"],v=[Le,t,a,be,r[0],r[1]];for(i&&(d+="var thisWired = classParam.toWireType("+p+", this);\n"),s=0;s<o-2;++s)d+="var arg"+s+"Wired = argType"+s+".toWireType("+p+", arg"+s+"); // "+r[s+2].name+"\n",h.push("argType"+s),v.push(r[s+2]);if(i&&(l="thisWired"+(l.length>0?", ":"")+l),d+=(c?"var rv = ":"")+"invoker(fn"+(l.length>0?", ":"")+l+");\n",u)d+="runDestructors(destructors);\n";else for(s=i?1:2;s<r.length;++s){var m=1===s?"thisWired":"arg"+(s-2)+"Wired";null!==r[s].destructorFunction&&(d+=m+"_dtor("+m+"); // "+r[s].name+"\n",h.push(m+"_dtor"),v.push(r[s].destructorFunction))}return c&&(d+="var ret = retType.fromWireType(rv);\nreturn ret;\n"),d+="}\n",h.push(d),function(e,r){if(!(e instanceof Function))throw new TypeError("new_ called with constructor type "+typeof e+" which is not a function");var n=Ee(e.name||"unknownFunctionName",(function(){}));n.prototype=e.prototype;var t=new n,a=e.apply(t,r);return a instanceof Object?a:t}(Function,h).apply(null,v)}(r,a,null,o,u),n-1),[]}))},j:function(e,r,n,t,a){r=Re(r),-1===a&&(a=4294967295);var o=Ie(n),i=function(e){return e};if(0===t){var u=32-8*n;i=function(e){return e<<u>>>u}}var s=r.includes("unsigned");Me(e,{name:r,fromWireType:i,toWireType:function(e,n){if("number"!=typeof n&&"boolean"!=typeof n)throw new TypeError('Cannot convert "'+Ge(n)+'" to '+this.name);if(n<t||n>a)throw new TypeError('Passing a number "'+Ge(n)+'" from JS side to C/C++ side to an argument of type "'+r+'", which is outside the valid range ['+t+", "+a+"]!");return s?n>>>0:0|n},argPackAdvance:8,readValueFromPointer:Je(r,o,0!==t),destructorFunction:null})},h:function(e,r,n){var t=[Int8Array,Uint8Array,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array][r];function a(e){e>>=2;var r=u(),n=r[e],a=r[e+1];return new t(x,a,n)}Me(e,{name:n=Re(n),fromWireType:a,argPackAdvance:8,readValueFromPointer:a},{ignoreDuplicateRegistrations:!0})},z:function(e,r){var n="std::string"===(r=Re(r));Me(e,{name:r,fromWireType:function(e){var r,a=u()[e>>2];if(n)for(var o=e+4,i=0;i<=a;++i){var s=e+4+i;if(i==a||0==t()[s]){var c=O(o,s-o);void 0===r?r=c:(r+=String.fromCharCode(0),r+=c),o=s+1}}else{var f=new Array(a);for(i=0;i<a;++i)f[i]=String.fromCharCode(t()[e+4+i]);r=f.join("")}return Tr(e),r},toWireType:function(e,r){r instanceof ArrayBuffer&&(r=new Uint8Array(r));var a="string"==typeof r;a||r instanceof Uint8Array||r instanceof Uint8ClampedArray||r instanceof Int8Array||Le("Cannot pass non-string to std::string");var o=(n&&a?function(){return B(r)}:function(){return r.length})(),i=br(4+o+1);if(u()[i>>2]=o,n&&a)D(r,i+4,o+1);else if(a)for(var s=0;s<o;++s){var c=r.charCodeAt(s);c>255&&(Tr(i),Le("String has UTF-16 code units that do not fit in 8 bits")),t()[i+4+s]=c}else for(s=0;s<o;++s)t()[i+4+s]=r[s];return null!==e&&e.push(Tr,i),i},argPackAdvance:8,readValueFromPointer:Te,destructorFunction:function(e){Tr(e)}})},q:function(e,r,n){var t,a,i,s,c;n=Re(n),2===r?(t=U,a=G,s=N,i=function(){return o()},c=1):4===r&&(t=q,a=V,s=z,i=function(){return u()},c=2),Me(e,{name:n,fromWireType:function(e){for(var n,a=u()[e>>2],o=i(),s=e+4,f=0;f<=a;++f){var l=e+4+f*r;if(f==a||0==o[l>>c]){var d=t(s,l-s);void 0===n?n=d:(n+=String.fromCharCode(0),n+=d),s=l+r}}return Tr(e),n},toWireType:function(e,t){"string"!=typeof t&&Le("Cannot pass non-string to C++ string type "+n);var o=s(t),i=br(4+o+r);return u()[i>>2]=o>>c,a(t,i+4,o+r),null!==e&&e.push(Tr,i),i},argPackAdvance:8,readValueFromPointer:Te,destructorFunction:function(e){Tr(e)}})},M:function(e,r,n,t,a,o){we[e]={name:Re(r),rawConstructor:Ve(n,t),rawDestructor:Ve(a,o),fields:[]}},i:function(e,r,n,t,a,o,i,u,s,c){we[e].fields.push({fieldName:Re(r),getterReturnType:n,getter:Ve(t,a),getterContext:o,setterArgumentType:i,setter:Ve(u,s),setterContext:c})},da:function(e,r){Me(e,{isVoid:!0,name:r=Re(r),argPackAdvance:0,fromWireType:function(){},toWireType:function(e,r){}})},$:function(e,r){if(e==r)postMessage({cmd:"processQueuedMainThreadWork"});else if(m)postMessage({targetThread:e,cmd:"processThreadQueue"});else{var n=pe.pthreads[e],t=n&&n.worker;if(!t)return;t.postMessage({cmd:"processThreadQueue"})}return 1},o:Be,aa:function(e){return 0===e?Ue(Ke()):(e=void 0===(n=Xe[r=e])?Re(r):n,Ue(Ke()[e]));var r,n},C:function(e){e>4&&(De[e].refcount+=1)},S:function(r,n,t,a){r=function(e){return e||Le("Cannot use deleted val. handle = "+e),De[e].value}(r);var o=Ze[n];return o||(o=function(r){for(var n="",t=0;t<r;++t)n+=(0!==t?", ":"")+"arg"+t;var a="return function emval_allocator_"+r+"(constructor, argTypes, args) {\n";for(t=0;t<r;++t)a+="var argType"+t+" = requireRegisteredType(Module['HEAP32'][(argTypes >>> 2) + "+t+'], "parameter '+t+'");\nvar arg'+t+" = argType"+t+".readValueFromPointer(args);\nargs += argType"+t+"['argPackAdvance'];\n";return a+="var obj = new constructor("+n+");\nreturn __emval_register(obj);\n}\n",new Function("requireRegisteredType","Module","__emval_register",a)(Ye,e,Ue)}(n),Ze[n]=o),o(r,t,a)},g:function(){ae()},x:function(e,r,n){var a=function(e,r){var n;for($e.length=0,r>>=2;n=t()[e++];){var a=n<105;a&&1&r&&r++,$e.push(a?s()[r++>>1]:i()[r]),++r}return $e}(r,n);return se[e].apply(null,a)},X:function(){},w:function(e,r){},l:er,m:fe,p:de,d:function(e,r){return function(e,r){throw Dr(e,r||1),"longjmp"}(e,r)},O:function(e,r,n){t().copyWithin(e,r,r+n)},ga:function(){return navigator.hardwareConcurrency},Y:function(e,r,n){nr.length=r;for(var t=n>>3,a=0;a<r;a++)nr[a]=s()[t+a];return(e<0?se[-e-1]:_r[e]).apply(null,nr)},P:function(e){var r=t().length;if((e>>>=0)<=r)return!1;var n,a=2147483648;if(e>a)return!1;for(var o=1;o<=4;o*=2){var i=r*(1+.2/o);if(i=Math.min(i,e+100663296),tr(Math.min(a,((n=Math.max(e,i))%65536>0&&(n+=65536-n%65536),n))))return!0}return!1},Z:function(e,r,n){return ir(e)?ur(e,r,n):sr(e,r,n)},v:function(e){},_:function(e,r){return n=e,t=r>>2,a=i()[t+6],o={alpha:!!i()[t+0],depth:!!i()[t+1],stencil:!!i()[t+2],antialias:!!i()[t+3],premultipliedAlpha:!!i()[t+4],preserveDrawingBuffer:!!i()[t+5],powerPreference:lr[a],failIfMajorPerformanceCaveat:!!i()[t+7],majorVersion:i()[t+8],minorVersion:i()[t+9],enableExtensionsByDefault:i()[t+10],explicitSwapControl:i()[t+11],proxyContextToMainThread:i()[t+12],renderViaOffscreenBackBuffer:i()[t+13]},(u=ir(n))?o.explicitSwapControl?0:fr.createContext(u,o):0;var n,t,a,o,u},u:dr,R:pr,H:hr,Q:vr,c:function(){return T},N:function(){pe.initRuntime()},K:function(e,r){var n=Hr();try{return J.get(e)(r)}catch(e){if(Lr(n),e!==e+0&&"longjmp"!==e)throw e;Dr(1,0)}},r:function(e,r,n){var t=Hr();try{return J.get(e)(r,n)}catch(e){if(Lr(t),e!==e+0&&"longjmp"!==e)throw e;Dr(1,0)}},L:function(e,r,n,t,a,o,i,u,s,c){var f=Hr();try{return J.get(e)(r,n,t,a,o,i,u,s,c)}catch(e){if(Lr(f),e!==e+0&&"longjmp"!==e)throw e;Dr(1,0)}},J:function(e,r,n,t,a,o,i,u,s,c,f,l){var d=Hr();try{return J.get(e)(r,n,t,a,o,i,u,s,c,f,l)}catch(e){if(Lr(d),e!==e+0&&"longjmp"!==e)throw e;Dr(1,0)}},G:function(e,r,n,t,a,o,i,u){var s=Hr();try{return Ur(e,r,n,t,a,o,i,u)}catch(e){if(Lr(s),e!==e+0&&"longjmp"!==e)throw e;Dr(1,0)}},F:function(e,r,n,t,a,o){var i=Hr();try{return Gr(e,r,n,t,a,o)}catch(e){if(Lr(i),e!==e+0&&"longjmp"!==e)throw e;Dr(1,0)}},n:function(e,r){var n=Hr();try{J.get(e)(r)}catch(e){if(Lr(n),e!==e+0&&"longjmp"!==e)throw e;Dr(1,0)}},f:function(e,r,n){var t=Hr();try{J.get(e)(r,n)}catch(e){if(Lr(t),e!==e+0&&"longjmp"!==e)throw e;Dr(1,0)}},s:function(e,r,n,t){var a=Hr();try{J.get(e)(r,n,t)}catch(e){if(Lr(a),e!==e+0&&"longjmp"!==e)throw e;Dr(1,0)}},e:function(e,r,n,t,a){var o=Hr();try{J.get(e)(r,n,t,a)}catch(e){if(Lr(o),e!==e+0&&"longjmp"!==e)throw e;Dr(1,0)}},a:k||e.wasmMemory,V:function(e){var r=pe.threadExitHandlers.pop();e&&r()},W:ve,A:function(e,r,n,t){if("undefined"==typeof SharedArrayBuffer)return w("Current environment does not support SharedArrayBuffer, pthreads are not available!"),6;if(!e)return w("pthread_create called with a null thread pointer!"),28;var a=[];if(m&&0===a.length)return Er(687865856,e,r,n,t);var o=0,s=0,c=0;r&&-1!=r?(o=i()[r>>2],o+=81920,s=i()[r+8>>2],c=0!==i()[r+12>>2]):o=2097152;var f=0==s;f?s=Br(16,o):L((s-=o)>0);for(var l=br(228),d=0;d<57;++d)u()[(l>>2)+d]=0;i()[e>>2]=l,i()[l+12>>2]=l;var p=l+152;i()[p>>2]=p;var h={stackBase:s,stackSize:o,allocatedOwnStack:f,detached:c,startRoutine:n,pthread_ptr:l,arg:t,transferList:a};return m?(h.cmd="spawnThread",postMessage(h,a),0):mr(h)},ea:function(e,r){return function(e,r,n){if(!e)return w("pthread_join attempted on a null thread pointer!"),71;if(m&&Fr()==e)return w("PThread "+e+" is attempting to join to itself!"),16;if(!m&&Cr()==e)return w("Main thread "+e+" is attempting to join to itself!"),16;if(i()[e+12>>2]!==e)return w("pthread_join attempted on thread "+e+", which does not point to a valid thread, or does not exist anymore!"),71;if(Atomics.load(u(),e+64>>2))return w("Attempted to join thread "+e+", which was already detached!"),28;for(;;){var t=Atomics.load(u(),e+0>>2);if(1==t){var a=Atomics.load(u(),e+4>>2);return r&&(i()[r>>2]=a),Atomics.store(u(),e+64>>2,1),m?postMessage({cmd:"cleanupThread",thread:e}):le(e),0}0,gr(),m||Wr(),er(e+0,t,m?100:1)}}(e,r)},b:function(e){T=e},fa:function(e){var r=Date.now()/1e3|0;return e&&(i()[e>>2]=r),r}},br=(function(){var r={a:wr};function n(r,n){var t,a=r.exports;if(e.asm=a,J=e.asm.la,t=e.asm.ha,Y.unshift(t),pe.tlsInitFunctions.push(e.asm.ka),A=n,!m){var o=pe.unusedWorkers.length;pe.unusedWorkers.forEach((function(r){pe.loadWasmModuleToWorker(r,(function(){--o||function(r){if(re--,e.monitorRunDependencies&&e.monitorRunDependencies(re),0==re&&(null!==ne&&(clearInterval(ne),ne=null),te)){var n=te;te=null,n()}}()}))}))}}function t(e){n(e.instance,e.module)}function a(e){return(b||"function"!=typeof fetch?Promise.resolve().then((function(){return ue(ie)})):fetch(ie,{credentials:"same-origin"}).then((function(e){if(!e.ok)throw"failed to load wasm binary file at '"+ie+"'";return e.arrayBuffer()})).catch((function(){return ue(ie)}))).then((function(e){return WebAssembly.instantiate(e,r)})).then(e,(function(e){w("failed to asynchronously prepare wasm: "+e),ae(e)}))}if(m||(L(!m,"addRunDependency cannot be used in a pthread worker"),re++,e.monitorRunDependencies&&e.monitorRunDependencies(re)),e.instantiateWasm)try{return e.instantiateWasm(r,n)}catch(e){return w("Module.instantiateWasm callback failed with error: "+e),!1}(b||"function"!=typeof WebAssembly.instantiateStreaming||oe(ie)||"function"!=typeof fetch?a(t):fetch(ie,{credentials:"same-origin"}).then((function(e){return WebAssembly.instantiateStreaming(e,r).then(t,(function(e){return w("wasm streaming compile failed: "+e),w("falling back to ArrayBuffer instantiation"),a(t)}))}))).catch(f)}(),e.___wasm_call_ctors=function(){return(e.___wasm_call_ctors=e.asm.ha).apply(null,arguments)},e._malloc=function(){return(br=e._malloc=e.asm.ia).apply(null,arguments)}),Tr=e._free=function(){return(Tr=e._free=e.asm.ja).apply(null,arguments)},kr=(e._emscripten_tls_init=function(){return(e._emscripten_tls_init=e.asm.ka).apply(null,arguments)},e.___getTypeName=function(){return(kr=e.___getTypeName=e.asm.ma).apply(null,arguments)}),Ar=(e.___embind_register_native_and_builtin_types=function(){return(e.___embind_register_native_and_builtin_types=e.asm.na).apply(null,arguments)},e._emscripten_current_thread_process_queued_calls=function(){return(e._emscripten_current_thread_process_queued_calls=e.asm.oa).apply(null,arguments)},e._emscripten_register_main_browser_thread_id=function(){return(Ar=e._emscripten_register_main_browser_thread_id=e.asm.pa).apply(null,arguments)}),Cr=e._emscripten_main_browser_thread_id=function(){return(Cr=e._emscripten_main_browser_thread_id=e.asm.qa).apply(null,arguments)},xr=e.__emscripten_do_dispatch_to_thread=function(){return(xr=e.__emscripten_do_dispatch_to_thread=e.asm.ra).apply(null,arguments)},Er=e._emscripten_sync_run_in_main_thread_4=function(){return(Er=e._emscripten_sync_run_in_main_thread_4=e.asm.sa).apply(null,arguments)},Wr=e._emscripten_main_thread_process_queued_calls=function(){return(Wr=e._emscripten_main_thread_process_queued_calls=e.asm.ta).apply(null,arguments)},Sr=e._emscripten_run_in_main_runtime_thread_js=function(){return(Sr=e._emscripten_run_in_main_runtime_thread_js=e.asm.ua).apply(null,arguments)},Pr=e.__emscripten_call_on_thread=function(){return(Pr=e.__emscripten_call_on_thread=e.asm.va).apply(null,arguments)},jr=e.__emscripten_thread_init=function(){return(jr=e.__emscripten_thread_init=e.asm.wa).apply(null,arguments)},Ir=e._emscripten_get_global_libc=function(){return(Ir=e._emscripten_get_global_libc=e.asm.xa).apply(null,arguments)},Fr=e._pthread_self=function(){return(Fr=e._pthread_self=e.asm.ya).apply(null,arguments)},Rr=e.___pthread_tsd_run_dtors=function(){return(Rr=e.___pthread_tsd_run_dtors=e.asm.za).apply(null,arguments)},Hr=e.stackSave=function(){return(Hr=e.stackSave=e.asm.Aa).apply(null,arguments)},Lr=e.stackRestore=function(){return(Lr=e.stackRestore=e.asm.Ba).apply(null,arguments)},Mr=e.stackAlloc=function(){return(Mr=e.stackAlloc=e.asm.Ca).apply(null,arguments)},Or=e._emscripten_stack_set_limits=function(){return(Or=e._emscripten_stack_set_limits=e.asm.Da).apply(null,arguments)},Dr=e._setThrew=function(){return(Dr=e._setThrew=e.asm.Ea).apply(null,arguments)},Br=e._memalign=function(){return(Br=e._memalign=e.asm.Fa).apply(null,arguments)},Ur=(e.dynCall_jiiiiiiiii=function(){return(e.dynCall_jiiiiiiiii=e.asm.Ga).apply(null,arguments)},e.dynCall_iiiijj=function(){return(Ur=e.dynCall_iiiijj=e.asm.Ha).apply(null,arguments)}),Gr=e.dynCall_ijiii=function(){return(Gr=e.dynCall_ijiii=e.asm.Ia).apply(null,arguments)},Nr=(e.dynCall_jiji=function(){return(e.dynCall_jiji=e.asm.Ja).apply(null,arguments)},e.dynCall_jiiiiiiii=function(){return(e.dynCall_jiiiiiiii=e.asm.Ka).apply(null,arguments)},e.dynCall_jiiiiii=function(){return(e.dynCall_jiiiiii=e.asm.La).apply(null,arguments)},e.dynCall_jiiiii=function(){return(e.dynCall_jiiiii=e.asm.Ma).apply(null,arguments)},e.dynCall_iiijii=function(){return(e.dynCall_iiijii=e.asm.Na).apply(null,arguments)},e.__emscripten_allow_main_runtime_queued_calls=600232),qr=e.__emscripten_main_thread_futex=896716;function Vr(e){this.name="ExitStatus",this.message="Program terminated with exit("+e+")",this.status=e}function zr(r){if(r=r||h,!(re>0)){if(m)return c(e),ee(),void postMessage({cmd:"loaded"});!function(){if(!m){if(e.preRun)for("function"==typeof e.preRun&&(e.preRun=[e.preRun]);e.preRun.length;)r=e.preRun.shift(),K.unshift(r);var r;ce(K)}}(),re>0||(e.setStatus?(e.setStatus("Running..."),setTimeout((function(){setTimeout((function(){e.setStatus("")}),1),n()}),1)):n())}function n(){yr||(yr=!0,e.calledRun=!0,H||(ee(),c(e),e.onRuntimeInitialized&&e.onRuntimeInitialized(),function(){if(!m){if(e.postRun)for("function"==typeof e.postRun&&(e.postRun=[e.postRun]);e.postRun.length;)r=e.postRun.shift(),$.unshift(r);var r;ce($)}}()))}}if(e.PThread=pe,e.PThread=pe,e.wasmMemory=k,e.ExitStatus=Vr,te=function e(){yr||zr(),yr||(te=e)},e.run=zr,e.preInit)for("function"==typeof e.preInit&&(e.preInit=[e.preInit]);e.preInit.length>0;)e.preInit.pop()();return m&&(C=!1,pe.initWorker()),zr(),e.ready})},211:(e,r,n)=>{e.exports=n.p+"2856fa769b90a4c3db6f.wasm"}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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aUJBLElBQVUsRUFBSzFoQixFQUFNLFdBQWMsRUFBUWtFLElBQWE0RCxLQUFjNUcsRUFBb0JsQixHQUFXQSxFQUFNLHNCQUF5QkEsRUFBTSx1QkFBai9yRSxXQUFtQixJQUFHK0IsRUFBSCxDQUFpQyxHQUFHL0IsRUFBTSxRQUEyRixJQUFqRCxtQkFBbkJBLEVBQU0sVUFBd0JBLEVBQU0sUUFBWSxDQUFDQSxFQUFNLFVBQW1CQSxFQUFNLFFBQVkwRixRQUEyTXVPLEVBQXRMalUsRUFBTSxRQUFZdUosUUFBd0sxQixFQUFjaWtCLFFBQVE3WCxHQUFoRCxJQUFzQkEsRUFBMUpsTSxHQUFxQkYsSUFBc3hyRXVsQixNQUF1a0IsR0FBcjFDcHRCLEVBQU0sUUFBWXVLLEdBQVF2SyxFQUFNLFFBQVl1SyxHQUFRdkssRUFBTSxXQUFlRSxFQUFXRixFQUFNLFdBQWVxTyxHQUF1Sm5HLEdBQXNCLFNBQVNtbEIsSUFBZ0IzTCxJQUFVdUwsS0FBVXZMLEtBQVV4WixHQUFzQm1sQixJQUFpbEJydEIsRUFBTSxJQUFRaXRCLEdBQXNaanRCLEVBQU0sUUFBMkYsSUFBakQsbUJBQW5CQSxFQUFNLFVBQXdCQSxFQUFNLFFBQVksQ0FBQ0EsRUFBTSxVQUFtQkEsRUFBTSxRQUFZMEYsT0FBTyxHQUFHMUYsRUFBTSxRQUFZNkwsS0FBbEI3TCxHQUdseS9FLE9BSGcwL0UrQixJQUF3QitCLEdBQWMsRUFBTXlHLEdBQVFtQixjQUFhdWhCLEtBRzEzL0VqdEIsRUFBT3N0QixTIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc3F1b29zaC8uLi9jb2RlY3MvYXZpZi9lbmMvYXZpZl9lbmNfbXQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXG52YXIgTW9kdWxlID0gKGZ1bmN0aW9uKCkge1xuICB2YXIgX3NjcmlwdERpciA9IGltcG9ydC5tZXRhLnVybDtcbiAgXG4gIHJldHVybiAoXG5mdW5jdGlvbihNb2R1bGUpIHtcbiAgTW9kdWxlID0gTW9kdWxlIHx8IHt9O1xuXG5mdW5jdGlvbiBHUk9XQUJMRV9IRUFQX0k4KCl7aWYod2FzbU1lbW9yeS5idWZmZXIhPWJ1ZmZlcil7dXBkYXRlR2xvYmFsQnVmZmVyQW5kVmlld3Mod2FzbU1lbW9yeS5idWZmZXIpfXJldHVybiBIRUFQOH1mdW5jdGlvbiBHUk9XQUJMRV9IRUFQX1U4KCl7aWYod2FzbU1lbW9yeS5idWZmZXIhPWJ1ZmZlcil7dXBkYXRlR2xvYmFsQnVmZmVyQW5kVmlld3Mod2FzbU1lbW9yeS5idWZmZXIpfXJldHVybiBIRUFQVTh9ZnVuY3Rpb24gR1JPV0FCTEVfSEVBUF9JMTYoKXtpZih3YXNtTWVtb3J5LmJ1ZmZlciE9YnVmZmVyKXt1cGRhdGVHbG9iYWxCdWZmZXJBbmRWaWV3cyh3YXNtTWVtb3J5LmJ1ZmZlcil9cmV0dXJuIEhFQVAxNn1mdW5jdGlvbiBHUk9XQUJMRV9IRUFQX1UxNigpe2lmKHdhc21NZW1vcnkuYnVmZmVyIT1idWZmZXIpe3VwZGF0ZUdsb2JhbEJ1ZmZlckFuZFZpZXdzKHdhc21NZW1vcnkuYnVmZmVyKX1yZXR1cm4gSEVBUFUxNn1mdW5jdGlvbiBHUk9XQUJMRV9IRUFQX0kzMigpe2lmKHdhc21NZW1vcnkuYnVmZmVyIT1idWZmZXIpe3VwZGF0ZUdsb2JhbEJ1ZmZlckFuZFZpZXdzKHdhc21NZW1vcnkuYnVmZmVyKX1yZXR1cm4gSEVBUDMyfWZ1bmN0aW9uIEdST1dBQkxFX0hFQVBfVTMyKCl7aWYod2FzbU1lbW9yeS5idWZmZXIhPWJ1ZmZlcil7dXBkYXRlR2xvYmFsQnVmZmVyQW5kVmlld3Mod2FzbU1lbW9yeS5idWZmZXIpfXJldHVybiBIRUFQVTMyfWZ1bmN0aW9uIEdST1dBQkxFX0hFQVBfRjMyKCl7aWYod2FzbU1lbW9yeS5idWZmZXIhPWJ1ZmZlcil7dXBkYXRlR2xvYmFsQnVmZmVyQW5kVmlld3Mod2FzbU1lbW9yeS5idWZmZXIpfXJldHVybiBIRUFQRjMyfWZ1bmN0aW9uIEdST1dBQkxFX0hFQVBfRjY0KCl7aWYod2FzbU1lbW9yeS5idWZmZXIhPWJ1ZmZlcil7dXBkYXRlR2xvYmFsQnVmZmVyQW5kVmlld3Mod2FzbU1lbW9yeS5idWZmZXIpfXJldHVybiBIRUFQRjY0fXZhciBNb2R1bGU9dHlwZW9mIE1vZHVsZSE9PVwidW5kZWZpbmVkXCI/TW9kdWxlOnt9O3ZhciByZWFkeVByb21pc2VSZXNvbHZlLHJlYWR5UHJvbWlzZVJlamVjdDtNb2R1bGVbXCJyZWFkeVwiXT1uZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLHJlamVjdCl7cmVhZHlQcm9taXNlUmVzb2x2ZT1yZXNvbHZlO3JlYWR5UHJvbWlzZVJlamVjdD1yZWplY3R9KTt2YXIgbW9kdWxlT3ZlcnJpZGVzPXt9O3ZhciBrZXk7Zm9yKGtleSBpbiBNb2R1bGUpe2lmKE1vZHVsZS5oYXNPd25Qcm9wZXJ0eShrZXkpKXttb2R1bGVPdmVycmlkZXNba2V5XT1Nb2R1bGVba2V5XX19dmFyIGFyZ3VtZW50c189W107dmFyIHRoaXNQcm9ncmFtPVwiLi90aGlzLnByb2dyYW1cIjt2YXIgcXVpdF89ZnVuY3Rpb24oc3RhdHVzLHRvVGhyb3cpe3Rocm93IHRvVGhyb3d9O3ZhciBFTlZJUk9OTUVOVF9JU19XRUI9ZmFsc2U7dmFyIEVOVklST05NRU5UX0lTX1dPUktFUj10cnVlO3ZhciBFTlZJUk9OTUVOVF9JU19OT0RFPWZhbHNlO3ZhciBFTlZJUk9OTUVOVF9JU19QVEhSRUFEPU1vZHVsZVtcIkVOVklST05NRU5UX0lTX1BUSFJFQURcIl18fGZhbHNlO3ZhciBzY3JpcHREaXJlY3Rvcnk9XCJcIjtmdW5jdGlvbiBsb2NhdGVGaWxlKHBhdGgpe2lmKE1vZHVsZVtcImxvY2F0ZUZpbGVcIl0pe3JldHVybiBNb2R1bGVbXCJsb2NhdGVGaWxlXCJdKHBhdGgsc2NyaXB0RGlyZWN0b3J5KX1yZXR1cm4gc2NyaXB0RGlyZWN0b3J5K3BhdGh9dmFyIHJlYWRfLHJlYWRBc3luYyxyZWFkQmluYXJ5LHNldFdpbmRvd1RpdGxlO2lmKEVOVklST05NRU5UX0lTX1dFQnx8RU5WSVJPTk1FTlRfSVNfV09SS0VSKXtpZihFTlZJUk9OTUVOVF9JU19XT1JLRVIpe3NjcmlwdERpcmVjdG9yeT1zZWxmLmxvY2F0aW9uLmhyZWZ9ZWxzZSBpZih0eXBlb2YgZG9jdW1lbnQhPT1cInVuZGVmaW5lZFwiJiZkb2N1bWVudC5jdXJyZW50U2NyaXB0KXtzY3JpcHREaXJlY3Rvcnk9ZG9jdW1lbnQuY3VycmVudFNjcmlwdC5zcmN9aWYoX3NjcmlwdERpcil7c2NyaXB0RGlyZWN0b3J5PV9zY3JpcHREaXJ9aWYoc2NyaXB0RGlyZWN0b3J5LmluZGV4T2YoXCJibG9iOlwiKSE9PTApe3NjcmlwdERpcmVjdG9yeT1zY3JpcHREaXJlY3Rvcnkuc3Vic3RyKDAsc2NyaXB0RGlyZWN0b3J5Lmxhc3RJbmRleE9mKFwiL1wiKSsxKX1lbHNle3NjcmlwdERpcmVjdG9yeT1cIlwifXtyZWFkXz1mdW5jdGlvbih1cmwpe3ZhciB4aHI9bmV3IFhNTEh0dHBSZXF1ZXN0O3hoci5vcGVuKFwiR0VUXCIsdXJsLGZhbHNlKTt4aHIuc2VuZChudWxsKTtyZXR1cm4geGhyLnJlc3BvbnNlVGV4dH07aWYoRU5WSVJPTk1FTlRfSVNfV09SS0VSKXtyZWFkQmluYXJ5PWZ1bmN0aW9uKHVybCl7dmFyIHhocj1uZXcgWE1MSHR0cFJlcXVlc3Q7eGhyLm9wZW4oXCJHRVRcIix1cmwsZmFsc2UpO3hoci5yZXNwb25zZVR5cGU9XCJhcnJheWJ1ZmZlclwiO3hoci5zZW5kKG51bGwpO3JldHVybiBuZXcgVWludDhBcnJheSh4aHIucmVzcG9uc2UpfX1yZWFkQXN5bmM9ZnVuY3Rpb24odXJsLG9ubG9hZCxvbmVycm9yKXt2YXIgeGhyPW5ldyBYTUxIdHRwUmVxdWVzdDt4aHIub3BlbihcIkdFVFwiLHVybCx0cnVlKTt4aHIucmVzcG9uc2VUeXBlPVwiYXJyYXlidWZmZXJcIjt4aHIub25sb2FkPWZ1bmN0aW9uKCl7aWYoeGhyLnN0YXR1cz09MjAwfHx4aHIuc3RhdHVzPT0wJiZ4aHIucmVzcG9uc2Upe29ubG9hZCh4aHIucmVzcG9uc2UpO3JldHVybn1vbmVycm9yKCl9O3hoci5vbmVycm9yPW9uZXJyb3I7eGhyLnNlbmQobnVsbCl9fXNldFdpbmRvd1RpdGxlPWZ1bmN0aW9uKHRpdGxlKXtkb2N1bWVudC50aXRsZT10aXRsZX19ZWxzZXt9dmFyIG91dD1Nb2R1bGVbXCJwcmludFwiXXx8Y29uc29sZS5sb2cuYmluZChjb25zb2xlKTt2YXIgZXJyPU1vZHVsZVtcInByaW50RXJyXCJdfHxjb25zb2xlLndhcm4uYmluZChjb25zb2xlKTtmb3Ioa2V5IGluIG1vZHVsZU92ZXJyaWRlcyl7aWYobW9kdWxlT3ZlcnJpZGVzLmhhc093blByb3BlcnR5KGtleSkpe01vZHVsZVtrZXldPW1vZHVsZU92ZXJyaWRlc1trZXldfX1tb2R1bGVPdmVycmlkZXM9bnVsbDtpZihNb2R1bGVbXCJhcmd1bWVudHNcIl0pYXJndW1lbnRzXz1Nb2R1bGVbXCJhcmd1bWVudHNcIl07aWYoTW9kdWxlW1widGhpc1Byb2dyYW1cIl0pdGhpc1Byb2dyYW09TW9kdWxlW1widGhpc1Byb2dyYW1cIl07aWYoTW9kdWxlW1wicXVpdFwiXSlxdWl0Xz1Nb2R1bGVbXCJxdWl0XCJdO2Z1bmN0aW9uIHdhcm5PbmNlKHRleHQpe2lmKCF3YXJuT25jZS5zaG93bil3YXJuT25jZS5zaG93bj17fTtpZighd2Fybk9uY2Uuc2hvd25bdGV4dF0pe3dhcm5PbmNlLnNob3duW3RleHRdPTE7ZXJyKHRleHQpfX12YXIgdGVtcFJldDA9MDt2YXIgc2V0VGVtcFJldDA9ZnVuY3Rpb24odmFsdWUpe3RlbXBSZXQwPXZhbHVlfTt2YXIgZ2V0VGVtcFJldDA9ZnVuY3Rpb24oKXtyZXR1cm4gdGVtcFJldDB9O3ZhciBBdG9taWNzX2xvYWQ9QXRvbWljcy5sb2FkO3ZhciBBdG9taWNzX3N0b3JlPUF0b21pY3Muc3RvcmU7dmFyIEF0b21pY3NfY29tcGFyZUV4Y2hhbmdlPUF0b21pY3MuY29tcGFyZUV4Y2hhbmdlO3ZhciB3YXNtQmluYXJ5O2lmKE1vZHVsZVtcIndhc21CaW5hcnlcIl0pd2FzbUJpbmFyeT1Nb2R1bGVbXCJ3YXNtQmluYXJ5XCJdO3ZhciBub0V4aXRSdW50aW1lPU1vZHVsZVtcIm5vRXhpdFJ1bnRpbWVcIl18fHRydWU7aWYodHlwZW9mIFdlYkFzc2VtYmx5IT09XCJvYmplY3RcIil7YWJvcnQoXCJubyBuYXRpdmUgd2FzbSBzdXBwb3J0IGRldGVjdGVkXCIpfXZhciB3YXNtTWVtb3J5O3ZhciB3YXNtTW9kdWxlO3ZhciBBQk9SVD1mYWxzZTt2YXIgRVhJVFNUQVRVUztmdW5jdGlvbiBhc3NlcnQoY29uZGl0aW9uLHRleHQpe2lmKCFjb25kaXRpb24pe2Fib3J0KFwiQXNzZXJ0aW9uIGZhaWxlZDogXCIrdGV4dCl9fWZ1bmN0aW9uIFVURjhBcnJheVRvU3RyaW5nKGhlYXAsaWR4LG1heEJ5dGVzVG9SZWFkKXt2YXIgZW5kSWR4PWlkeCttYXhCeXRlc1RvUmVhZDt2YXIgc3RyPVwiXCI7d2hpbGUoIShpZHg+PWVuZElkeCkpe3ZhciB1MD1oZWFwW2lkeCsrXTtpZighdTApcmV0dXJuIHN0cjtpZighKHUwJjEyOCkpe3N0cis9U3RyaW5nLmZyb21DaGFyQ29kZSh1MCk7Y29udGludWV9dmFyIHUxPWhlYXBbaWR4KytdJjYzO2lmKCh1MCYyMjQpPT0xOTIpe3N0cis9U3RyaW5nLmZyb21DaGFyQ29kZSgodTAmMzEpPDw2fHUxKTtjb250aW51ZX12YXIgdTI9aGVhcFtpZHgrK10mNjM7aWYoKHUwJjI0MCk9PTIyNCl7dTA9KHUwJjE1KTw8MTJ8dTE8PDZ8dTJ9ZWxzZXt1MD0odTAmNyk8PDE4fHUxPDwxMnx1Mjw8NnxoZWFwW2lkeCsrXSY2M31pZih1MDw2NTUzNil7c3RyKz1TdHJpbmcuZnJvbUNoYXJDb2RlKHUwKX1lbHNle3ZhciBjaD11MC02NTUzNjtzdHIrPVN0cmluZy5mcm9tQ2hhckNvZGUoNTUyOTZ8Y2g+PjEwLDU2MzIwfGNoJjEwMjMpfX1yZXR1cm4gc3RyfWZ1bmN0aW9uIFVURjhUb1N0cmluZyhwdHIsbWF4Qnl0ZXNUb1JlYWQpe3JldHVybiBwdHI/VVRGOEFycmF5VG9TdHJpbmcoR1JPV0FCTEVfSEVBUF9VOCgpLHB0cixtYXhCeXRlc1RvUmVhZCk6XCJcIn1mdW5jdGlvbiBzdHJpbmdUb1VURjhBcnJheShzdHIsaGVhcCxvdXRJZHgsbWF4Qnl0ZXNUb1dyaXRlKXtpZighKG1heEJ5dGVzVG9Xcml0ZT4wKSlyZXR1cm4gMDt2YXIgc3RhcnRJZHg9b3V0SWR4O3ZhciBlbmRJZHg9b3V0SWR4K21heEJ5dGVzVG9Xcml0ZS0xO2Zvcih2YXIgaT0wO2k8c3RyLmxlbmd0aDsrK2kpe3ZhciB1PXN0ci5jaGFyQ29kZUF0KGkpO2lmKHU+PTU1Mjk2JiZ1PD01NzM0Myl7dmFyIHUxPXN0ci5jaGFyQ29kZUF0KCsraSk7dT02NTUzNisoKHUmMTAyMyk8PDEwKXx1MSYxMDIzfWlmKHU8PTEyNyl7aWYob3V0SWR4Pj1lbmRJZHgpYnJlYWs7aGVhcFtvdXRJZHgrK109dX1lbHNlIGlmKHU8PTIwNDcpe2lmKG91dElkeCsxPj1lbmRJZHgpYnJlYWs7aGVhcFtvdXRJZHgrK109MTkyfHU+PjY7aGVhcFtvdXRJZHgrK109MTI4fHUmNjN9ZWxzZSBpZih1PD02NTUzNSl7aWYob3V0SWR4KzI+PWVuZElkeClicmVhaztoZWFwW291dElkeCsrXT0yMjR8dT4+MTI7aGVhcFtvdXRJZHgrK109MTI4fHU+PjYmNjM7aGVhcFtvdXRJZHgrK109MTI4fHUmNjN9ZWxzZXtpZihvdXRJZHgrMz49ZW5kSWR4KWJyZWFrO2hlYXBbb3V0SWR4KytdPTI0MHx1Pj4xODtoZWFwW291dElkeCsrXT0xMjh8dT4+MTImNjM7aGVhcFtvdXRJZHgrK109MTI4fHU+PjYmNjM7aGVhcFtvdXRJZHgrK109MTI4fHUmNjN9fWhlYXBbb3V0SWR4XT0wO3JldHVybiBvdXRJZHgtc3RhcnRJZHh9ZnVuY3Rpb24gc3RyaW5nVG9VVEY4KHN0cixvdXRQdHIsbWF4Qnl0ZXNUb1dyaXRlKXtyZXR1cm4gc3RyaW5nVG9VVEY4QXJyYXkoc3RyLEdST1dBQkxFX0hFQVBfVTgoKSxvdXRQdHIsbWF4Qnl0ZXNUb1dyaXRlKX1mdW5jdGlvbiBsZW5ndGhCeXRlc1VURjgoc3RyKXt2YXIgbGVuPTA7Zm9yKHZhciBpPTA7aTxzdHIubGVuZ3RoOysraSl7dmFyIHU9c3RyLmNoYXJDb2RlQXQoaSk7aWYodT49NTUyOTYmJnU8PTU3MzQzKXU9NjU1MzYrKCh1JjEwMjMpPDwxMCl8c3RyLmNoYXJDb2RlQXQoKytpKSYxMDIzO2lmKHU8PTEyNykrK2xlbjtlbHNlIGlmKHU8PTIwNDcpbGVuKz0yO2Vsc2UgaWYodTw9NjU1MzUpbGVuKz0zO2Vsc2UgbGVuKz00fXJldHVybiBsZW59ZnVuY3Rpb24gVVRGMTZUb1N0cmluZyhwdHIsbWF4Qnl0ZXNUb1JlYWQpe3ZhciBzdHI9XCJcIjtmb3IodmFyIGk9MDshKGk+PW1heEJ5dGVzVG9SZWFkLzIpOysraSl7dmFyIGNvZGVVbml0PUdST1dBQkxFX0hFQVBfSTE2KClbcHRyK2kqMj4+MV07aWYoY29kZVVuaXQ9PTApYnJlYWs7c3RyKz1TdHJpbmcuZnJvbUNoYXJDb2RlKGNvZGVVbml0KX1yZXR1cm4gc3RyfWZ1bmN0aW9uIHN0cmluZ1RvVVRGMTYoc3RyLG91dFB0cixtYXhCeXRlc1RvV3JpdGUpe2lmKG1heEJ5dGVzVG9Xcml0ZT09PXVuZGVmaW5lZCl7bWF4Qnl0ZXNUb1dyaXRlPTIxNDc0ODM2NDd9aWYobWF4Qnl0ZXNUb1dyaXRlPDIpcmV0dXJuIDA7bWF4Qnl0ZXNUb1dyaXRlLT0yO3ZhciBzdGFydFB0cj1vdXRQdHI7dmFyIG51bUNoYXJzVG9Xcml0ZT1tYXhCeXRlc1RvV3JpdGU8c3RyLmxlbmd0aCoyP21heEJ5dGVzVG9Xcml0ZS8yOnN0ci5sZW5ndGg7Zm9yKHZhciBpPTA7aTxudW1DaGFyc1RvV3JpdGU7KytpKXt2YXIgY29kZVVuaXQ9c3RyLmNoYXJDb2RlQXQoaSk7R1JPV0FCTEVfSEVBUF9JMTYoKVtvdXRQdHI+PjFdPWNvZGVVbml0O291dFB0cis9Mn1HUk9XQUJMRV9IRUFQX0kxNigpW291dFB0cj4+MV09MDtyZXR1cm4gb3V0UHRyLXN0YXJ0UHRyfWZ1bmN0aW9uIGxlbmd0aEJ5dGVzVVRGMTYoc3RyKXtyZXR1cm4gc3RyLmxlbmd0aCoyfWZ1bmN0aW9uIFVURjMyVG9TdHJpbmcocHRyLG1heEJ5dGVzVG9SZWFkKXt2YXIgaT0wO3ZhciBzdHI9XCJcIjt3aGlsZSghKGk+PW1heEJ5dGVzVG9SZWFkLzQpKXt2YXIgdXRmMzI9R1JPV0FCTEVfSEVBUF9JMzIoKVtwdHIraSo0Pj4yXTtpZih1dGYzMj09MClicmVhazsrK2k7aWYodXRmMzI+PTY1NTM2KXt2YXIgY2g9dXRmMzItNjU1MzY7c3RyKz1TdHJpbmcuZnJvbUNoYXJDb2RlKDU1Mjk2fGNoPj4xMCw1NjMyMHxjaCYxMDIzKX1lbHNle3N0cis9U3RyaW5nLmZyb21DaGFyQ29kZSh1dGYzMil9fXJldHVybiBzdHJ9ZnVuY3Rpb24gc3RyaW5nVG9VVEYzMihzdHIsb3V0UHRyLG1heEJ5dGVzVG9Xcml0ZSl7aWYobWF4Qnl0ZXNUb1dyaXRlPT09dW5kZWZpbmVkKXttYXhCeXRlc1RvV3JpdGU9MjE0NzQ4MzY0N31pZihtYXhCeXRlc1RvV3JpdGU8NClyZXR1cm4gMDt2YXIgc3RhcnRQdHI9b3V0UHRyO3ZhciBlbmRQdHI9c3RhcnRQdHIrbWF4Qnl0ZXNUb1dyaXRlLTQ7Zm9yKHZhciBpPTA7aTxzdHIubGVuZ3RoOysraSl7dmFyIGNvZGVVbml0PXN0ci5jaGFyQ29kZUF0KGkpO2lmKGNvZGVVbml0Pj01NTI5NiYmY29kZVVuaXQ8PTU3MzQzKXt2YXIgdHJhaWxTdXJyb2dhdGU9c3RyLmNoYXJDb2RlQXQoKytpKTtjb2RlVW5pdD02NTUzNisoKGNvZGVVbml0JjEwMjMpPDwxMCl8dHJhaWxTdXJyb2dhdGUmMTAyM31HUk9XQUJMRV9IRUFQX0kzMigpW291dFB0cj4+Ml09Y29kZVVuaXQ7b3V0UHRyKz00O2lmKG91dFB0cis0PmVuZFB0cilicmVha31HUk9XQUJMRV9IRUFQX0kzMigpW291dFB0cj4+Ml09MDtyZXR1cm4gb3V0UHRyLXN0YXJ0UHRyfWZ1bmN0aW9uIGxlbmd0aEJ5dGVzVVRGMzIoc3RyKXt2YXIgbGVuPTA7Zm9yKHZhciBpPTA7aTxzdHIubGVuZ3RoOysraSl7dmFyIGNvZGVVbml0PXN0ci5jaGFyQ29kZUF0KGkpO2lmKGNvZGVVbml0Pj01NTI5NiYmY29kZVVuaXQ8PTU3MzQzKSsraTtsZW4rPTR9cmV0dXJuIGxlbn1mdW5jdGlvbiBhbGlnblVwKHgsbXVsdGlwbGUpe2lmKHglbXVsdGlwbGU+MCl7eCs9bXVsdGlwbGUteCVtdWx0aXBsZX1yZXR1cm4geH12YXIgYnVmZmVyLEhFQVA4LEhFQVBVOCxIRUFQMTYsSEVBUFUxNixIRUFQMzIsSEVBUFUzMixIRUFQRjMyLEhFQVBGNjQ7aWYoRU5WSVJPTk1FTlRfSVNfUFRIUkVBRCl7YnVmZmVyPU1vZHVsZVtcImJ1ZmZlclwiXX1mdW5jdGlvbiB1cGRhdGVHbG9iYWxCdWZmZXJBbmRWaWV3cyhidWYpe2J1ZmZlcj1idWY7TW9kdWxlW1wiSEVBUDhcIl09SEVBUDg9bmV3IEludDhBcnJheShidWYpO01vZHVsZVtcIkhFQVAxNlwiXT1IRUFQMTY9bmV3IEludDE2QXJyYXkoYnVmKTtNb2R1bGVbXCJIRUFQMzJcIl09SEVBUDMyPW5ldyBJbnQzMkFycmF5KGJ1Zik7TW9kdWxlW1wiSEVBUFU4XCJdPUhFQVBVOD1uZXcgVWludDhBcnJheShidWYpO01vZHVsZVtcIkhFQVBVMTZcIl09SEVBUFUxNj1uZXcgVWludDE2QXJyYXkoYnVmKTtNb2R1bGVbXCJIRUFQVTMyXCJdPUhFQVBVMzI9bmV3IFVpbnQzMkFycmF5KGJ1Zik7TW9kdWxlW1wiSEVBUEYzMlwiXT1IRUFQRjMyPW5ldyBGbG9hdDMyQXJyYXkoYnVmKTtNb2R1bGVbXCJIRUFQRjY0XCJdPUhFQVBGNjQ9bmV3IEZsb2F0NjRBcnJheShidWYpfXZhciBJTklUSUFMX01FTU9SWT1Nb2R1bGVbXCJJTklUSUFMX01FTU9SWVwiXXx8MTY3NzcyMTY7aWYoRU5WSVJPTk1FTlRfSVNfUFRIUkVBRCl7d2FzbU1lbW9yeT1Nb2R1bGVbXCJ3YXNtTWVtb3J5XCJdO2J1ZmZlcj1Nb2R1bGVbXCJidWZmZXJcIl19ZWxzZXtpZihNb2R1bGVbXCJ3YXNtTWVtb3J5XCJdKXt3YXNtTWVtb3J5PU1vZHVsZVtcIndhc21NZW1vcnlcIl19ZWxzZXt3YXNtTWVtb3J5PW5ldyBXZWJBc3NlbWJseS5NZW1vcnkoe1wiaW5pdGlhbFwiOklOSVRJQUxfTUVNT1JZLzY1NTM2LFwibWF4aW11bVwiOjIxNDc0ODM2NDgvNjU1MzYsXCJzaGFyZWRcIjp0cnVlfSk7aWYoISh3YXNtTWVtb3J5LmJ1ZmZlciBpbnN0YW5jZW9mIFNoYXJlZEFycmF5QnVmZmVyKSl7ZXJyKFwicmVxdWVzdGVkIGEgc2hhcmVkIFdlYkFzc2VtYmx5Lk1lbW9yeSBidXQgdGhlIHJldHVybmVkIGJ1ZmZlciBpcyBub3QgYSBTaGFyZWRBcnJheUJ1ZmZlciwgaW5kaWNhdGluZyB0aGF0IHdoaWxlIHRoZSBicm93c2VyIGhhcyBTaGFyZWRBcnJheUJ1ZmZlciBpdCBkb2VzIG5vdCBoYXZlIFdlYkFzc2VtYmx5IHRocmVhZHMgc3VwcG9ydCAtIHlvdSBtYXkgbmVlZCB0byBzZXQgYSBmbGFnXCIpO2lmKEVOVklST05NRU5UX0lTX05PREUpe2NvbnNvbGUubG9nKFwiKG9uIG5vZGUgeW91IG1heSBuZWVkOiAtLWV4cGVyaW1lbnRhbC13YXNtLXRocmVhZHMgLS1leHBlcmltZW50YWwtd2FzbS1idWxrLW1lbW9yeSBhbmQgYWxzbyB1c2UgYSByZWNlbnQgdmVyc2lvbilcIil9dGhyb3cgRXJyb3IoXCJiYWQgbWVtb3J5XCIpfX19aWYod2FzbU1lbW9yeSl7YnVmZmVyPXdhc21NZW1vcnkuYnVmZmVyfUlOSVRJQUxfTUVNT1JZPWJ1ZmZlci5ieXRlTGVuZ3RoO3VwZGF0ZUdsb2JhbEJ1ZmZlckFuZFZpZXdzKGJ1ZmZlcik7dmFyIHdhc21UYWJsZTt2YXIgX19BVFBSRVJVTl9fPVtdO3ZhciBfX0FUSU5JVF9fPVtdO3ZhciBfX0FURVhJVF9fPVtdO3ZhciBfX0FUUE9TVFJVTl9fPVtdO3ZhciBydW50aW1lSW5pdGlhbGl6ZWQ9ZmFsc2U7dmFyIHJ1bnRpbWVFeGl0ZWQ9ZmFsc2U7ZnVuY3Rpb24gcHJlUnVuKCl7aWYoRU5WSVJPTk1FTlRfSVNfUFRIUkVBRClyZXR1cm47aWYoTW9kdWxlW1wicHJlUnVuXCJdKXtpZih0eXBlb2YgTW9kdWxlW1wicHJlUnVuXCJdPT1cImZ1bmN0aW9uXCIpTW9kdWxlW1wicHJlUnVuXCJdPVtNb2R1bGVbXCJwcmVSdW5cIl1dO3doaWxlKE1vZHVsZVtcInByZVJ1blwiXS5sZW5ndGgpe2FkZE9uUHJlUnVuKE1vZHVsZVtcInByZVJ1blwiXS5zaGlmdCgpKX19Y2FsbFJ1bnRpbWVDYWxsYmFja3MoX19BVFBSRVJVTl9fKX1mdW5jdGlvbiBpbml0UnVudGltZSgpe3J1bnRpbWVJbml0aWFsaXplZD10cnVlO2lmKEVOVklST05NRU5UX0lTX1BUSFJFQUQpcmV0dXJuO2NhbGxSdW50aW1lQ2FsbGJhY2tzKF9fQVRJTklUX18pfWZ1bmN0aW9uIGV4aXRSdW50aW1lKCl7aWYoRU5WSVJPTk1FTlRfSVNfUFRIUkVBRClyZXR1cm47cnVudGltZUV4aXRlZD10cnVlfWZ1bmN0aW9uIHBvc3RSdW4oKXtpZihFTlZJUk9OTUVOVF9JU19QVEhSRUFEKXJldHVybjtpZihNb2R1bGVbXCJwb3N0UnVuXCJdKXtpZih0eXBlb2YgTW9kdWxlW1wicG9zdFJ1blwiXT09XCJmdW5jdGlvblwiKU1vZHVsZVtcInBvc3RSdW5cIl09W01vZHVsZVtcInBvc3RSdW5cIl1dO3doaWxlKE1vZHVsZVtcInBvc3RSdW5cIl0ubGVuZ3RoKXthZGRPblBvc3RSdW4oTW9kdWxlW1wicG9zdFJ1blwiXS5zaGlmdCgpKX19Y2FsbFJ1bnRpbWVDYWxsYmFja3MoX19BVFBPU1RSVU5fXyl9ZnVuY3Rpb24gYWRkT25QcmVSdW4oY2Ipe19fQVRQUkVSVU5fXy51bnNoaWZ0KGNiKX1mdW5jdGlvbiBhZGRPbkluaXQoY2Ipe19fQVRJTklUX18udW5zaGlmdChjYil9ZnVuY3Rpb24gYWRkT25Qb3N0UnVuKGNiKXtfX0FUUE9TVFJVTl9fLnVuc2hpZnQoY2IpfXZhciBydW5EZXBlbmRlbmNpZXM9MDt2YXIgcnVuRGVwZW5kZW5jeVdhdGNoZXI9bnVsbDt2YXIgZGVwZW5kZW5jaWVzRnVsZmlsbGVkPW51bGw7ZnVuY3Rpb24gYWRkUnVuRGVwZW5kZW5jeShpZCl7YXNzZXJ0KCFFTlZJUk9OTUVOVF9JU19QVEhSRUFELFwiYWRkUnVuRGVwZW5kZW5jeSBjYW5ub3QgYmUgdXNlZCBpbiBhIHB0aHJlYWQgd29ya2VyXCIpO3J1bkRlcGVuZGVuY2llcysrO2lmKE1vZHVsZVtcIm1vbml0b3JSdW5EZXBlbmRlbmNpZXNcIl0pe01vZHVsZVtcIm1vbml0b3JSdW5EZXBlbmRlbmNpZXNcIl0ocnVuRGVwZW5kZW5jaWVzKX19ZnVuY3Rpb24gcmVtb3ZlUnVuRGVwZW5kZW5jeShpZCl7cnVuRGVwZW5kZW5jaWVzLS07aWYoTW9kdWxlW1wibW9uaXRvclJ1bkRlcGVuZGVuY2llc1wiXSl7TW9kdWxlW1wibW9uaXRvclJ1bkRlcGVuZGVuY2llc1wiXShydW5EZXBlbmRlbmNpZXMpfWlmKHJ1bkRlcGVuZGVuY2llcz09MCl7aWYocnVuRGVwZW5kZW5jeVdhdGNoZXIhPT1udWxsKXtjbGVhckludGVydmFsKHJ1bkRlcGVuZGVuY3lXYXRjaGVyKTtydW5EZXBlbmRlbmN5V2F0Y2hlcj1udWxsfWlmKGRlcGVuZGVuY2llc0Z1bGZpbGxlZCl7dmFyIGNhbGxiYWNrPWRlcGVuZGVuY2llc0Z1bGZpbGxlZDtkZXBlbmRlbmNpZXNGdWxmaWxsZWQ9bnVsbDtjYWxsYmFjaygpfX19TW9kdWxlW1wicHJlbG9hZGVkSW1hZ2VzXCJdPXt9O01vZHVsZVtcInByZWxvYWRlZEF1ZGlvc1wiXT17fTtmdW5jdGlvbiBhYm9ydCh3aGF0KXtpZihNb2R1bGVbXCJvbkFib3J0XCJdKXtNb2R1bGVbXCJvbkFib3J0XCJdKHdoYXQpfWlmKEVOVklST05NRU5UX0lTX1BUSFJFQUQpY29uc29sZS5lcnJvcihcIlB0aHJlYWQgYWJvcnRpbmcgYXQgXCIrKG5ldyBFcnJvcikuc3RhY2spO3doYXQrPVwiXCI7ZXJyKHdoYXQpO0FCT1JUPXRydWU7RVhJVFNUQVRVUz0xO3doYXQ9XCJhYm9ydChcIit3aGF0K1wiKS4gQnVpbGQgd2l0aCAtcyBBU1NFUlRJT05TPTEgZm9yIG1vcmUgaW5mby5cIjt2YXIgZT1uZXcgV2ViQXNzZW1ibHkuUnVudGltZUVycm9yKHdoYXQpO3JlYWR5UHJvbWlzZVJlamVjdChlKTt0aHJvdyBlfXZhciBkYXRhVVJJUHJlZml4PVwiZGF0YTphcHBsaWNhdGlvbi9vY3RldC1zdHJlYW07YmFzZTY0LFwiO2Z1bmN0aW9uIGlzRGF0YVVSSShmaWxlbmFtZSl7cmV0dXJuIGZpbGVuYW1lLnN0YXJ0c1dpdGgoZGF0YVVSSVByZWZpeCl9aWYoTW9kdWxlW1wibG9jYXRlRmlsZVwiXSl7dmFyIHdhc21CaW5hcnlGaWxlPVwiYXZpZl9lbmNfbXQud2FzbVwiO2lmKCFpc0RhdGFVUkkod2FzbUJpbmFyeUZpbGUpKXt3YXNtQmluYXJ5RmlsZT1sb2NhdGVGaWxlKHdhc21CaW5hcnlGaWxlKX19ZWxzZXt2YXIgd2FzbUJpbmFyeUZpbGU9bmV3IFVSTChcImF2aWZfZW5jX210Lndhc21cIixpbXBvcnQubWV0YS51cmwpLnRvU3RyaW5nKCl9ZnVuY3Rpb24gZ2V0QmluYXJ5KGZpbGUpe3RyeXtpZihmaWxlPT13YXNtQmluYXJ5RmlsZSYmd2FzbUJpbmFyeSl7cmV0dXJuIG5ldyBVaW50OEFycmF5KHdhc21CaW5hcnkpfWlmKHJlYWRCaW5hcnkpe3JldHVybiByZWFkQmluYXJ5KGZpbGUpfWVsc2V7dGhyb3dcImJvdGggYXN5bmMgYW5kIHN5bmMgZmV0Y2hpbmcgb2YgdGhlIHdhc20gZmFpbGVkXCJ9fWNhdGNoKGVycil7YWJvcnQoZXJyKX19ZnVuY3Rpb24gZ2V0QmluYXJ5UHJvbWlzZSgpe2lmKCF3YXNtQmluYXJ5JiYoRU5WSVJPTk1FTlRfSVNfV0VCfHxFTlZJUk9OTUVOVF9JU19XT1JLRVIpKXtpZih0eXBlb2YgZmV0Y2g9PT1cImZ1bmN0aW9uXCIpe3JldHVybiBmZXRjaCh3YXNtQmluYXJ5RmlsZSx7Y3JlZGVudGlhbHM6XCJzYW1lLW9yaWdpblwifSkudGhlbihmdW5jdGlvbihyZXNwb25zZSl7aWYoIXJlc3BvbnNlW1wib2tcIl0pe3Rocm93XCJmYWlsZWQgdG8gbG9hZCB3YXNtIGJpbmFyeSBmaWxlIGF0ICdcIit3YXNtQmluYXJ5RmlsZStcIidcIn1yZXR1cm4gcmVzcG9uc2VbXCJhcnJheUJ1ZmZlclwiXSgpfSkuY2F0Y2goZnVuY3Rpb24oKXtyZXR1cm4gZ2V0QmluYXJ5KHdhc21CaW5hcnlGaWxlKX0pfX1yZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCkudGhlbihmdW5jdGlvbigpe3JldHVybiBnZXRCaW5hcnkod2FzbUJpbmFyeUZpbGUpfSl9ZnVuY3Rpb24gY3JlYXRlV2FzbSgpe3ZhciBpbmZvPXtcImFcIjphc21MaWJyYXJ5QXJnfTtmdW5jdGlvbiByZWNlaXZlSW5zdGFuY2UoaW5zdGFuY2UsbW9kdWxlKXt2YXIgZXhwb3J0cz1pbnN0YW5jZS5leHBvcnRzO01vZHVsZVtcImFzbVwiXT1leHBvcnRzO3dhc21UYWJsZT1Nb2R1bGVbXCJhc21cIl1bXCJsYVwiXTthZGRPbkluaXQoTW9kdWxlW1wiYXNtXCJdW1wiaGFcIl0pO1BUaHJlYWQudGxzSW5pdEZ1bmN0aW9ucy5wdXNoKE1vZHVsZVtcImFzbVwiXVtcImthXCJdKTt3YXNtTW9kdWxlPW1vZHVsZTtpZighRU5WSVJPTk1FTlRfSVNfUFRIUkVBRCl7dmFyIG51bVdvcmtlcnNUb0xvYWQ9UFRocmVhZC51bnVzZWRXb3JrZXJzLmxlbmd0aDtQVGhyZWFkLnVudXNlZFdvcmtlcnMuZm9yRWFjaChmdW5jdGlvbih3KXtQVGhyZWFkLmxvYWRXYXNtTW9kdWxlVG9Xb3JrZXIodyxmdW5jdGlvbigpe2lmKCEtLW51bVdvcmtlcnNUb0xvYWQpcmVtb3ZlUnVuRGVwZW5kZW5jeShcIndhc20taW5zdGFudGlhdGVcIil9KX0pfX1pZighRU5WSVJPTk1FTlRfSVNfUFRIUkVBRCl7YWRkUnVuRGVwZW5kZW5jeShcIndhc20taW5zdGFudGlhdGVcIil9ZnVuY3Rpb24gcmVjZWl2ZUluc3RhbnRpYXRpb25SZXN1bHQocmVzdWx0KXtyZWNlaXZlSW5zdGFuY2UocmVzdWx0W1wiaW5zdGFuY2VcIl0scmVzdWx0W1wibW9kdWxlXCJdKX1mdW5jdGlvbiBpbnN0YW50aWF0ZUFycmF5QnVmZmVyKHJlY2VpdmVyKXtyZXR1cm4gZ2V0QmluYXJ5UHJvbWlzZSgpLnRoZW4oZnVuY3Rpb24oYmluYXJ5KXt2YXIgcmVzdWx0PVdlYkFzc2VtYmx5Lmluc3RhbnRpYXRlKGJpbmFyeSxpbmZvKTtyZXR1cm4gcmVzdWx0fSkudGhlbihyZWNlaXZlcixmdW5jdGlvbihyZWFzb24pe2VycihcImZhaWxlZCB0byBhc3luY2hyb25vdXNseSBwcmVwYXJlIHdhc206IFwiK3JlYXNvbik7YWJvcnQocmVhc29uKX0pfWZ1bmN0aW9uIGluc3RhbnRpYXRlQXN5bmMoKXtpZighd2FzbUJpbmFyeSYmdHlwZW9mIFdlYkFzc2VtYmx5Lmluc3RhbnRpYXRlU3RyZWFtaW5nPT09XCJmdW5jdGlvblwiJiYhaXNEYXRhVVJJKHdhc21CaW5hcnlGaWxlKSYmdHlwZW9mIGZldGNoPT09XCJmdW5jdGlvblwiKXtyZXR1cm4gZmV0Y2god2FzbUJpbmFyeUZpbGUse2NyZWRlbnRpYWxzOlwic2FtZS1vcmlnaW5cIn0pLnRoZW4oZnVuY3Rpb24ocmVzcG9uc2Upe3ZhciByZXN1bHQ9V2ViQXNzZW1ibHkuaW5zdGFudGlhdGVTdHJlYW1pbmcocmVzcG9uc2UsaW5mbyk7cmV0dXJuIHJlc3VsdC50aGVuKHJlY2VpdmVJbnN0YW50aWF0aW9uUmVzdWx0LGZ1bmN0aW9uKHJlYXNvbil7ZXJyKFwid2FzbSBzdHJlYW1pbmcgY29tcGlsZSBmYWlsZWQ6IFwiK3JlYXNvbik7ZXJyKFwiZmFsbGluZyBiYWNrIHRvIEFycmF5QnVmZmVyIGluc3RhbnRpYXRpb25cIik7cmV0dXJuIGluc3RhbnRpYXRlQXJyYXlCdWZmZXIocmVjZWl2ZUluc3RhbnRpYXRpb25SZXN1bHQpfSl9KX1lbHNle3JldHVybiBpbnN0YW50aWF0ZUFycmF5QnVmZmVyKHJlY2VpdmVJbnN0YW50aWF0aW9uUmVzdWx0KX19aWYoTW9kdWxlW1wiaW5zdGFudGlhdGVXYXNtXCJdKXt0cnl7dmFyIGV4cG9ydHM9TW9kdWxlW1wiaW5zdGFudGlhdGVXYXNtXCJdKGluZm8scmVjZWl2ZUluc3RhbmNlKTtyZXR1cm4gZXhwb3J0c31jYXRjaChlKXtlcnIoXCJNb2R1bGUuaW5zdGFudGlhdGVXYXNtIGNhbGxiYWNrIGZhaWxlZCB3aXRoIGVycm9yOiBcIitlKTtyZXR1cm4gZmFsc2V9fWluc3RhbnRpYXRlQXN5bmMoKS5jYXRjaChyZWFkeVByb21pc2VSZWplY3QpO3JldHVybnt9fXZhciBBU01fQ09OU1RTPXs2MDA1NDA6ZnVuY3Rpb24oKXt0aHJvd1wiQ2FuY2VsZWQhXCJ9LDYwMDU1ODpmdW5jdGlvbigkMCwkMSl7c2V0VGltZW91dChmdW5jdGlvbigpe19fZW1zY3JpcHRlbl9kb19kaXNwYXRjaF90b190aHJlYWQoJDAsJDEpfSwwKX19O2Z1bmN0aW9uIGluaXRQdGhyZWFkc0pTKCl7UFRocmVhZC5pbml0UnVudGltZSgpfWZ1bmN0aW9uIGNhbGxSdW50aW1lQ2FsbGJhY2tzKGNhbGxiYWNrcyl7d2hpbGUoY2FsbGJhY2tzLmxlbmd0aD4wKXt2YXIgY2FsbGJhY2s9Y2FsbGJhY2tzLnNoaWZ0KCk7aWYodHlwZW9mIGNhbGxiYWNrPT1cImZ1bmN0aW9uXCIpe2NhbGxiYWNrKE1vZHVsZSk7Y29udGludWV9dmFyIGZ1bmM9Y2FsbGJhY2suZnVuYztpZih0eXBlb2YgZnVuYz09PVwibnVtYmVyXCIpe2lmKGNhbGxiYWNrLmFyZz09PXVuZGVmaW5lZCl7d2FzbVRhYmxlLmdldChmdW5jKSgpfWVsc2V7d2FzbVRhYmxlLmdldChmdW5jKShjYWxsYmFjay5hcmcpfX1lbHNle2Z1bmMoY2FsbGJhY2suYXJnPT09dW5kZWZpbmVkP251bGw6Y2FsbGJhY2suYXJnKX19fXZhciBFUlJOT19DT0RFUz17RVBFUk06NjMsRU5PRU5UOjQ0LEVTUkNIOjcxLEVJTlRSOjI3LEVJTzoyOSxFTlhJTzo2MCxFMkJJRzoxLEVOT0VYRUM6NDUsRUJBREY6OCxFQ0hJTEQ6MTIsRUFHQUlOOjYsRVdPVUxEQkxPQ0s6NixFTk9NRU06NDgsRUFDQ0VTOjIsRUZBVUxUOjIxLEVOT1RCTEs6MTA1LEVCVVNZOjEwLEVFWElTVDoyMCxFWERFVjo3NSxFTk9ERVY6NDMsRU5PVERJUjo1NCxFSVNESVI6MzEsRUlOVkFMOjI4LEVORklMRTo0MSxFTUZJTEU6MzMsRU5PVFRZOjU5LEVUWFRCU1k6NzQsRUZCSUc6MjIsRU5PU1BDOjUxLEVTUElQRTo3MCxFUk9GUzo2OSxFTUxJTks6MzQsRVBJUEU6NjQsRURPTToxOCxFUkFOR0U6NjgsRU5PTVNHOjQ5LEVJRFJNOjI0LEVDSFJORzoxMDYsRUwyTlNZTkM6MTU2LEVMM0hMVDoxMDcsRUwzUlNUOjEwOCxFTE5STkc6MTA5LEVVTkFUQ0g6MTEwLEVOT0NTSToxMTEsRUwySExUOjExMixFREVBRExLOjE2LEVOT0xDSzo0NixFQkFERToxMTMsRUJBRFI6MTE0LEVYRlVMTDoxMTUsRU5PQU5POjEwNCxFQkFEUlFDOjEwMyxFQkFEU0xUOjEwMixFREVBRExPQ0s6MTYsRUJGT05UOjEwMSxFTk9TVFI6MTAwLEVOT0RBVEE6MTE2LEVUSU1FOjExNyxFTk9TUjoxMTgsRU5PTkVUOjExOSxFTk9QS0c6MTIwLEVSRU1PVEU6MTIxLEVOT0xJTks6NDcsRUFEVjoxMjIsRVNSTU5UOjEyMyxFQ09NTToxMjQsRVBST1RPOjY1LEVNVUxUSUhPUDozNixFRE9URE9UOjEyNSxFQkFETVNHOjksRU5PVFVOSVE6MTI2LEVCQURGRDoxMjcsRVJFTUNIRzoxMjgsRUxJQkFDQzoxMjksRUxJQkJBRDoxMzAsRUxJQlNDTjoxMzEsRUxJQk1BWDoxMzIsRUxJQkVYRUM6MTMzLEVOT1NZUzo1MixFTk9URU1QVFk6NTUsRU5BTUVUT09MT05HOjM3LEVMT09QOjMyLEVPUE5PVFNVUFA6MTM4LEVQRk5PU1VQUE9SVDoxMzksRUNPTk5SRVNFVDoxNSxFTk9CVUZTOjQyLEVBRk5PU1VQUE9SVDo1LEVQUk9UT1RZUEU6NjcsRU5PVFNPQ0s6NTcsRU5PUFJPVE9PUFQ6NTAsRVNIVVRET1dOOjE0MCxFQ09OTlJFRlVTRUQ6MTQsRUFERFJJTlVTRTozLEVDT05OQUJPUlRFRDoxMyxFTkVUVU5SRUFDSDo0MCxFTkVURE9XTjozOCxFVElNRURPVVQ6NzMsRUhPU1RET1dOOjE0MixFSE9TVFVOUkVBQ0g6MjMsRUlOUFJPR1JFU1M6MjYsRUFMUkVBRFk6NyxFREVTVEFERFJSRVE6MTcsRU1TR1NJWkU6MzUsRVBST1RPTk9TVVBQT1JUOjY2LEVTT0NLVE5PU1VQUE9SVDoxMzcsRUFERFJOT1RBVkFJTDo0LEVORVRSRVNFVDozOSxFSVNDT05OOjMwLEVOT1RDT05OOjUzLEVUT09NQU5ZUkVGUzoxNDEsRVVTRVJTOjEzNixFRFFVT1Q6MTksRVNUQUxFOjcyLEVOT1RTVVA6MTM4LEVOT01FRElVTToxNDgsRUlMU0VROjI1LEVPVkVSRkxPVzo2MSxFQ0FOQ0VMRUQ6MTEsRU5PVFJFQ09WRVJBQkxFOjU2LEVPV05FUkRFQUQ6NjIsRVNUUlBJUEU6MTM1fTtmdW5jdGlvbiBfZW1zY3JpcHRlbl9mdXRleF93YWtlKGFkZHIsY291bnQpe2lmKGFkZHI8PTB8fGFkZHI+R1JPV0FCTEVfSEVBUF9JOCgpLmxlbmd0aHx8YWRkciYzIT0wfHxjb3VudDwwKXJldHVybi0yODtpZihjb3VudD09MClyZXR1cm4gMDtpZihjb3VudD49MjE0NzQ4MzY0Nyljb3VudD1JbmZpbml0eTt2YXIgbWFpblRocmVhZFdhaXRBZGRyZXNzPUF0b21pY3MubG9hZChHUk9XQUJMRV9IRUFQX0kzMigpLF9fZW1zY3JpcHRlbl9tYWluX3RocmVhZF9mdXRleD4+Mik7dmFyIG1haW5UaHJlYWRXb2tlbj0wO2lmKG1haW5UaHJlYWRXYWl0QWRkcmVzcz09YWRkcil7dmFyIGxvYWRlZEFkZHI9QXRvbWljcy5jb21wYXJlRXhjaGFuZ2UoR1JPV0FCTEVfSEVBUF9JMzIoKSxfX2Vtc2NyaXB0ZW5fbWFpbl90aHJlYWRfZnV0ZXg+PjIsbWFpblRocmVhZFdhaXRBZGRyZXNzLDApO2lmKGxvYWRlZEFkZHI9PW1haW5UaHJlYWRXYWl0QWRkcmVzcyl7LS1jb3VudDttYWluVGhyZWFkV29rZW49MTtpZihjb3VudDw9MClyZXR1cm4gMX19dmFyIHJldD1BdG9taWNzLm5vdGlmeShHUk9XQUJMRV9IRUFQX0kzMigpLGFkZHI+PjIsY291bnQpO2lmKHJldD49MClyZXR1cm4gcmV0K21haW5UaHJlYWRXb2tlbjt0aHJvd1wiQXRvbWljcy5ub3RpZnkgcmV0dXJuZWQgYW4gdW5leHBlY3RlZCB2YWx1ZSBcIityZXR9TW9kdWxlW1wiX2Vtc2NyaXB0ZW5fZnV0ZXhfd2FrZVwiXT1fZW1zY3JpcHRlbl9mdXRleF93YWtlO2Z1bmN0aW9uIGtpbGxUaHJlYWQocHRocmVhZF9wdHIpe2lmKEVOVklST05NRU5UX0lTX1BUSFJFQUQpdGhyb3dcIkludGVybmFsIEVycm9yISBraWxsVGhyZWFkKCkgY2FuIG9ubHkgZXZlciBiZSBjYWxsZWQgZnJvbSBtYWluIGFwcGxpY2F0aW9uIHRocmVhZCFcIjtpZighcHRocmVhZF9wdHIpdGhyb3dcIkludGVybmFsIEVycm9yISBOdWxsIHB0aHJlYWRfcHRyIGluIGtpbGxUaHJlYWQhXCI7R1JPV0FCTEVfSEVBUF9JMzIoKVtwdGhyZWFkX3B0cisxMj4+Ml09MDt2YXIgcHRocmVhZD1QVGhyZWFkLnB0aHJlYWRzW3B0aHJlYWRfcHRyXTtwdGhyZWFkLndvcmtlci50ZXJtaW5hdGUoKTtQVGhyZWFkLmZyZWVUaHJlYWREYXRhKHB0aHJlYWQpO1BUaHJlYWQucnVubmluZ1dvcmtlcnMuc3BsaWNlKFBUaHJlYWQucnVubmluZ1dvcmtlcnMuaW5kZXhPZihwdGhyZWFkLndvcmtlciksMSk7cHRocmVhZC53b3JrZXIucHRocmVhZD11bmRlZmluZWR9ZnVuY3Rpb24gY2FuY2VsVGhyZWFkKHB0aHJlYWRfcHRyKXtpZihFTlZJUk9OTUVOVF9JU19QVEhSRUFEKXRocm93XCJJbnRlcm5hbCBFcnJvciEgY2FuY2VsVGhyZWFkKCkgY2FuIG9ubHkgZXZlciBiZSBjYWxsZWQgZnJvbSBtYWluIGFwcGxpY2F0aW9uIHRocmVhZCFcIjtpZighcHRocmVhZF9wdHIpdGhyb3dcIkludGVybmFsIEVycm9yISBOdWxsIHB0aHJlYWRfcHRyIGluIGNhbmNlbFRocmVhZCFcIjt2YXIgcHRocmVhZD1QVGhyZWFkLnB0aHJlYWRzW3B0aHJlYWRfcHRyXTtwdGhyZWFkLndvcmtlci5wb3N0TWVzc2FnZSh7XCJjbWRcIjpcImNhbmNlbFwifSl9ZnVuY3Rpb24gY2xlYW51cFRocmVhZChwdGhyZWFkX3B0cil7aWYoRU5WSVJPTk1FTlRfSVNfUFRIUkVBRCl0aHJvd1wiSW50ZXJuYWwgRXJyb3IhIGNsZWFudXBUaHJlYWQoKSBjYW4gb25seSBldmVyIGJlIGNhbGxlZCBmcm9tIG1haW4gYXBwbGljYXRpb24gdGhyZWFkIVwiO2lmKCFwdGhyZWFkX3B0cil0aHJvd1wiSW50ZXJuYWwgRXJyb3IhIE51bGwgcHRocmVhZF9wdHIgaW4gY2xlYW51cFRocmVhZCFcIjt2YXIgcHRocmVhZD1QVGhyZWFkLnB0aHJlYWRzW3B0aHJlYWRfcHRyXTtpZihwdGhyZWFkKXtHUk9XQUJMRV9IRUFQX0kzMigpW3B0aHJlYWRfcHRyKzEyPj4yXT0wO3ZhciB3b3JrZXI9cHRocmVhZC53b3JrZXI7UFRocmVhZC5yZXR1cm5Xb3JrZXJUb1Bvb2wod29ya2VyKX19dmFyIFBUaHJlYWQ9e3VudXNlZFdvcmtlcnM6W10scnVubmluZ1dvcmtlcnM6W10sdGxzSW5pdEZ1bmN0aW9uczpbXSxpbml0TWFpblRocmVhZEJsb2NrOmZ1bmN0aW9uKCl7dmFyIHB0aHJlYWRQb29sU2l6ZT1uYXZpZ2F0b3IuaGFyZHdhcmVDb25jdXJyZW5jeTtmb3IodmFyIGk9MDtpPHB0aHJlYWRQb29sU2l6ZTsrK2kpe1BUaHJlYWQuYWxsb2NhdGVVbnVzZWRXb3JrZXIoKX19LGluaXRSdW50aW1lOmZ1bmN0aW9uKCl7dmFyIHRiPV9tYWxsb2MoMjI4KTtmb3IodmFyIGk9MDtpPDIyOC80OysraSlHUk9XQUJMRV9IRUFQX1UzMigpW3RiLzQraV09MDtHUk9XQUJMRV9IRUFQX0kzMigpW3RiKzEyPj4yXT10Yjt2YXIgaGVhZFB0cj10YisxNTI7R1JPV0FCTEVfSEVBUF9JMzIoKVtoZWFkUHRyPj4yXT1oZWFkUHRyO3ZhciB0bHNNZW1vcnk9X21hbGxvYyg1MTIpO2Zvcih2YXIgaT0wO2k8MTI4OysraSlHUk9XQUJMRV9IRUFQX1UzMigpW3Rsc01lbW9yeS80K2ldPTA7QXRvbWljcy5zdG9yZShHUk9XQUJMRV9IRUFQX1UzMigpLHRiKzEwMD4+Mix0bHNNZW1vcnkpO0F0b21pY3Muc3RvcmUoR1JPV0FCTEVfSEVBUF9VMzIoKSx0Yis0MD4+Mix0Yik7X19lbXNjcmlwdGVuX3RocmVhZF9pbml0KHRiLCFFTlZJUk9OTUVOVF9JU19XT1JLRVIsMSk7X2Vtc2NyaXB0ZW5fcmVnaXN0ZXJfbWFpbl9icm93c2VyX3RocmVhZF9pZCh0Yil9LGluaXRXb3JrZXI6ZnVuY3Rpb24oKXt9LHB0aHJlYWRzOnt9LHRocmVhZEV4aXRIYW5kbGVyczpbXSxydW5FeGl0SGFuZGxlcnM6ZnVuY3Rpb24oKXt3aGlsZShQVGhyZWFkLnRocmVhZEV4aXRIYW5kbGVycy5sZW5ndGg+MCl7UFRocmVhZC50aHJlYWRFeGl0SGFuZGxlcnMucG9wKCkoKX1pZihFTlZJUk9OTUVOVF9JU19QVEhSRUFEJiZfcHRocmVhZF9zZWxmKCkpX19fcHRocmVhZF90c2RfcnVuX2R0b3JzKCl9LHJ1bkV4aXRIYW5kbGVyc0FuZERlaW5pdFRocmVhZDpmdW5jdGlvbih0YixleGl0Q29kZSl7QXRvbWljcy5zdG9yZShHUk9XQUJMRV9IRUFQX1UzMigpLHRiKzU2Pj4yLDEpO0F0b21pY3Muc3RvcmUoR1JPV0FCTEVfSEVBUF9VMzIoKSx0Yis2MD4+MiwwKTtQVGhyZWFkLnJ1bkV4aXRIYW5kbGVycygpO0F0b21pY3Muc3RvcmUoR1JPV0FCTEVfSEVBUF9VMzIoKSx0Yis0Pj4yLGV4aXRDb2RlKTtBdG9taWNzLnN0b3JlKEdST1dBQkxFX0hFQVBfVTMyKCksdGIrMD4+MiwxKTtfZW1zY3JpcHRlbl9mdXRleF93YWtlKHRiKzAsMjE0NzQ4MzY0Nyk7X19lbXNjcmlwdGVuX3RocmVhZF9pbml0KDAsMCwwKX0sc2V0RXhpdFN0YXR1czpmdW5jdGlvbihzdGF0dXMpe0VYSVRTVEFUVVM9c3RhdHVzfSx0aHJlYWRFeGl0OmZ1bmN0aW9uKGV4aXRDb2RlKXt2YXIgdGI9X3B0aHJlYWRfc2VsZigpO2lmKHRiKXtQVGhyZWFkLnJ1bkV4aXRIYW5kbGVyc0FuZERlaW5pdFRocmVhZCh0YixleGl0Q29kZSk7aWYoRU5WSVJPTk1FTlRfSVNfUFRIUkVBRCl7cG9zdE1lc3NhZ2Uoe1wiY21kXCI6XCJleGl0XCJ9KX19fSx0aHJlYWRDYW5jZWw6ZnVuY3Rpb24oKXtQVGhyZWFkLnJ1bkV4aXRIYW5kbGVyc0FuZERlaW5pdFRocmVhZChfcHRocmVhZF9zZWxmKCksLTEpO3Bvc3RNZXNzYWdlKHtcImNtZFwiOlwiY2FuY2VsRG9uZVwifSl9LHRlcm1pbmF0ZUFsbFRocmVhZHM6ZnVuY3Rpb24oKXtmb3IodmFyIHQgaW4gUFRocmVhZC5wdGhyZWFkcyl7dmFyIHB0aHJlYWQ9UFRocmVhZC5wdGhyZWFkc1t0XTtpZihwdGhyZWFkJiZwdGhyZWFkLndvcmtlcil7UFRocmVhZC5yZXR1cm5Xb3JrZXJUb1Bvb2wocHRocmVhZC53b3JrZXIpfX1QVGhyZWFkLnB0aHJlYWRzPXt9O2Zvcih2YXIgaT0wO2k8UFRocmVhZC51bnVzZWRXb3JrZXJzLmxlbmd0aDsrK2kpe3ZhciB3b3JrZXI9UFRocmVhZC51bnVzZWRXb3JrZXJzW2ldO3dvcmtlci50ZXJtaW5hdGUoKX1QVGhyZWFkLnVudXNlZFdvcmtlcnM9W107Zm9yKHZhciBpPTA7aTxQVGhyZWFkLnJ1bm5pbmdXb3JrZXJzLmxlbmd0aDsrK2kpe3ZhciB3b3JrZXI9UFRocmVhZC5ydW5uaW5nV29ya2Vyc1tpXTt2YXIgcHRocmVhZD13b3JrZXIucHRocmVhZDtQVGhyZWFkLmZyZWVUaHJlYWREYXRhKHB0aHJlYWQpO3dvcmtlci50ZXJtaW5hdGUoKX1QVGhyZWFkLnJ1bm5pbmdXb3JrZXJzPVtdfSxmcmVlVGhyZWFkRGF0YTpmdW5jdGlvbihwdGhyZWFkKXtpZighcHRocmVhZClyZXR1cm47aWYocHRocmVhZC50aHJlYWRJbmZvU3RydWN0KXt2YXIgdGxzTWVtb3J5PUdST1dBQkxFX0hFQVBfSTMyKClbcHRocmVhZC50aHJlYWRJbmZvU3RydWN0KzEwMD4+Ml07R1JPV0FCTEVfSEVBUF9JMzIoKVtwdGhyZWFkLnRocmVhZEluZm9TdHJ1Y3QrMTAwPj4yXT0wO19mcmVlKHRsc01lbW9yeSk7X2ZyZWUocHRocmVhZC50aHJlYWRJbmZvU3RydWN0KX1wdGhyZWFkLnRocmVhZEluZm9TdHJ1Y3Q9MDtpZihwdGhyZWFkLmFsbG9jYXRlZE93blN0YWNrJiZwdGhyZWFkLnN0YWNrQmFzZSlfZnJlZShwdGhyZWFkLnN0YWNrQmFzZSk7cHRocmVhZC5zdGFja0Jhc2U9MDtpZihwdGhyZWFkLndvcmtlcilwdGhyZWFkLndvcmtlci5wdGhyZWFkPW51bGx9LHJldHVybldvcmtlclRvUG9vbDpmdW5jdGlvbih3b3JrZXIpe1BUaHJlYWQucnVuV2l0aG91dE1haW5UaHJlYWRRdWV1ZWRDYWxscyhmdW5jdGlvbigpe2RlbGV0ZSBQVGhyZWFkLnB0aHJlYWRzW3dvcmtlci5wdGhyZWFkLnRocmVhZEluZm9TdHJ1Y3RdO1BUaHJlYWQudW51c2VkV29ya2Vycy5wdXNoKHdvcmtlcik7UFRocmVhZC5ydW5uaW5nV29ya2Vycy5zcGxpY2UoUFRocmVhZC5ydW5uaW5nV29ya2Vycy5pbmRleE9mKHdvcmtlciksMSk7UFRocmVhZC5mcmVlVGhyZWFkRGF0YSh3b3JrZXIucHRocmVhZCk7d29ya2VyLnB0aHJlYWQ9dW5kZWZpbmVkfSl9LHJ1bldpdGhvdXRNYWluVGhyZWFkUXVldWVkQ2FsbHM6ZnVuY3Rpb24oZnVuYyl7R1JPV0FCTEVfSEVBUF9JMzIoKVtfX2Vtc2NyaXB0ZW5fYWxsb3dfbWFpbl9ydW50aW1lX3F1ZXVlZF9jYWxscz4+Ml09MDt0cnl7ZnVuYygpfWZpbmFsbHl7R1JPV0FCTEVfSEVBUF9JMzIoKVtfX2Vtc2NyaXB0ZW5fYWxsb3dfbWFpbl9ydW50aW1lX3F1ZXVlZF9jYWxscz4+Ml09MX19LHJlY2VpdmVPYmplY3RUcmFuc2ZlcjpmdW5jdGlvbihkYXRhKXt9LHRocmVhZEluaXQ6ZnVuY3Rpb24oKXtmb3IodmFyIGkgaW4gUFRocmVhZC50bHNJbml0RnVuY3Rpb25zKXtQVGhyZWFkLnRsc0luaXRGdW5jdGlvbnNbaV0oKX19LGxvYWRXYXNtTW9kdWxlVG9Xb3JrZXI6ZnVuY3Rpb24od29ya2VyLG9uRmluaXNoZWRMb2FkaW5nKXt3b3JrZXIub25tZXNzYWdlPWZ1bmN0aW9uKGUpe3ZhciBkPWVbXCJkYXRhXCJdO3ZhciBjbWQ9ZFtcImNtZFwiXTtpZih3b3JrZXIucHRocmVhZClQVGhyZWFkLmN1cnJlbnRQcm94aWVkT3BlcmF0aW9uQ2FsbGVyVGhyZWFkPXdvcmtlci5wdGhyZWFkLnRocmVhZEluZm9TdHJ1Y3Q7aWYoZFtcInRhcmdldFRocmVhZFwiXSYmZFtcInRhcmdldFRocmVhZFwiXSE9X3B0aHJlYWRfc2VsZigpKXt2YXIgdGhyZWFkPVBUaHJlYWQucHRocmVhZHNbZC50YXJnZXRUaHJlYWRdO2lmKHRocmVhZCl7dGhyZWFkLndvcmtlci5wb3N0TWVzc2FnZShlLmRhdGEsZFtcInRyYW5zZmVyTGlzdFwiXSl9ZWxzZXtjb25zb2xlLmVycm9yKCdJbnRlcm5hbCBlcnJvciEgV29ya2VyIHNlbnQgYSBtZXNzYWdlIFwiJytjbWQrJ1wiIHRvIHRhcmdldCBwdGhyZWFkICcrZFtcInRhcmdldFRocmVhZFwiXStcIiwgYnV0IHRoYXQgdGhyZWFkIG5vIGxvbmdlciBleGlzdHMhXCIpfVBUaHJlYWQuY3VycmVudFByb3hpZWRPcGVyYXRpb25DYWxsZXJUaHJlYWQ9dW5kZWZpbmVkO3JldHVybn1pZihjbWQ9PT1cInByb2Nlc3NRdWV1ZWRNYWluVGhyZWFkV29ya1wiKXtfZW1zY3JpcHRlbl9tYWluX3RocmVhZF9wcm9jZXNzX3F1ZXVlZF9jYWxscygpfWVsc2UgaWYoY21kPT09XCJzcGF3blRocmVhZFwiKXtzcGF3blRocmVhZChlLmRhdGEpfWVsc2UgaWYoY21kPT09XCJjbGVhbnVwVGhyZWFkXCIpe2NsZWFudXBUaHJlYWQoZFtcInRocmVhZFwiXSl9ZWxzZSBpZihjbWQ9PT1cImtpbGxUaHJlYWRcIil7a2lsbFRocmVhZChkW1widGhyZWFkXCJdKX1lbHNlIGlmKGNtZD09PVwiY2FuY2VsVGhyZWFkXCIpe2NhbmNlbFRocmVhZChkW1widGhyZWFkXCJdKX1lbHNlIGlmKGNtZD09PVwibG9hZGVkXCIpe3dvcmtlci5sb2FkZWQ9dHJ1ZTtpZihvbkZpbmlzaGVkTG9hZGluZylvbkZpbmlzaGVkTG9hZGluZyh3b3JrZXIpO2lmKHdvcmtlci5ydW5QdGhyZWFkKXt3b3JrZXIucnVuUHRocmVhZCgpO2RlbGV0ZSB3b3JrZXIucnVuUHRocmVhZH19ZWxzZSBpZihjbWQ9PT1cInByaW50XCIpe291dChcIlRocmVhZCBcIitkW1widGhyZWFkSWRcIl0rXCI6IFwiK2RbXCJ0ZXh0XCJdKX1lbHNlIGlmKGNtZD09PVwicHJpbnRFcnJcIil7ZXJyKFwiVGhyZWFkIFwiK2RbXCJ0aHJlYWRJZFwiXStcIjogXCIrZFtcInRleHRcIl0pfWVsc2UgaWYoY21kPT09XCJhbGVydFwiKXthbGVydChcIlRocmVhZCBcIitkW1widGhyZWFkSWRcIl0rXCI6IFwiK2RbXCJ0ZXh0XCJdKX1lbHNlIGlmKGNtZD09PVwiZXhpdFwiKXt2YXIgZGV0YWNoZWQ9d29ya2VyLnB0aHJlYWQmJkF0b21pY3MubG9hZChHUk9XQUJMRV9IRUFQX1UzMigpLHdvcmtlci5wdGhyZWFkLnRocmVhZEluZm9TdHJ1Y3QrNjQ+PjIpO2lmKGRldGFjaGVkKXtQVGhyZWFkLnJldHVybldvcmtlclRvUG9vbCh3b3JrZXIpfX1lbHNlIGlmKGNtZD09PVwiZXhpdFByb2Nlc3NcIil7dHJ5e2V4aXQoZFtcInJldHVybkNvZGVcIl0pfWNhdGNoKGUpe2lmKGUgaW5zdGFuY2VvZiBFeGl0U3RhdHVzKXJldHVybjt0aHJvdyBlfX1lbHNlIGlmKGNtZD09PVwiY2FuY2VsRG9uZVwiKXtQVGhyZWFkLnJldHVybldvcmtlclRvUG9vbCh3b3JrZXIpfWVsc2UgaWYoY21kPT09XCJvYmplY3RUcmFuc2ZlclwiKXtQVGhyZWFkLnJlY2VpdmVPYmplY3RUcmFuc2ZlcihlLmRhdGEpfWVsc2UgaWYoZS5kYXRhLnRhcmdldD09PVwic2V0aW1tZWRpYXRlXCIpe3dvcmtlci5wb3N0TWVzc2FnZShlLmRhdGEpfWVsc2V7ZXJyKFwid29ya2VyIHNlbnQgYW4gdW5rbm93biBjb21tYW5kIFwiK2NtZCl9UFRocmVhZC5jdXJyZW50UHJveGllZE9wZXJhdGlvbkNhbGxlclRocmVhZD11bmRlZmluZWR9O3dvcmtlci5vbmVycm9yPWZ1bmN0aW9uKGUpe2VycihcInB0aHJlYWQgc2VudCBhbiBlcnJvciEgXCIrZS5maWxlbmFtZStcIjpcIitlLmxpbmVubytcIjogXCIrZS5tZXNzYWdlKX07d29ya2VyLnBvc3RNZXNzYWdlKHtcImNtZFwiOlwibG9hZFwiLFwidXJsT3JCbG9iXCI6TW9kdWxlW1wibWFpblNjcmlwdFVybE9yQmxvYlwiXSxcIndhc21NZW1vcnlcIjp3YXNtTWVtb3J5LFwid2FzbU1vZHVsZVwiOndhc21Nb2R1bGV9KX0sYWxsb2NhdGVVbnVzZWRXb3JrZXI6ZnVuY3Rpb24oKXtpZighTW9kdWxlW1wibG9jYXRlRmlsZVwiXSl7UFRocmVhZC51bnVzZWRXb3JrZXJzLnB1c2gobmV3IFdvcmtlcihuZXcgVVJMKFwiYXZpZl9lbmNfbXQud29ya2VyLmpzXCIsaW1wb3J0Lm1ldGEudXJsKSkpO3JldHVybn12YXIgcHRocmVhZE1haW5Kcz1sb2NhdGVGaWxlKFwiYXZpZl9lbmNfbXQud29ya2VyLmpzXCIpO1BUaHJlYWQudW51c2VkV29ya2Vycy5wdXNoKG5ldyBXb3JrZXIocHRocmVhZE1haW5KcykpfSxnZXROZXdXb3JrZXI6ZnVuY3Rpb24oKXtpZihQVGhyZWFkLnVudXNlZFdvcmtlcnMubGVuZ3RoPT0wKXtQVGhyZWFkLmFsbG9jYXRlVW51c2VkV29ya2VyKCk7UFRocmVhZC5sb2FkV2FzbU1vZHVsZVRvV29ya2VyKFBUaHJlYWQudW51c2VkV29ya2Vyc1swXSl9cmV0dXJuIFBUaHJlYWQudW51c2VkV29ya2Vycy5wb3AoKX0sYnVzeVNwaW5XYWl0OmZ1bmN0aW9uKG1zZWNzKXt2YXIgdD1wZXJmb3JtYW5jZS5ub3coKSttc2Vjczt3aGlsZShwZXJmb3JtYW5jZS5ub3coKTx0KXt9fX07ZnVuY3Rpb24gZXN0YWJsaXNoU3RhY2tTcGFjZShzdGFja1RvcCxzdGFja01heCl7X2Vtc2NyaXB0ZW5fc3RhY2tfc2V0X2xpbWl0cyhzdGFja1RvcCxzdGFja01heCk7c3RhY2tSZXN0b3JlKHN0YWNrVG9wKX1Nb2R1bGVbXCJlc3RhYmxpc2hTdGFja1NwYWNlXCJdPWVzdGFibGlzaFN0YWNrU3BhY2U7ZnVuY3Rpb24gaW52b2tlRW50cnlQb2ludChwdHIsYXJnKXtyZXR1cm4gd2FzbVRhYmxlLmdldChwdHIpKGFyZyl9TW9kdWxlW1wiaW52b2tlRW50cnlQb2ludFwiXT1pbnZva2VFbnRyeVBvaW50O3ZhciBydW50aW1lS2VlcGFsaXZlQ291bnRlcj0wO2Z1bmN0aW9uIGtlZXBSdW50aW1lQWxpdmUoKXtyZXR1cm4gbm9FeGl0UnVudGltZXx8cnVudGltZUtlZXBhbGl2ZUNvdW50ZXI+MH1Nb2R1bGVbXCJrZWVwUnVudGltZUFsaXZlXCJdPWtlZXBSdW50aW1lQWxpdmU7ZnVuY3Rpb24gX19fYXNzZXJ0X2ZhaWwoY29uZGl0aW9uLGZpbGVuYW1lLGxpbmUsZnVuYyl7YWJvcnQoXCJBc3NlcnRpb24gZmFpbGVkOiBcIitVVEY4VG9TdHJpbmcoY29uZGl0aW9uKStcIiwgYXQ6IFwiK1tmaWxlbmFtZT9VVEY4VG9TdHJpbmcoZmlsZW5hbWUpOlwidW5rbm93biBmaWxlbmFtZVwiLGxpbmUsZnVuYz9VVEY4VG9TdHJpbmcoZnVuYyk6XCJ1bmtub3duIGZ1bmN0aW9uXCJdKX12YXIgX2Vtc2NyaXB0ZW5fZ2V0X25vdztpZihFTlZJUk9OTUVOVF9JU19QVEhSRUFEKXtfZW1zY3JpcHRlbl9nZXRfbm93PWZ1bmN0aW9uKCl7cmV0dXJuIHBlcmZvcm1hbmNlLm5vdygpLU1vZHVsZVtcIl9fcGVyZm9ybWFuY2Vfbm93X2Nsb2NrX2RyaWZ0XCJdfX1lbHNlIF9lbXNjcmlwdGVuX2dldF9ub3c9ZnVuY3Rpb24oKXtyZXR1cm4gcGVyZm9ybWFuY2Uubm93KCl9O2Z1bmN0aW9uIF9wdGhyZWFkX2NsZWFudXBfcHVzaChyb3V0aW5lLGFyZyl7UFRocmVhZC50aHJlYWRFeGl0SGFuZGxlcnMucHVzaChmdW5jdGlvbigpe3dhc21UYWJsZS5nZXQocm91dGluZSkoYXJnKX0pfWZ1bmN0aW9uIF9fX2N4YV90aHJlYWRfYXRleGl0KGEwLGExKXtyZXR1cm4gX3B0aHJlYWRfY2xlYW51cF9wdXNoKGEwLGExKX12YXIgU1lTQ0FMTFM9e21hcHBpbmdzOnt9LGJ1ZmZlcnM6W251bGwsW10sW11dLHByaW50Q2hhcjpmdW5jdGlvbihzdHJlYW0sY3Vycil7dmFyIGJ1ZmZlcj1TWVNDQUxMUy5idWZmZXJzW3N0cmVhbV07aWYoY3Vycj09PTB8fGN1cnI9PT0xMCl7KHN0cmVhbT09PTE/b3V0OmVycikoVVRGOEFycmF5VG9TdHJpbmcoYnVmZmVyLDApKTtidWZmZXIubGVuZ3RoPTB9ZWxzZXtidWZmZXIucHVzaChjdXJyKX19LHZhcmFyZ3M6dW5kZWZpbmVkLGdldDpmdW5jdGlvbigpe1NZU0NBTExTLnZhcmFyZ3MrPTQ7dmFyIHJldD1HUk9XQUJMRV9IRUFQX0kzMigpW1NZU0NBTExTLnZhcmFyZ3MtND4+Ml07cmV0dXJuIHJldH0sZ2V0U3RyOmZ1bmN0aW9uKHB0cil7dmFyIHJldD1VVEY4VG9TdHJpbmcocHRyKTtyZXR1cm4gcmV0fSxnZXQ2NDpmdW5jdGlvbihsb3csaGlnaCl7cmV0dXJuIGxvd319O2Z1bmN0aW9uIF9fX3N5c19mY250bDY0KGZkLGNtZCx2YXJhcmdzKXtpZihFTlZJUk9OTUVOVF9JU19QVEhSRUFEKXJldHVybiBfZW1zY3JpcHRlbl9wcm94eV90b19tYWluX3RocmVhZF9qcygxLDEsZmQsY21kLHZhcmFyZ3MpO1NZU0NBTExTLnZhcmFyZ3M9dmFyYXJncztyZXR1cm4gMH1mdW5jdGlvbiBfX19zeXNfaW9jdGwoZmQsb3AsdmFyYXJncyl7aWYoRU5WSVJPTk1FTlRfSVNfUFRIUkVBRClyZXR1cm4gX2Vtc2NyaXB0ZW5fcHJveHlfdG9fbWFpbl90aHJlYWRfanMoMiwxLGZkLG9wLHZhcmFyZ3MpO1NZU0NBTExTLnZhcmFyZ3M9dmFyYXJncztyZXR1cm4gMH1mdW5jdGlvbiBfX19zeXNfb3BlbihwYXRoLGZsYWdzLHZhcmFyZ3Mpe2lmKEVOVklST05NRU5UX0lTX1BUSFJFQUQpcmV0dXJuIF9lbXNjcmlwdGVuX3Byb3h5X3RvX21haW5fdGhyZWFkX2pzKDMsMSxwYXRoLGZsYWdzLHZhcmFyZ3MpO1NZU0NBTExTLnZhcmFyZ3M9dmFyYXJnc312YXIgc3RydWN0UmVnaXN0cmF0aW9ucz17fTtmdW5jdGlvbiBydW5EZXN0cnVjdG9ycyhkZXN0cnVjdG9ycyl7d2hpbGUoZGVzdHJ1Y3RvcnMubGVuZ3RoKXt2YXIgcHRyPWRlc3RydWN0b3JzLnBvcCgpO3ZhciBkZWw9ZGVzdHJ1Y3RvcnMucG9wKCk7ZGVsKHB0cil9fWZ1bmN0aW9uIHNpbXBsZVJlYWRWYWx1ZUZyb21Qb2ludGVyKHBvaW50ZXIpe3JldHVybiB0aGlzW1wiZnJvbVdpcmVUeXBlXCJdKEdST1dBQkxFX0hFQVBfVTMyKClbcG9pbnRlcj4+Ml0pfXZhciBhd2FpdGluZ0RlcGVuZGVuY2llcz17fTt2YXIgcmVnaXN0ZXJlZFR5cGVzPXt9O3ZhciB0eXBlRGVwZW5kZW5jaWVzPXt9O3ZhciBjaGFyXzA9NDg7dmFyIGNoYXJfOT01NztmdW5jdGlvbiBtYWtlTGVnYWxGdW5jdGlvbk5hbWUobmFtZSl7aWYodW5kZWZpbmVkPT09bmFtZSl7cmV0dXJuXCJfdW5rbm93blwifW5hbWU9bmFtZS5yZXBsYWNlKC9bXmEtekEtWjAtOV9dL2csXCIkXCIpO3ZhciBmPW5hbWUuY2hhckNvZGVBdCgwKTtpZihmPj1jaGFyXzAmJmY8PWNoYXJfOSl7cmV0dXJuXCJfXCIrbmFtZX1lbHNle3JldHVybiBuYW1lfX1mdW5jdGlvbiBjcmVhdGVOYW1lZEZ1bmN0aW9uKG5hbWUsYm9keSl7bmFtZT1tYWtlTGVnYWxGdW5jdGlvbk5hbWUobmFtZSk7cmV0dXJuIG5ldyBGdW5jdGlvbihcImJvZHlcIixcInJldHVybiBmdW5jdGlvbiBcIituYW1lK1wiKCkge1xcblwiKycgICAgXCJ1c2Ugc3RyaWN0XCI7JytcIiAgICByZXR1cm4gYm9keS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xcblwiK1wifTtcXG5cIikoYm9keSl9ZnVuY3Rpb24gZXh0ZW5kRXJyb3IoYmFzZUVycm9yVHlwZSxlcnJvck5hbWUpe3ZhciBlcnJvckNsYXNzPWNyZWF0ZU5hbWVkRnVuY3Rpb24oZXJyb3JOYW1lLGZ1bmN0aW9uKG1lc3NhZ2Upe3RoaXMubmFtZT1lcnJvck5hbWU7dGhpcy5tZXNzYWdlPW1lc3NhZ2U7dmFyIHN0YWNrPW5ldyBFcnJvcihtZXNzYWdlKS5zdGFjaztpZihzdGFjayE9PXVuZGVmaW5lZCl7dGhpcy5zdGFjaz10aGlzLnRvU3RyaW5nKCkrXCJcXG5cIitzdGFjay5yZXBsYWNlKC9eRXJyb3IoOlteXFxuXSopP1xcbi8sXCJcIil9fSk7ZXJyb3JDbGFzcy5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShiYXNlRXJyb3JUeXBlLnByb3RvdHlwZSk7ZXJyb3JDbGFzcy5wcm90b3R5cGUuY29uc3RydWN0b3I9ZXJyb3JDbGFzcztlcnJvckNsYXNzLnByb3RvdHlwZS50b1N0cmluZz1mdW5jdGlvbigpe2lmKHRoaXMubWVzc2FnZT09PXVuZGVmaW5lZCl7cmV0dXJuIHRoaXMubmFtZX1lbHNle3JldHVybiB0aGlzLm5hbWUrXCI6IFwiK3RoaXMubWVzc2FnZX19O3JldHVybiBlcnJvckNsYXNzfXZhciBJbnRlcm5hbEVycm9yPXVuZGVmaW5lZDtmdW5jdGlvbiB0aHJvd0ludGVybmFsRXJyb3IobWVzc2FnZSl7dGhyb3cgbmV3IEludGVybmFsRXJyb3IobWVzc2FnZSl9ZnVuY3Rpb24gd2hlbkRlcGVuZGVudFR5cGVzQXJlUmVzb2x2ZWQobXlUeXBlcyxkZXBlbmRlbnRUeXBlcyxnZXRUeXBlQ29udmVydGVycyl7bXlUeXBlcy5mb3JFYWNoKGZ1bmN0aW9uKHR5cGUpe3R5cGVEZXBlbmRlbmNpZXNbdHlwZV09ZGVwZW5kZW50VHlwZXN9KTtmdW5jdGlvbiBvbkNvbXBsZXRlKHR5cGVDb252ZXJ0ZXJzKXt2YXIgbXlUeXBlQ29udmVydGVycz1nZXRUeXBlQ29udmVydGVycyh0eXBlQ29udmVydGVycyk7aWYobXlUeXBlQ29udmVydGVycy5sZW5ndGghPT1teVR5cGVzLmxlbmd0aCl7dGhyb3dJbnRlcm5hbEVycm9yKFwiTWlzbWF0Y2hlZCB0eXBlIGNvbnZlcnRlciBjb3VudFwiKX1mb3IodmFyIGk9MDtpPG15VHlwZXMubGVuZ3RoOysraSl7cmVnaXN0ZXJUeXBlKG15VHlwZXNbaV0sbXlUeXBlQ29udmVydGVyc1tpXSl9fXZhciB0eXBlQ29udmVydGVycz1uZXcgQXJyYXkoZGVwZW5kZW50VHlwZXMubGVuZ3RoKTt2YXIgdW5yZWdpc3RlcmVkVHlwZXM9W107dmFyIHJlZ2lzdGVyZWQ9MDtkZXBlbmRlbnRUeXBlcy5mb3JFYWNoKGZ1bmN0aW9uKGR0LGkpe2lmKHJlZ2lzdGVyZWRUeXBlcy5oYXNPd25Qcm9wZXJ0eShkdCkpe3R5cGVDb252ZXJ0ZXJzW2ldPXJlZ2lzdGVyZWRUeXBlc1tkdF19ZWxzZXt1bnJlZ2lzdGVyZWRUeXBlcy5wdXNoKGR0KTtpZighYXdhaXRpbmdEZXBlbmRlbmNpZXMuaGFzT3duUHJvcGVydHkoZHQpKXthd2FpdGluZ0RlcGVuZGVuY2llc1tkdF09W119YXdhaXRpbmdEZXBlbmRlbmNpZXNbZHRdLnB1c2goZnVuY3Rpb24oKXt0eXBlQ29udmVydGVyc1tpXT1yZWdpc3RlcmVkVHlwZXNbZHRdOysrcmVnaXN0ZXJlZDtpZihyZWdpc3RlcmVkPT09dW5yZWdpc3RlcmVkVHlwZXMubGVuZ3RoKXtvbkNvbXBsZXRlKHR5cGVDb252ZXJ0ZXJzKX19KX19KTtpZigwPT09dW5yZWdpc3RlcmVkVHlwZXMubGVuZ3RoKXtvbkNvbXBsZXRlKHR5cGVDb252ZXJ0ZXJzKX19ZnVuY3Rpb24gX19lbWJpbmRfZmluYWxpemVfdmFsdWVfb2JqZWN0KHN0cnVjdFR5cGUpe3ZhciByZWc9c3RydWN0UmVnaXN0cmF0aW9uc1tzdHJ1Y3RUeXBlXTtkZWxldGUgc3RydWN0UmVnaXN0cmF0aW9uc1tzdHJ1Y3RUeXBlXTt2YXIgcmF3Q29uc3RydWN0b3I9cmVnLnJhd0NvbnN0cnVjdG9yO3ZhciByYXdEZXN0cnVjdG9yPXJlZy5yYXdEZXN0cnVjdG9yO3ZhciBmaWVsZFJlY29yZHM9cmVnLmZpZWxkczt2YXIgZmllbGRUeXBlcz1maWVsZFJlY29yZHMubWFwKGZ1bmN0aW9uKGZpZWxkKXtyZXR1cm4gZmllbGQuZ2V0dGVyUmV0dXJuVHlwZX0pLmNvbmNhdChmaWVsZFJlY29yZHMubWFwKGZ1bmN0aW9uKGZpZWxkKXtyZXR1cm4gZmllbGQuc2V0dGVyQXJndW1lbnRUeXBlfSkpO3doZW5EZXBlbmRlbnRUeXBlc0FyZVJlc29sdmVkKFtzdHJ1Y3RUeXBlXSxmaWVsZFR5cGVzLGZ1bmN0aW9uKGZpZWxkVHlwZXMpe3ZhciBmaWVsZHM9e307ZmllbGRSZWNvcmRzLmZvckVhY2goZnVuY3Rpb24oZmllbGQsaSl7dmFyIGZpZWxkTmFtZT1maWVsZC5maWVsZE5hbWU7dmFyIGdldHRlclJldHVyblR5cGU9ZmllbGRUeXBlc1tpXTt2YXIgZ2V0dGVyPWZpZWxkLmdldHRlcjt2YXIgZ2V0dGVyQ29udGV4dD1maWVsZC5nZXR0ZXJDb250ZXh0O3ZhciBzZXR0ZXJBcmd1bWVudFR5cGU9ZmllbGRUeXBlc1tpK2ZpZWxkUmVjb3Jkcy5sZW5ndGhdO3ZhciBzZXR0ZXI9ZmllbGQuc2V0dGVyO3ZhciBzZXR0ZXJDb250ZXh0PWZpZWxkLnNldHRlckNvbnRleHQ7ZmllbGRzW2ZpZWxkTmFtZV09e3JlYWQ6ZnVuY3Rpb24ocHRyKXtyZXR1cm4gZ2V0dGVyUmV0dXJuVHlwZVtcImZyb21XaXJlVHlwZVwiXShnZXR0ZXIoZ2V0dGVyQ29udGV4dCxwdHIpKX0sd3JpdGU6ZnVuY3Rpb24ocHRyLG8pe3ZhciBkZXN0cnVjdG9ycz1bXTtzZXR0ZXIoc2V0dGVyQ29udGV4dCxwdHIsc2V0dGVyQXJndW1lbnRUeXBlW1widG9XaXJlVHlwZVwiXShkZXN0cnVjdG9ycyxvKSk7cnVuRGVzdHJ1Y3RvcnMoZGVzdHJ1Y3RvcnMpfX19KTtyZXR1cm5be25hbWU6cmVnLm5hbWUsXCJmcm9tV2lyZVR5cGVcIjpmdW5jdGlvbihwdHIpe3ZhciBydj17fTtmb3IodmFyIGkgaW4gZmllbGRzKXtydltpXT1maWVsZHNbaV0ucmVhZChwdHIpfXJhd0Rlc3RydWN0b3IocHRyKTtyZXR1cm4gcnZ9LFwidG9XaXJlVHlwZVwiOmZ1bmN0aW9uKGRlc3RydWN0b3JzLG8pe2Zvcih2YXIgZmllbGROYW1lIGluIGZpZWxkcyl7aWYoIShmaWVsZE5hbWUgaW4gbykpe3Rocm93IG5ldyBUeXBlRXJyb3IoJ01pc3NpbmcgZmllbGQ6ICBcIicrZmllbGROYW1lKydcIicpfX12YXIgcHRyPXJhd0NvbnN0cnVjdG9yKCk7Zm9yKGZpZWxkTmFtZSBpbiBmaWVsZHMpe2ZpZWxkc1tmaWVsZE5hbWVdLndyaXRlKHB0cixvW2ZpZWxkTmFtZV0pfWlmKGRlc3RydWN0b3JzIT09bnVsbCl7ZGVzdHJ1Y3RvcnMucHVzaChyYXdEZXN0cnVjdG9yLHB0cil9cmV0dXJuIHB0cn0sXCJhcmdQYWNrQWR2YW5jZVwiOjgsXCJyZWFkVmFsdWVGcm9tUG9pbnRlclwiOnNpbXBsZVJlYWRWYWx1ZUZyb21Qb2ludGVyLGRlc3RydWN0b3JGdW5jdGlvbjpyYXdEZXN0cnVjdG9yfV19KX1mdW5jdGlvbiBfX2VtYmluZF9yZWdpc3Rlcl9iaWdpbnQocHJpbWl0aXZlVHlwZSxuYW1lLHNpemUsbWluUmFuZ2UsbWF4UmFuZ2Upe31mdW5jdGlvbiBnZXRTaGlmdEZyb21TaXplKHNpemUpe3N3aXRjaChzaXplKXtjYXNlIDE6cmV0dXJuIDA7Y2FzZSAyOnJldHVybiAxO2Nhc2UgNDpyZXR1cm4gMjtjYXNlIDg6cmV0dXJuIDM7ZGVmYXVsdDp0aHJvdyBuZXcgVHlwZUVycm9yKFwiVW5rbm93biB0eXBlIHNpemU6IFwiK3NpemUpfX1mdW5jdGlvbiBlbWJpbmRfaW5pdF9jaGFyQ29kZXMoKXt2YXIgY29kZXM9bmV3IEFycmF5KDI1Nik7Zm9yKHZhciBpPTA7aTwyNTY7KytpKXtjb2Rlc1tpXT1TdHJpbmcuZnJvbUNoYXJDb2RlKGkpfWVtYmluZF9jaGFyQ29kZXM9Y29kZXN9dmFyIGVtYmluZF9jaGFyQ29kZXM9dW5kZWZpbmVkO2Z1bmN0aW9uIHJlYWRMYXRpbjFTdHJpbmcocHRyKXt2YXIgcmV0PVwiXCI7dmFyIGM9cHRyO3doaWxlKEdST1dBQkxFX0hFQVBfVTgoKVtjXSl7cmV0Kz1lbWJpbmRfY2hhckNvZGVzW0dST1dBQkxFX0hFQVBfVTgoKVtjKytdXX1yZXR1cm4gcmV0fXZhciBCaW5kaW5nRXJyb3I9dW5kZWZpbmVkO2Z1bmN0aW9uIHRocm93QmluZGluZ0Vycm9yKG1lc3NhZ2Upe3Rocm93IG5ldyBCaW5kaW5nRXJyb3IobWVzc2FnZSl9ZnVuY3Rpb24gcmVnaXN0ZXJUeXBlKHJhd1R5cGUscmVnaXN0ZXJlZEluc3RhbmNlLG9wdGlvbnMpe29wdGlvbnM9b3B0aW9uc3x8e307aWYoIShcImFyZ1BhY2tBZHZhbmNlXCJpbiByZWdpc3RlcmVkSW5zdGFuY2UpKXt0aHJvdyBuZXcgVHlwZUVycm9yKFwicmVnaXN0ZXJUeXBlIHJlZ2lzdGVyZWRJbnN0YW5jZSByZXF1aXJlcyBhcmdQYWNrQWR2YW5jZVwiKX12YXIgbmFtZT1yZWdpc3RlcmVkSW5zdGFuY2UubmFtZTtpZighcmF3VHlwZSl7dGhyb3dCaW5kaW5nRXJyb3IoJ3R5cGUgXCInK25hbWUrJ1wiIG11c3QgaGF2ZSBhIHBvc2l0aXZlIGludGVnZXIgdHlwZWlkIHBvaW50ZXInKX1pZihyZWdpc3RlcmVkVHlwZXMuaGFzT3duUHJvcGVydHkocmF3VHlwZSkpe2lmKG9wdGlvbnMuaWdub3JlRHVwbGljYXRlUmVnaXN0cmF0aW9ucyl7cmV0dXJufWVsc2V7dGhyb3dCaW5kaW5nRXJyb3IoXCJDYW5ub3QgcmVnaXN0ZXIgdHlwZSAnXCIrbmFtZStcIicgdHdpY2VcIil9fXJlZ2lzdGVyZWRUeXBlc1tyYXdUeXBlXT1yZWdpc3RlcmVkSW5zdGFuY2U7ZGVsZXRlIHR5cGVEZXBlbmRlbmNpZXNbcmF3VHlwZV07aWYoYXdhaXRpbmdEZXBlbmRlbmNpZXMuaGFzT3duUHJvcGVydHkocmF3VHlwZSkpe3ZhciBjYWxsYmFja3M9YXdhaXRpbmdEZXBlbmRlbmNpZXNbcmF3VHlwZV07ZGVsZXRlIGF3YWl0aW5nRGVwZW5kZW5jaWVzW3Jhd1R5cGVdO2NhbGxiYWNrcy5mb3JFYWNoKGZ1bmN0aW9uKGNiKXtjYigpfSl9fWZ1bmN0aW9uIF9fZW1iaW5kX3JlZ2lzdGVyX2Jvb2wocmF3VHlwZSxuYW1lLHNpemUsdHJ1ZVZhbHVlLGZhbHNlVmFsdWUpe3ZhciBzaGlmdD1nZXRTaGlmdEZyb21TaXplKHNpemUpO25hbWU9cmVhZExhdGluMVN0cmluZyhuYW1lKTtyZWdpc3RlclR5cGUocmF3VHlwZSx7bmFtZTpuYW1lLFwiZnJvbVdpcmVUeXBlXCI6ZnVuY3Rpb24od3Qpe3JldHVybiEhd3R9LFwidG9XaXJlVHlwZVwiOmZ1bmN0aW9uKGRlc3RydWN0b3JzLG8pe3JldHVybiBvP3RydWVWYWx1ZTpmYWxzZVZhbHVlfSxcImFyZ1BhY2tBZHZhbmNlXCI6OCxcInJlYWRWYWx1ZUZyb21Qb2ludGVyXCI6ZnVuY3Rpb24ocG9pbnRlcil7dmFyIGhlYXA7aWYoc2l6ZT09PTEpe2hlYXA9R1JPV0FCTEVfSEVBUF9JOCgpfWVsc2UgaWYoc2l6ZT09PTIpe2hlYXA9R1JPV0FCTEVfSEVBUF9JMTYoKX1lbHNlIGlmKHNpemU9PT00KXtoZWFwPUdST1dBQkxFX0hFQVBfSTMyKCl9ZWxzZXt0aHJvdyBuZXcgVHlwZUVycm9yKFwiVW5rbm93biBib29sZWFuIHR5cGUgc2l6ZTogXCIrbmFtZSl9cmV0dXJuIHRoaXNbXCJmcm9tV2lyZVR5cGVcIl0oaGVhcFtwb2ludGVyPj5zaGlmdF0pfSxkZXN0cnVjdG9yRnVuY3Rpb246bnVsbH0pfXZhciBlbXZhbF9mcmVlX2xpc3Q9W107dmFyIGVtdmFsX2hhbmRsZV9hcnJheT1be30se3ZhbHVlOnVuZGVmaW5lZH0se3ZhbHVlOm51bGx9LHt2YWx1ZTp0cnVlfSx7dmFsdWU6ZmFsc2V9XTtmdW5jdGlvbiBfX2VtdmFsX2RlY3JlZihoYW5kbGUpe2lmKGhhbmRsZT40JiYwPT09LS1lbXZhbF9oYW5kbGVfYXJyYXlbaGFuZGxlXS5yZWZjb3VudCl7ZW12YWxfaGFuZGxlX2FycmF5W2hhbmRsZV09dW5kZWZpbmVkO2VtdmFsX2ZyZWVfbGlzdC5wdXNoKGhhbmRsZSl9fWZ1bmN0aW9uIGNvdW50X2VtdmFsX2hhbmRsZXMoKXt2YXIgY291bnQ9MDtmb3IodmFyIGk9NTtpPGVtdmFsX2hhbmRsZV9hcnJheS5sZW5ndGg7KytpKXtpZihlbXZhbF9oYW5kbGVfYXJyYXlbaV0hPT11bmRlZmluZWQpeysrY291bnR9fXJldHVybiBjb3VudH1mdW5jdGlvbiBnZXRfZmlyc3RfZW12YWwoKXtmb3IodmFyIGk9NTtpPGVtdmFsX2hhbmRsZV9hcnJheS5sZW5ndGg7KytpKXtpZihlbXZhbF9oYW5kbGVfYXJyYXlbaV0hPT11bmRlZmluZWQpe3JldHVybiBlbXZhbF9oYW5kbGVfYXJyYXlbaV19fXJldHVybiBudWxsfWZ1bmN0aW9uIGluaXRfZW12YWwoKXtNb2R1bGVbXCJjb3VudF9lbXZhbF9oYW5kbGVzXCJdPWNvdW50X2VtdmFsX2hhbmRsZXM7TW9kdWxlW1wiZ2V0X2ZpcnN0X2VtdmFsXCJdPWdldF9maXJzdF9lbXZhbH1mdW5jdGlvbiBfX2VtdmFsX3JlZ2lzdGVyKHZhbHVlKXtzd2l0Y2godmFsdWUpe2Nhc2UgdW5kZWZpbmVkOntyZXR1cm4gMX1jYXNlIG51bGw6e3JldHVybiAyfWNhc2UgdHJ1ZTp7cmV0dXJuIDN9Y2FzZSBmYWxzZTp7cmV0dXJuIDR9ZGVmYXVsdDp7dmFyIGhhbmRsZT1lbXZhbF9mcmVlX2xpc3QubGVuZ3RoP2VtdmFsX2ZyZWVfbGlzdC5wb3AoKTplbXZhbF9oYW5kbGVfYXJyYXkubGVuZ3RoO2VtdmFsX2hhbmRsZV9hcnJheVtoYW5kbGVdPXtyZWZjb3VudDoxLHZhbHVlOnZhbHVlfTtyZXR1cm4gaGFuZGxlfX19ZnVuY3Rpb24gX19lbWJpbmRfcmVnaXN0ZXJfZW12YWwocmF3VHlwZSxuYW1lKXtuYW1lPXJlYWRMYXRpbjFTdHJpbmcobmFtZSk7cmVnaXN0ZXJUeXBlKHJhd1R5cGUse25hbWU6bmFtZSxcImZyb21XaXJlVHlwZVwiOmZ1bmN0aW9uKGhhbmRsZSl7dmFyIHJ2PWVtdmFsX2hhbmRsZV9hcnJheVtoYW5kbGVdLnZhbHVlO19fZW12YWxfZGVjcmVmKGhhbmRsZSk7cmV0dXJuIHJ2fSxcInRvV2lyZVR5cGVcIjpmdW5jdGlvbihkZXN0cnVjdG9ycyx2YWx1ZSl7cmV0dXJuIF9fZW12YWxfcmVnaXN0ZXIodmFsdWUpfSxcImFyZ1BhY2tBZHZhbmNlXCI6OCxcInJlYWRWYWx1ZUZyb21Qb2ludGVyXCI6c2ltcGxlUmVhZFZhbHVlRnJvbVBvaW50ZXIsZGVzdHJ1Y3RvckZ1bmN0aW9uOm51bGx9KX1mdW5jdGlvbiBfZW1iaW5kX3JlcHIodil7aWYodj09PW51bGwpe3JldHVyblwibnVsbFwifXZhciB0PXR5cGVvZiB2O2lmKHQ9PT1cIm9iamVjdFwifHx0PT09XCJhcnJheVwifHx0PT09XCJmdW5jdGlvblwiKXtyZXR1cm4gdi50b1N0cmluZygpfWVsc2V7cmV0dXJuXCJcIit2fX1mdW5jdGlvbiBmbG9hdFJlYWRWYWx1ZUZyb21Qb2ludGVyKG5hbWUsc2hpZnQpe3N3aXRjaChzaGlmdCl7Y2FzZSAyOnJldHVybiBmdW5jdGlvbihwb2ludGVyKXtyZXR1cm4gdGhpc1tcImZyb21XaXJlVHlwZVwiXShHUk9XQUJMRV9IRUFQX0YzMigpW3BvaW50ZXI+PjJdKX07Y2FzZSAzOnJldHVybiBmdW5jdGlvbihwb2ludGVyKXtyZXR1cm4gdGhpc1tcImZyb21XaXJlVHlwZVwiXShHUk9XQUJMRV9IRUFQX0Y2NCgpW3BvaW50ZXI+PjNdKX07ZGVmYXVsdDp0aHJvdyBuZXcgVHlwZUVycm9yKFwiVW5rbm93biBmbG9hdCB0eXBlOiBcIituYW1lKX19ZnVuY3Rpb24gX19lbWJpbmRfcmVnaXN0ZXJfZmxvYXQocmF3VHlwZSxuYW1lLHNpemUpe3ZhciBzaGlmdD1nZXRTaGlmdEZyb21TaXplKHNpemUpO25hbWU9cmVhZExhdGluMVN0cmluZyhuYW1lKTtyZWdpc3RlclR5cGUocmF3VHlwZSx7bmFtZTpuYW1lLFwiZnJvbVdpcmVUeXBlXCI6ZnVuY3Rpb24odmFsdWUpe3JldHVybiB2YWx1ZX0sXCJ0b1dpcmVUeXBlXCI6ZnVuY3Rpb24oZGVzdHJ1Y3RvcnMsdmFsdWUpe2lmKHR5cGVvZiB2YWx1ZSE9PVwibnVtYmVyXCImJnR5cGVvZiB2YWx1ZSE9PVwiYm9vbGVhblwiKXt0aHJvdyBuZXcgVHlwZUVycm9yKCdDYW5ub3QgY29udmVydCBcIicrX2VtYmluZF9yZXByKHZhbHVlKSsnXCIgdG8gJyt0aGlzLm5hbWUpfXJldHVybiB2YWx1ZX0sXCJhcmdQYWNrQWR2YW5jZVwiOjgsXCJyZWFkVmFsdWVGcm9tUG9pbnRlclwiOmZsb2F0UmVhZFZhbHVlRnJvbVBvaW50ZXIobmFtZSxzaGlmdCksZGVzdHJ1Y3RvckZ1bmN0aW9uOm51bGx9KX1mdW5jdGlvbiBuZXdfKGNvbnN0cnVjdG9yLGFyZ3VtZW50TGlzdCl7aWYoIShjb25zdHJ1Y3RvciBpbnN0YW5jZW9mIEZ1bmN0aW9uKSl7dGhyb3cgbmV3IFR5cGVFcnJvcihcIm5ld18gY2FsbGVkIHdpdGggY29uc3RydWN0b3IgdHlwZSBcIit0eXBlb2YgY29uc3RydWN0b3IrXCIgd2hpY2ggaXMgbm90IGEgZnVuY3Rpb25cIil9dmFyIGR1bW15PWNyZWF0ZU5hbWVkRnVuY3Rpb24oY29uc3RydWN0b3IubmFtZXx8XCJ1bmtub3duRnVuY3Rpb25OYW1lXCIsZnVuY3Rpb24oKXt9KTtkdW1teS5wcm90b3R5cGU9Y29uc3RydWN0b3IucHJvdG90eXBlO3ZhciBvYmo9bmV3IGR1bW15O3ZhciByPWNvbnN0cnVjdG9yLmFwcGx5KG9iaixhcmd1bWVudExpc3QpO3JldHVybiByIGluc3RhbmNlb2YgT2JqZWN0P3I6b2JqfWZ1bmN0aW9uIGNyYWZ0SW52b2tlckZ1bmN0aW9uKGh1bWFuTmFtZSxhcmdUeXBlcyxjbGFzc1R5cGUsY3BwSW52b2tlckZ1bmMsY3BwVGFyZ2V0RnVuYyl7dmFyIGFyZ0NvdW50PWFyZ1R5cGVzLmxlbmd0aDtpZihhcmdDb3VudDwyKXt0aHJvd0JpbmRpbmdFcnJvcihcImFyZ1R5cGVzIGFycmF5IHNpemUgbWlzbWF0Y2ghIE11c3QgYXQgbGVhc3QgZ2V0IHJldHVybiB2YWx1ZSBhbmQgJ3RoaXMnIHR5cGVzIVwiKX12YXIgaXNDbGFzc01ldGhvZEZ1bmM9YXJnVHlwZXNbMV0hPT1udWxsJiZjbGFzc1R5cGUhPT1udWxsO3ZhciBuZWVkc0Rlc3RydWN0b3JTdGFjaz1mYWxzZTtmb3IodmFyIGk9MTtpPGFyZ1R5cGVzLmxlbmd0aDsrK2kpe2lmKGFyZ1R5cGVzW2ldIT09bnVsbCYmYXJnVHlwZXNbaV0uZGVzdHJ1Y3RvckZ1bmN0aW9uPT09dW5kZWZpbmVkKXtuZWVkc0Rlc3RydWN0b3JTdGFjaz10cnVlO2JyZWFrfX12YXIgcmV0dXJucz1hcmdUeXBlc1swXS5uYW1lIT09XCJ2b2lkXCI7dmFyIGFyZ3NMaXN0PVwiXCI7dmFyIGFyZ3NMaXN0V2lyZWQ9XCJcIjtmb3IodmFyIGk9MDtpPGFyZ0NvdW50LTI7KytpKXthcmdzTGlzdCs9KGkhPT0wP1wiLCBcIjpcIlwiKStcImFyZ1wiK2k7YXJnc0xpc3RXaXJlZCs9KGkhPT0wP1wiLCBcIjpcIlwiKStcImFyZ1wiK2krXCJXaXJlZFwifXZhciBpbnZva2VyRm5Cb2R5PVwicmV0dXJuIGZ1bmN0aW9uIFwiK21ha2VMZWdhbEZ1bmN0aW9uTmFtZShodW1hbk5hbWUpK1wiKFwiK2FyZ3NMaXN0K1wiKSB7XFxuXCIrXCJpZiAoYXJndW1lbnRzLmxlbmd0aCAhPT0gXCIrKGFyZ0NvdW50LTIpK1wiKSB7XFxuXCIrXCJ0aHJvd0JpbmRpbmdFcnJvcignZnVuY3Rpb24gXCIraHVtYW5OYW1lK1wiIGNhbGxlZCB3aXRoICcgKyBhcmd1bWVudHMubGVuZ3RoICsgJyBhcmd1bWVudHMsIGV4cGVjdGVkIFwiKyhhcmdDb3VudC0yKStcIiBhcmdzIScpO1xcblwiK1wifVxcblwiO2lmKG5lZWRzRGVzdHJ1Y3RvclN0YWNrKXtpbnZva2VyRm5Cb2R5Kz1cInZhciBkZXN0cnVjdG9ycyA9IFtdO1xcblwifXZhciBkdG9yU3RhY2s9bmVlZHNEZXN0cnVjdG9yU3RhY2s/XCJkZXN0cnVjdG9yc1wiOlwibnVsbFwiO3ZhciBhcmdzMT1bXCJ0aHJvd0JpbmRpbmdFcnJvclwiLFwiaW52b2tlclwiLFwiZm5cIixcInJ1bkRlc3RydWN0b3JzXCIsXCJyZXRUeXBlXCIsXCJjbGFzc1BhcmFtXCJdO3ZhciBhcmdzMj1bdGhyb3dCaW5kaW5nRXJyb3IsY3BwSW52b2tlckZ1bmMsY3BwVGFyZ2V0RnVuYyxydW5EZXN0cnVjdG9ycyxhcmdUeXBlc1swXSxhcmdUeXBlc1sxXV07aWYoaXNDbGFzc01ldGhvZEZ1bmMpe2ludm9rZXJGbkJvZHkrPVwidmFyIHRoaXNXaXJlZCA9IGNsYXNzUGFyYW0udG9XaXJlVHlwZShcIitkdG9yU3RhY2srXCIsIHRoaXMpO1xcblwifWZvcih2YXIgaT0wO2k8YXJnQ291bnQtMjsrK2kpe2ludm9rZXJGbkJvZHkrPVwidmFyIGFyZ1wiK2krXCJXaXJlZCA9IGFyZ1R5cGVcIitpK1wiLnRvV2lyZVR5cGUoXCIrZHRvclN0YWNrK1wiLCBhcmdcIitpK1wiKTsgLy8gXCIrYXJnVHlwZXNbaSsyXS5uYW1lK1wiXFxuXCI7YXJnczEucHVzaChcImFyZ1R5cGVcIitpKTthcmdzMi5wdXNoKGFyZ1R5cGVzW2krMl0pfWlmKGlzQ2xhc3NNZXRob2RGdW5jKXthcmdzTGlzdFdpcmVkPVwidGhpc1dpcmVkXCIrKGFyZ3NMaXN0V2lyZWQubGVuZ3RoPjA/XCIsIFwiOlwiXCIpK2FyZ3NMaXN0V2lyZWR9aW52b2tlckZuQm9keSs9KHJldHVybnM/XCJ2YXIgcnYgPSBcIjpcIlwiKStcImludm9rZXIoZm5cIisoYXJnc0xpc3RXaXJlZC5sZW5ndGg+MD9cIiwgXCI6XCJcIikrYXJnc0xpc3RXaXJlZCtcIik7XFxuXCI7aWYobmVlZHNEZXN0cnVjdG9yU3RhY2spe2ludm9rZXJGbkJvZHkrPVwicnVuRGVzdHJ1Y3RvcnMoZGVzdHJ1Y3RvcnMpO1xcblwifWVsc2V7Zm9yKHZhciBpPWlzQ2xhc3NNZXRob2RGdW5jPzE6MjtpPGFyZ1R5cGVzLmxlbmd0aDsrK2kpe3ZhciBwYXJhbU5hbWU9aT09PTE/XCJ0aGlzV2lyZWRcIjpcImFyZ1wiKyhpLTIpK1wiV2lyZWRcIjtpZihhcmdUeXBlc1tpXS5kZXN0cnVjdG9yRnVuY3Rpb24hPT1udWxsKXtpbnZva2VyRm5Cb2R5Kz1wYXJhbU5hbWUrXCJfZHRvcihcIitwYXJhbU5hbWUrXCIpOyAvLyBcIithcmdUeXBlc1tpXS5uYW1lK1wiXFxuXCI7YXJnczEucHVzaChwYXJhbU5hbWUrXCJfZHRvclwiKTthcmdzMi5wdXNoKGFyZ1R5cGVzW2ldLmRlc3RydWN0b3JGdW5jdGlvbil9fX1pZihyZXR1cm5zKXtpbnZva2VyRm5Cb2R5Kz1cInZhciByZXQgPSByZXRUeXBlLmZyb21XaXJlVHlwZShydik7XFxuXCIrXCJyZXR1cm4gcmV0O1xcblwifWVsc2V7fWludm9rZXJGbkJvZHkrPVwifVxcblwiO2FyZ3MxLnB1c2goaW52b2tlckZuQm9keSk7dmFyIGludm9rZXJGdW5jdGlvbj1uZXdfKEZ1bmN0aW9uLGFyZ3MxKS5hcHBseShudWxsLGFyZ3MyKTtyZXR1cm4gaW52b2tlckZ1bmN0aW9ufWZ1bmN0aW9uIGVuc3VyZU92ZXJsb2FkVGFibGUocHJvdG8sbWV0aG9kTmFtZSxodW1hbk5hbWUpe2lmKHVuZGVmaW5lZD09PXByb3RvW21ldGhvZE5hbWVdLm92ZXJsb2FkVGFibGUpe3ZhciBwcmV2RnVuYz1wcm90b1ttZXRob2ROYW1lXTtwcm90b1ttZXRob2ROYW1lXT1mdW5jdGlvbigpe2lmKCFwcm90b1ttZXRob2ROYW1lXS5vdmVybG9hZFRhYmxlLmhhc093blByb3BlcnR5KGFyZ3VtZW50cy5sZW5ndGgpKXt0aHJvd0JpbmRpbmdFcnJvcihcIkZ1bmN0aW9uICdcIitodW1hbk5hbWUrXCInIGNhbGxlZCB3aXRoIGFuIGludmFsaWQgbnVtYmVyIG9mIGFyZ3VtZW50cyAoXCIrYXJndW1lbnRzLmxlbmd0aCtcIikgLSBleHBlY3RzIG9uZSBvZiAoXCIrcHJvdG9bbWV0aG9kTmFtZV0ub3ZlcmxvYWRUYWJsZStcIikhXCIpfXJldHVybiBwcm90b1ttZXRob2ROYW1lXS5vdmVybG9hZFRhYmxlW2FyZ3VtZW50cy5sZW5ndGhdLmFwcGx5KHRoaXMsYXJndW1lbnRzKX07cHJvdG9bbWV0aG9kTmFtZV0ub3ZlcmxvYWRUYWJsZT1bXTtwcm90b1ttZXRob2ROYW1lXS5vdmVybG9hZFRhYmxlW3ByZXZGdW5jLmFyZ0NvdW50XT1wcmV2RnVuY319ZnVuY3Rpb24gZXhwb3NlUHVibGljU3ltYm9sKG5hbWUsdmFsdWUsbnVtQXJndW1lbnRzKXtpZihNb2R1bGUuaGFzT3duUHJvcGVydHkobmFtZSkpe2lmKHVuZGVmaW5lZD09PW51bUFyZ3VtZW50c3x8dW5kZWZpbmVkIT09TW9kdWxlW25hbWVdLm92ZXJsb2FkVGFibGUmJnVuZGVmaW5lZCE9PU1vZHVsZVtuYW1lXS5vdmVybG9hZFRhYmxlW251bUFyZ3VtZW50c10pe3Rocm93QmluZGluZ0Vycm9yKFwiQ2Fubm90IHJlZ2lzdGVyIHB1YmxpYyBuYW1lICdcIituYW1lK1wiJyB0d2ljZVwiKX1lbnN1cmVPdmVybG9hZFRhYmxlKE1vZHVsZSxuYW1lLG5hbWUpO2lmKE1vZHVsZS5oYXNPd25Qcm9wZXJ0eShudW1Bcmd1bWVudHMpKXt0aHJvd0JpbmRpbmdFcnJvcihcIkNhbm5vdCByZWdpc3RlciBtdWx0aXBsZSBvdmVybG9hZHMgb2YgYSBmdW5jdGlvbiB3aXRoIHRoZSBzYW1lIG51bWJlciBvZiBhcmd1bWVudHMgKFwiK251bUFyZ3VtZW50cytcIikhXCIpfU1vZHVsZVtuYW1lXS5vdmVybG9hZFRhYmxlW251bUFyZ3VtZW50c109dmFsdWV9ZWxzZXtNb2R1bGVbbmFtZV09dmFsdWU7aWYodW5kZWZpbmVkIT09bnVtQXJndW1lbnRzKXtNb2R1bGVbbmFtZV0ubnVtQXJndW1lbnRzPW51bUFyZ3VtZW50c319fWZ1bmN0aW9uIGhlYXAzMlZlY3RvclRvQXJyYXkoY291bnQsZmlyc3RFbGVtZW50KXt2YXIgYXJyYXk9W107Zm9yKHZhciBpPTA7aTxjb3VudDtpKyspe2FycmF5LnB1c2goR1JPV0FCTEVfSEVBUF9JMzIoKVsoZmlyc3RFbGVtZW50Pj4yKStpXSl9cmV0dXJuIGFycmF5fWZ1bmN0aW9uIHJlcGxhY2VQdWJsaWNTeW1ib2wobmFtZSx2YWx1ZSxudW1Bcmd1bWVudHMpe2lmKCFNb2R1bGUuaGFzT3duUHJvcGVydHkobmFtZSkpe3Rocm93SW50ZXJuYWxFcnJvcihcIlJlcGxhY2luZyBub25leGlzdGFudCBwdWJsaWMgc3ltYm9sXCIpfWlmKHVuZGVmaW5lZCE9PU1vZHVsZVtuYW1lXS5vdmVybG9hZFRhYmxlJiZ1bmRlZmluZWQhPT1udW1Bcmd1bWVudHMpe01vZHVsZVtuYW1lXS5vdmVybG9hZFRhYmxlW251bUFyZ3VtZW50c109dmFsdWV9ZWxzZXtNb2R1bGVbbmFtZV09dmFsdWU7TW9kdWxlW25hbWVdLmFyZ0NvdW50PW51bUFyZ3VtZW50c319ZnVuY3Rpb24gZHluQ2FsbExlZ2FjeShzaWcscHRyLGFyZ3Mpe3ZhciBmPU1vZHVsZVtcImR5bkNhbGxfXCIrc2lnXTtyZXR1cm4gYXJncyYmYXJncy5sZW5ndGg/Zi5hcHBseShudWxsLFtwdHJdLmNvbmNhdChhcmdzKSk6Zi5jYWxsKG51bGwscHRyKX1mdW5jdGlvbiBkeW5DYWxsKHNpZyxwdHIsYXJncyl7aWYoc2lnLmluY2x1ZGVzKFwialwiKSl7cmV0dXJuIGR5bkNhbGxMZWdhY3koc2lnLHB0cixhcmdzKX1yZXR1cm4gd2FzbVRhYmxlLmdldChwdHIpLmFwcGx5KG51bGwsYXJncyl9ZnVuY3Rpb24gZ2V0RHluQ2FsbGVyKHNpZyxwdHIpe3ZhciBhcmdDYWNoZT1bXTtyZXR1cm4gZnVuY3Rpb24oKXthcmdDYWNoZS5sZW5ndGg9YXJndW1lbnRzLmxlbmd0aDtmb3IodmFyIGk9MDtpPGFyZ3VtZW50cy5sZW5ndGg7aSsrKXthcmdDYWNoZVtpXT1hcmd1bWVudHNbaV19cmV0dXJuIGR5bkNhbGwoc2lnLHB0cixhcmdDYWNoZSl9fWZ1bmN0aW9uIGVtYmluZF9fcmVxdWlyZUZ1bmN0aW9uKHNpZ25hdHVyZSxyYXdGdW5jdGlvbil7c2lnbmF0dXJlPXJlYWRMYXRpbjFTdHJpbmcoc2lnbmF0dXJlKTtmdW5jdGlvbiBtYWtlRHluQ2FsbGVyKCl7aWYoc2lnbmF0dXJlLmluY2x1ZGVzKFwialwiKSl7cmV0dXJuIGdldER5bkNhbGxlcihzaWduYXR1cmUscmF3RnVuY3Rpb24pfXJldHVybiB3YXNtVGFibGUuZ2V0KHJhd0Z1bmN0aW9uKX12YXIgZnA9bWFrZUR5bkNhbGxlcigpO2lmKHR5cGVvZiBmcCE9PVwiZnVuY3Rpb25cIil7dGhyb3dCaW5kaW5nRXJyb3IoXCJ1bmtub3duIGZ1bmN0aW9uIHBvaW50ZXIgd2l0aCBzaWduYXR1cmUgXCIrc2lnbmF0dXJlK1wiOiBcIityYXdGdW5jdGlvbil9cmV0dXJuIGZwfXZhciBVbmJvdW5kVHlwZUVycm9yPXVuZGVmaW5lZDtmdW5jdGlvbiBnZXRUeXBlTmFtZSh0eXBlKXt2YXIgcHRyPV9fX2dldFR5cGVOYW1lKHR5cGUpO3ZhciBydj1yZWFkTGF0aW4xU3RyaW5nKHB0cik7X2ZyZWUocHRyKTtyZXR1cm4gcnZ9ZnVuY3Rpb24gdGhyb3dVbmJvdW5kVHlwZUVycm9yKG1lc3NhZ2UsdHlwZXMpe3ZhciB1bmJvdW5kVHlwZXM9W107dmFyIHNlZW49e307ZnVuY3Rpb24gdmlzaXQodHlwZSl7aWYoc2Vlblt0eXBlXSl7cmV0dXJufWlmKHJlZ2lzdGVyZWRUeXBlc1t0eXBlXSl7cmV0dXJufWlmKHR5cGVEZXBlbmRlbmNpZXNbdHlwZV0pe3R5cGVEZXBlbmRlbmNpZXNbdHlwZV0uZm9yRWFjaCh2aXNpdCk7cmV0dXJufXVuYm91bmRUeXBlcy5wdXNoKHR5cGUpO3NlZW5bdHlwZV09dHJ1ZX10eXBlcy5mb3JFYWNoKHZpc2l0KTt0aHJvdyBuZXcgVW5ib3VuZFR5cGVFcnJvcihtZXNzYWdlK1wiOiBcIit1bmJvdW5kVHlwZXMubWFwKGdldFR5cGVOYW1lKS5qb2luKFtcIiwgXCJdKSl9ZnVuY3Rpb24gX19lbWJpbmRfcmVnaXN0ZXJfZnVuY3Rpb24obmFtZSxhcmdDb3VudCxyYXdBcmdUeXBlc0FkZHIsc2lnbmF0dXJlLHJhd0ludm9rZXIsZm4pe3ZhciBhcmdUeXBlcz1oZWFwMzJWZWN0b3JUb0FycmF5KGFyZ0NvdW50LHJhd0FyZ1R5cGVzQWRkcik7bmFtZT1yZWFkTGF0aW4xU3RyaW5nKG5hbWUpO3Jhd0ludm9rZXI9ZW1iaW5kX19yZXF1aXJlRnVuY3Rpb24oc2lnbmF0dXJlLHJhd0ludm9rZXIpO2V4cG9zZVB1YmxpY1N5bWJvbChuYW1lLGZ1bmN0aW9uKCl7dGhyb3dVbmJvdW5kVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgXCIrbmFtZStcIiBkdWUgdG8gdW5ib3VuZCB0eXBlc1wiLGFyZ1R5cGVzKX0sYXJnQ291bnQtMSk7d2hlbkRlcGVuZGVudFR5cGVzQXJlUmVzb2x2ZWQoW10sYXJnVHlwZXMsZnVuY3Rpb24oYXJnVHlwZXMpe3ZhciBpbnZva2VyQXJnc0FycmF5PVthcmdUeXBlc1swXSxudWxsXS5jb25jYXQoYXJnVHlwZXMuc2xpY2UoMSkpO3JlcGxhY2VQdWJsaWNTeW1ib2wobmFtZSxjcmFmdEludm9rZXJGdW5jdGlvbihuYW1lLGludm9rZXJBcmdzQXJyYXksbnVsbCxyYXdJbnZva2VyLGZuKSxhcmdDb3VudC0xKTtyZXR1cm5bXX0pfWZ1bmN0aW9uIGludGVnZXJSZWFkVmFsdWVGcm9tUG9pbnRlcihuYW1lLHNoaWZ0LHNpZ25lZCl7c3dpdGNoKHNoaWZ0KXtjYXNlIDA6cmV0dXJuIHNpZ25lZD9mdW5jdGlvbiByZWFkUzhGcm9tUG9pbnRlcihwb2ludGVyKXtyZXR1cm4gR1JPV0FCTEVfSEVBUF9JOCgpW3BvaW50ZXJdfTpmdW5jdGlvbiByZWFkVThGcm9tUG9pbnRlcihwb2ludGVyKXtyZXR1cm4gR1JPV0FCTEVfSEVBUF9VOCgpW3BvaW50ZXJdfTtjYXNlIDE6cmV0dXJuIHNpZ25lZD9mdW5jdGlvbiByZWFkUzE2RnJvbVBvaW50ZXIocG9pbnRlcil7cmV0dXJuIEdST1dBQkxFX0hFQVBfSTE2KClbcG9pbnRlcj4+MV19OmZ1bmN0aW9uIHJlYWRVMTZGcm9tUG9pbnRlcihwb2ludGVyKXtyZXR1cm4gR1JPV0FCTEVfSEVBUF9VMTYoKVtwb2ludGVyPj4xXX07Y2FzZSAyOnJldHVybiBzaWduZWQ/ZnVuY3Rpb24gcmVhZFMzMkZyb21Qb2ludGVyKHBvaW50ZXIpe3JldHVybiBHUk9XQUJMRV9IRUFQX0kzMigpW3BvaW50ZXI+PjJdfTpmdW5jdGlvbiByZWFkVTMyRnJvbVBvaW50ZXIocG9pbnRlcil7cmV0dXJuIEdST1dBQkxFX0hFQVBfVTMyKClbcG9pbnRlcj4+Ml19O2RlZmF1bHQ6dGhyb3cgbmV3IFR5cGVFcnJvcihcIlVua25vd24gaW50ZWdlciB0eXBlOiBcIituYW1lKX19ZnVuY3Rpb24gX19lbWJpbmRfcmVnaXN0ZXJfaW50ZWdlcihwcmltaXRpdmVUeXBlLG5hbWUsc2l6ZSxtaW5SYW5nZSxtYXhSYW5nZSl7bmFtZT1yZWFkTGF0aW4xU3RyaW5nKG5hbWUpO2lmKG1heFJhbmdlPT09LTEpe21heFJhbmdlPTQyOTQ5NjcyOTV9dmFyIHNoaWZ0PWdldFNoaWZ0RnJvbVNpemUoc2l6ZSk7dmFyIGZyb21XaXJlVHlwZT1mdW5jdGlvbih2YWx1ZSl7cmV0dXJuIHZhbHVlfTtpZihtaW5SYW5nZT09PTApe3ZhciBiaXRzaGlmdD0zMi04KnNpemU7ZnJvbVdpcmVUeXBlPWZ1bmN0aW9uKHZhbHVlKXtyZXR1cm4gdmFsdWU8PGJpdHNoaWZ0Pj4+Yml0c2hpZnR9fXZhciBpc1Vuc2lnbmVkVHlwZT1uYW1lLmluY2x1ZGVzKFwidW5zaWduZWRcIik7cmVnaXN0ZXJUeXBlKHByaW1pdGl2ZVR5cGUse25hbWU6bmFtZSxcImZyb21XaXJlVHlwZVwiOmZyb21XaXJlVHlwZSxcInRvV2lyZVR5cGVcIjpmdW5jdGlvbihkZXN0cnVjdG9ycyx2YWx1ZSl7aWYodHlwZW9mIHZhbHVlIT09XCJudW1iZXJcIiYmdHlwZW9mIHZhbHVlIT09XCJib29sZWFuXCIpe3Rocm93IG5ldyBUeXBlRXJyb3IoJ0Nhbm5vdCBjb252ZXJ0IFwiJytfZW1iaW5kX3JlcHIodmFsdWUpKydcIiB0byAnK3RoaXMubmFtZSl9aWYodmFsdWU8bWluUmFuZ2V8fHZhbHVlPm1heFJhbmdlKXt0aHJvdyBuZXcgVHlwZUVycm9yKCdQYXNzaW5nIGEgbnVtYmVyIFwiJytfZW1iaW5kX3JlcHIodmFsdWUpKydcIiBmcm9tIEpTIHNpZGUgdG8gQy9DKysgc2lkZSB0byBhbiBhcmd1bWVudCBvZiB0eXBlIFwiJytuYW1lKydcIiwgd2hpY2ggaXMgb3V0c2lkZSB0aGUgdmFsaWQgcmFuZ2UgWycrbWluUmFuZ2UrXCIsIFwiK21heFJhbmdlK1wiXSFcIil9cmV0dXJuIGlzVW5zaWduZWRUeXBlP3ZhbHVlPj4+MDp2YWx1ZXwwfSxcImFyZ1BhY2tBZHZhbmNlXCI6OCxcInJlYWRWYWx1ZUZyb21Qb2ludGVyXCI6aW50ZWdlclJlYWRWYWx1ZUZyb21Qb2ludGVyKG5hbWUsc2hpZnQsbWluUmFuZ2UhPT0wKSxkZXN0cnVjdG9yRnVuY3Rpb246bnVsbH0pfWZ1bmN0aW9uIF9fZW1iaW5kX3JlZ2lzdGVyX21lbW9yeV92aWV3KHJhd1R5cGUsZGF0YVR5cGVJbmRleCxuYW1lKXt2YXIgdHlwZU1hcHBpbmc9W0ludDhBcnJheSxVaW50OEFycmF5LEludDE2QXJyYXksVWludDE2QXJyYXksSW50MzJBcnJheSxVaW50MzJBcnJheSxGbG9hdDMyQXJyYXksRmxvYXQ2NEFycmF5XTt2YXIgVEE9dHlwZU1hcHBpbmdbZGF0YVR5cGVJbmRleF07ZnVuY3Rpb24gZGVjb2RlTWVtb3J5VmlldyhoYW5kbGUpe2hhbmRsZT1oYW5kbGU+PjI7dmFyIGhlYXA9R1JPV0FCTEVfSEVBUF9VMzIoKTt2YXIgc2l6ZT1oZWFwW2hhbmRsZV07dmFyIGRhdGE9aGVhcFtoYW5kbGUrMV07cmV0dXJuIG5ldyBUQShidWZmZXIsZGF0YSxzaXplKX1uYW1lPXJlYWRMYXRpbjFTdHJpbmcobmFtZSk7cmVnaXN0ZXJUeXBlKHJhd1R5cGUse25hbWU6bmFtZSxcImZyb21XaXJlVHlwZVwiOmRlY29kZU1lbW9yeVZpZXcsXCJhcmdQYWNrQWR2YW5jZVwiOjgsXCJyZWFkVmFsdWVGcm9tUG9pbnRlclwiOmRlY29kZU1lbW9yeVZpZXd9LHtpZ25vcmVEdXBsaWNhdGVSZWdpc3RyYXRpb25zOnRydWV9KX1mdW5jdGlvbiBfX2VtYmluZF9yZWdpc3Rlcl9zdGRfc3RyaW5nKHJhd1R5cGUsbmFtZSl7bmFtZT1yZWFkTGF0aW4xU3RyaW5nKG5hbWUpO3ZhciBzdGRTdHJpbmdJc1VURjg9bmFtZT09PVwic3RkOjpzdHJpbmdcIjtyZWdpc3RlclR5cGUocmF3VHlwZSx7bmFtZTpuYW1lLFwiZnJvbVdpcmVUeXBlXCI6ZnVuY3Rpb24odmFsdWUpe3ZhciBsZW5ndGg9R1JPV0FCTEVfSEVBUF9VMzIoKVt2YWx1ZT4+Ml07dmFyIHN0cjtpZihzdGRTdHJpbmdJc1VURjgpe3ZhciBkZWNvZGVTdGFydFB0cj12YWx1ZSs0O2Zvcih2YXIgaT0wO2k8PWxlbmd0aDsrK2kpe3ZhciBjdXJyZW50Qnl0ZVB0cj12YWx1ZSs0K2k7aWYoaT09bGVuZ3RofHxHUk9XQUJMRV9IRUFQX1U4KClbY3VycmVudEJ5dGVQdHJdPT0wKXt2YXIgbWF4UmVhZD1jdXJyZW50Qnl0ZVB0ci1kZWNvZGVTdGFydFB0cjt2YXIgc3RyaW5nU2VnbWVudD1VVEY4VG9TdHJpbmcoZGVjb2RlU3RhcnRQdHIsbWF4UmVhZCk7aWYoc3RyPT09dW5kZWZpbmVkKXtzdHI9c3RyaW5nU2VnbWVudH1lbHNle3N0cis9U3RyaW5nLmZyb21DaGFyQ29kZSgwKTtzdHIrPXN0cmluZ1NlZ21lbnR9ZGVjb2RlU3RhcnRQdHI9Y3VycmVudEJ5dGVQdHIrMX19fWVsc2V7dmFyIGE9bmV3IEFycmF5KGxlbmd0aCk7Zm9yKHZhciBpPTA7aTxsZW5ndGg7KytpKXthW2ldPVN0cmluZy5mcm9tQ2hhckNvZGUoR1JPV0FCTEVfSEVBUF9VOCgpW3ZhbHVlKzQraV0pfXN0cj1hLmpvaW4oXCJcIil9X2ZyZWUodmFsdWUpO3JldHVybiBzdHJ9LFwidG9XaXJlVHlwZVwiOmZ1bmN0aW9uKGRlc3RydWN0b3JzLHZhbHVlKXtpZih2YWx1ZSBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKXt2YWx1ZT1uZXcgVWludDhBcnJheSh2YWx1ZSl9dmFyIGdldExlbmd0aDt2YXIgdmFsdWVJc09mVHlwZVN0cmluZz10eXBlb2YgdmFsdWU9PT1cInN0cmluZ1wiO2lmKCEodmFsdWVJc09mVHlwZVN0cmluZ3x8dmFsdWUgaW5zdGFuY2VvZiBVaW50OEFycmF5fHx2YWx1ZSBpbnN0YW5jZW9mIFVpbnQ4Q2xhbXBlZEFycmF5fHx2YWx1ZSBpbnN0YW5jZW9mIEludDhBcnJheSkpe3Rocm93QmluZGluZ0Vycm9yKFwiQ2Fubm90IHBhc3Mgbm9uLXN0cmluZyB0byBzdGQ6OnN0cmluZ1wiKX1pZihzdGRTdHJpbmdJc1VURjgmJnZhbHVlSXNPZlR5cGVTdHJpbmcpe2dldExlbmd0aD1mdW5jdGlvbigpe3JldHVybiBsZW5ndGhCeXRlc1VURjgodmFsdWUpfX1lbHNle2dldExlbmd0aD1mdW5jdGlvbigpe3JldHVybiB2YWx1ZS5sZW5ndGh9fXZhciBsZW5ndGg9Z2V0TGVuZ3RoKCk7dmFyIHB0cj1fbWFsbG9jKDQrbGVuZ3RoKzEpO0dST1dBQkxFX0hFQVBfVTMyKClbcHRyPj4yXT1sZW5ndGg7aWYoc3RkU3RyaW5nSXNVVEY4JiZ2YWx1ZUlzT2ZUeXBlU3RyaW5nKXtzdHJpbmdUb1VURjgodmFsdWUscHRyKzQsbGVuZ3RoKzEpfWVsc2V7aWYodmFsdWVJc09mVHlwZVN0cmluZyl7Zm9yKHZhciBpPTA7aTxsZW5ndGg7KytpKXt2YXIgY2hhckNvZGU9dmFsdWUuY2hhckNvZGVBdChpKTtpZihjaGFyQ29kZT4yNTUpe19mcmVlKHB0cik7dGhyb3dCaW5kaW5nRXJyb3IoXCJTdHJpbmcgaGFzIFVURi0xNiBjb2RlIHVuaXRzIHRoYXQgZG8gbm90IGZpdCBpbiA4IGJpdHNcIil9R1JPV0FCTEVfSEVBUF9VOCgpW3B0cis0K2ldPWNoYXJDb2RlfX1lbHNle2Zvcih2YXIgaT0wO2k8bGVuZ3RoOysraSl7R1JPV0FCTEVfSEVBUF9VOCgpW3B0cis0K2ldPXZhbHVlW2ldfX19aWYoZGVzdHJ1Y3RvcnMhPT1udWxsKXtkZXN0cnVjdG9ycy5wdXNoKF9mcmVlLHB0cil9cmV0dXJuIHB0cn0sXCJhcmdQYWNrQWR2YW5jZVwiOjgsXCJyZWFkVmFsdWVGcm9tUG9pbnRlclwiOnNpbXBsZVJlYWRWYWx1ZUZyb21Qb2ludGVyLGRlc3RydWN0b3JGdW5jdGlvbjpmdW5jdGlvbihwdHIpe19mcmVlKHB0cil9fSl9ZnVuY3Rpb24gX19lbWJpbmRfcmVnaXN0ZXJfc3RkX3dzdHJpbmcocmF3VHlwZSxjaGFyU2l6ZSxuYW1lKXtuYW1lPXJlYWRMYXRpbjFTdHJpbmcobmFtZSk7dmFyIGRlY29kZVN0cmluZyxlbmNvZGVTdHJpbmcsZ2V0SGVhcCxsZW5ndGhCeXRlc1VURixzaGlmdDtpZihjaGFyU2l6ZT09PTIpe2RlY29kZVN0cmluZz1VVEYxNlRvU3RyaW5nO2VuY29kZVN0cmluZz1zdHJpbmdUb1VURjE2O2xlbmd0aEJ5dGVzVVRGPWxlbmd0aEJ5dGVzVVRGMTY7Z2V0SGVhcD1mdW5jdGlvbigpe3JldHVybiBHUk9XQUJMRV9IRUFQX1UxNigpfTtzaGlmdD0xfWVsc2UgaWYoY2hhclNpemU9PT00KXtkZWNvZGVTdHJpbmc9VVRGMzJUb1N0cmluZztlbmNvZGVTdHJpbmc9c3RyaW5nVG9VVEYzMjtsZW5ndGhCeXRlc1VURj1sZW5ndGhCeXRlc1VURjMyO2dldEhlYXA9ZnVuY3Rpb24oKXtyZXR1cm4gR1JPV0FCTEVfSEVBUF9VMzIoKX07c2hpZnQ9Mn1yZWdpc3RlclR5cGUocmF3VHlwZSx7bmFtZTpuYW1lLFwiZnJvbVdpcmVUeXBlXCI6ZnVuY3Rpb24odmFsdWUpe3ZhciBsZW5ndGg9R1JPV0FCTEVfSEVBUF9VMzIoKVt2YWx1ZT4+Ml07dmFyIEhFQVA9Z2V0SGVhcCgpO3ZhciBzdHI7dmFyIGRlY29kZVN0YXJ0UHRyPXZhbHVlKzQ7Zm9yKHZhciBpPTA7aTw9bGVuZ3RoOysraSl7dmFyIGN1cnJlbnRCeXRlUHRyPXZhbHVlKzQraSpjaGFyU2l6ZTtpZihpPT1sZW5ndGh8fEhFQVBbY3VycmVudEJ5dGVQdHI+PnNoaWZ0XT09MCl7dmFyIG1heFJlYWRCeXRlcz1jdXJyZW50Qnl0ZVB0ci1kZWNvZGVTdGFydFB0cjt2YXIgc3RyaW5nU2VnbWVudD1kZWNvZGVTdHJpbmcoZGVjb2RlU3RhcnRQdHIsbWF4UmVhZEJ5dGVzKTtpZihzdHI9PT11bmRlZmluZWQpe3N0cj1zdHJpbmdTZWdtZW50fWVsc2V7c3RyKz1TdHJpbmcuZnJvbUNoYXJDb2RlKDApO3N0cis9c3RyaW5nU2VnbWVudH1kZWNvZGVTdGFydFB0cj1jdXJyZW50Qnl0ZVB0citjaGFyU2l6ZX19X2ZyZWUodmFsdWUpO3JldHVybiBzdHJ9LFwidG9XaXJlVHlwZVwiOmZ1bmN0aW9uKGRlc3RydWN0b3JzLHZhbHVlKXtpZighKHR5cGVvZiB2YWx1ZT09PVwic3RyaW5nXCIpKXt0aHJvd0JpbmRpbmdFcnJvcihcIkNhbm5vdCBwYXNzIG5vbi1zdHJpbmcgdG8gQysrIHN0cmluZyB0eXBlIFwiK25hbWUpfXZhciBsZW5ndGg9bGVuZ3RoQnl0ZXNVVEYodmFsdWUpO3ZhciBwdHI9X21hbGxvYyg0K2xlbmd0aCtjaGFyU2l6ZSk7R1JPV0FCTEVfSEVBUF9VMzIoKVtwdHI+PjJdPWxlbmd0aD4+c2hpZnQ7ZW5jb2RlU3RyaW5nKHZhbHVlLHB0cis0LGxlbmd0aCtjaGFyU2l6ZSk7aWYoZGVzdHJ1Y3RvcnMhPT1udWxsKXtkZXN0cnVjdG9ycy5wdXNoKF9mcmVlLHB0cil9cmV0dXJuIHB0cn0sXCJhcmdQYWNrQWR2YW5jZVwiOjgsXCJyZWFkVmFsdWVGcm9tUG9pbnRlclwiOnNpbXBsZVJlYWRWYWx1ZUZyb21Qb2ludGVyLGRlc3RydWN0b3JGdW5jdGlvbjpmdW5jdGlvbihwdHIpe19mcmVlKHB0cil9fSl9ZnVuY3Rpb24gX19lbWJpbmRfcmVnaXN0ZXJfdmFsdWVfb2JqZWN0KHJhd1R5cGUsbmFtZSxjb25zdHJ1Y3RvclNpZ25hdHVyZSxyYXdDb25zdHJ1Y3RvcixkZXN0cnVjdG9yU2lnbmF0dXJlLHJhd0Rlc3RydWN0b3Ipe3N0cnVjdFJlZ2lzdHJhdGlvbnNbcmF3VHlwZV09e25hbWU6cmVhZExhdGluMVN0cmluZyhuYW1lKSxyYXdDb25zdHJ1Y3RvcjplbWJpbmRfX3JlcXVpcmVGdW5jdGlvbihjb25zdHJ1Y3RvclNpZ25hdHVyZSxyYXdDb25zdHJ1Y3RvcikscmF3RGVzdHJ1Y3RvcjplbWJpbmRfX3JlcXVpcmVGdW5jdGlvbihkZXN0cnVjdG9yU2lnbmF0dXJlLHJhd0Rlc3RydWN0b3IpLGZpZWxkczpbXX19ZnVuY3Rpb24gX19lbWJpbmRfcmVnaXN0ZXJfdmFsdWVfb2JqZWN0X2ZpZWxkKHN0cnVjdFR5cGUsZmllbGROYW1lLGdldHRlclJldHVyblR5cGUsZ2V0dGVyU2lnbmF0dXJlLGdldHRlcixnZXR0ZXJDb250ZXh0LHNldHRlckFyZ3VtZW50VHlwZSxzZXR0ZXJTaWduYXR1cmUsc2V0dGVyLHNldHRlckNvbnRleHQpe3N0cnVjdFJlZ2lzdHJhdGlvbnNbc3RydWN0VHlwZV0uZmllbGRzLnB1c2goe2ZpZWxkTmFtZTpyZWFkTGF0aW4xU3RyaW5nKGZpZWxkTmFtZSksZ2V0dGVyUmV0dXJuVHlwZTpnZXR0ZXJSZXR1cm5UeXBlLGdldHRlcjplbWJpbmRfX3JlcXVpcmVGdW5jdGlvbihnZXR0ZXJTaWduYXR1cmUsZ2V0dGVyKSxnZXR0ZXJDb250ZXh0OmdldHRlckNvbnRleHQsc2V0dGVyQXJndW1lbnRUeXBlOnNldHRlckFyZ3VtZW50VHlwZSxzZXR0ZXI6ZW1iaW5kX19yZXF1aXJlRnVuY3Rpb24oc2V0dGVyU2lnbmF0dXJlLHNldHRlciksc2V0dGVyQ29udGV4dDpzZXR0ZXJDb250ZXh0fSl9ZnVuY3Rpb24gX19lbWJpbmRfcmVnaXN0ZXJfdm9pZChyYXdUeXBlLG5hbWUpe25hbWU9cmVhZExhdGluMVN0cmluZyhuYW1lKTtyZWdpc3RlclR5cGUocmF3VHlwZSx7aXNWb2lkOnRydWUsbmFtZTpuYW1lLFwiYXJnUGFja0FkdmFuY2VcIjowLFwiZnJvbVdpcmVUeXBlXCI6ZnVuY3Rpb24oKXtyZXR1cm4gdW5kZWZpbmVkfSxcInRvV2lyZVR5cGVcIjpmdW5jdGlvbihkZXN0cnVjdG9ycyxvKXtyZXR1cm4gdW5kZWZpbmVkfX0pfWZ1bmN0aW9uIF9fZW1zY3JpcHRlbl9ub3RpZnlfdGhyZWFkX3F1ZXVlKHRhcmdldFRocmVhZElkLG1haW5UaHJlYWRJZCl7aWYodGFyZ2V0VGhyZWFkSWQ9PW1haW5UaHJlYWRJZCl7cG9zdE1lc3NhZ2Uoe1wiY21kXCI6XCJwcm9jZXNzUXVldWVkTWFpblRocmVhZFdvcmtcIn0pfWVsc2UgaWYoRU5WSVJPTk1FTlRfSVNfUFRIUkVBRCl7cG9zdE1lc3NhZ2Uoe1widGFyZ2V0VGhyZWFkXCI6dGFyZ2V0VGhyZWFkSWQsXCJjbWRcIjpcInByb2Nlc3NUaHJlYWRRdWV1ZVwifSl9ZWxzZXt2YXIgcHRocmVhZD1QVGhyZWFkLnB0aHJlYWRzW3RhcmdldFRocmVhZElkXTt2YXIgd29ya2VyPXB0aHJlYWQmJnB0aHJlYWQud29ya2VyO2lmKCF3b3JrZXIpe3JldHVybn13b3JrZXIucG9zdE1lc3NhZ2Uoe1wiY21kXCI6XCJwcm9jZXNzVGhyZWFkUXVldWVcIn0pfXJldHVybiAxfXZhciBlbXZhbF9zeW1ib2xzPXt9O2Z1bmN0aW9uIGdldFN0cmluZ09yU3ltYm9sKGFkZHJlc3Mpe3ZhciBzeW1ib2w9ZW12YWxfc3ltYm9sc1thZGRyZXNzXTtpZihzeW1ib2w9PT11bmRlZmluZWQpe3JldHVybiByZWFkTGF0aW4xU3RyaW5nKGFkZHJlc3MpfWVsc2V7cmV0dXJuIHN5bWJvbH19ZnVuY3Rpb24gZW12YWxfZ2V0X2dsb2JhbCgpe2lmKHR5cGVvZiBnbG9iYWxUaGlzPT09XCJvYmplY3RcIil7cmV0dXJuIGdsb2JhbFRoaXN9cmV0dXJuIGZ1bmN0aW9uKCl7cmV0dXJuIEZ1bmN0aW9ufSgpKFwicmV0dXJuIHRoaXNcIikoKX1mdW5jdGlvbiBfX2VtdmFsX2dldF9nbG9iYWwobmFtZSl7aWYobmFtZT09PTApe3JldHVybiBfX2VtdmFsX3JlZ2lzdGVyKGVtdmFsX2dldF9nbG9iYWwoKSl9ZWxzZXtuYW1lPWdldFN0cmluZ09yU3ltYm9sKG5hbWUpO3JldHVybiBfX2VtdmFsX3JlZ2lzdGVyKGVtdmFsX2dldF9nbG9iYWwoKVtuYW1lXSl9fWZ1bmN0aW9uIF9fZW12YWxfaW5jcmVmKGhhbmRsZSl7aWYoaGFuZGxlPjQpe2VtdmFsX2hhbmRsZV9hcnJheVtoYW5kbGVdLnJlZmNvdW50Kz0xfX1mdW5jdGlvbiByZXF1aXJlUmVnaXN0ZXJlZFR5cGUocmF3VHlwZSxodW1hbk5hbWUpe3ZhciBpbXBsPXJlZ2lzdGVyZWRUeXBlc1tyYXdUeXBlXTtpZih1bmRlZmluZWQ9PT1pbXBsKXt0aHJvd0JpbmRpbmdFcnJvcihodW1hbk5hbWUrXCIgaGFzIHVua25vd24gdHlwZSBcIitnZXRUeXBlTmFtZShyYXdUeXBlKSl9cmV0dXJuIGltcGx9ZnVuY3Rpb24gY3JhZnRFbXZhbEFsbG9jYXRvcihhcmdDb3VudCl7dmFyIGFyZ3NMaXN0PVwiXCI7Zm9yKHZhciBpPTA7aTxhcmdDb3VudDsrK2kpe2FyZ3NMaXN0Kz0oaSE9PTA/XCIsIFwiOlwiXCIpK1wiYXJnXCIraX12YXIgZnVuY3Rpb25Cb2R5PVwicmV0dXJuIGZ1bmN0aW9uIGVtdmFsX2FsbG9jYXRvcl9cIithcmdDb3VudCtcIihjb25zdHJ1Y3RvciwgYXJnVHlwZXMsIGFyZ3MpIHtcXG5cIjtmb3IodmFyIGk9MDtpPGFyZ0NvdW50OysraSl7ZnVuY3Rpb25Cb2R5Kz1cInZhciBhcmdUeXBlXCIraStcIiA9IHJlcXVpcmVSZWdpc3RlcmVkVHlwZShNb2R1bGVbJ0hFQVAzMiddWyhhcmdUeXBlcyA+Pj4gMikgKyBcIitpKyddLCBcInBhcmFtZXRlciAnK2krJ1wiKTtcXG4nK1widmFyIGFyZ1wiK2krXCIgPSBhcmdUeXBlXCIraStcIi5yZWFkVmFsdWVGcm9tUG9pbnRlcihhcmdzKTtcXG5cIitcImFyZ3MgKz0gYXJnVHlwZVwiK2krXCJbJ2FyZ1BhY2tBZHZhbmNlJ107XFxuXCJ9ZnVuY3Rpb25Cb2R5Kz1cInZhciBvYmogPSBuZXcgY29uc3RydWN0b3IoXCIrYXJnc0xpc3QrXCIpO1xcblwiK1wicmV0dXJuIF9fZW12YWxfcmVnaXN0ZXIob2JqKTtcXG5cIitcIn1cXG5cIjtyZXR1cm4gbmV3IEZ1bmN0aW9uKFwicmVxdWlyZVJlZ2lzdGVyZWRUeXBlXCIsXCJNb2R1bGVcIixcIl9fZW12YWxfcmVnaXN0ZXJcIixmdW5jdGlvbkJvZHkpKHJlcXVpcmVSZWdpc3RlcmVkVHlwZSxNb2R1bGUsX19lbXZhbF9yZWdpc3Rlcil9dmFyIGVtdmFsX25ld2Vycz17fTtmdW5jdGlvbiByZXF1aXJlSGFuZGxlKGhhbmRsZSl7aWYoIWhhbmRsZSl7dGhyb3dCaW5kaW5nRXJyb3IoXCJDYW5ub3QgdXNlIGRlbGV0ZWQgdmFsLiBoYW5kbGUgPSBcIitoYW5kbGUpfXJldHVybiBlbXZhbF9oYW5kbGVfYXJyYXlbaGFuZGxlXS52YWx1ZX1mdW5jdGlvbiBfX2VtdmFsX25ldyhoYW5kbGUsYXJnQ291bnQsYXJnVHlwZXMsYXJncyl7aGFuZGxlPXJlcXVpcmVIYW5kbGUoaGFuZGxlKTt2YXIgbmV3ZXI9ZW12YWxfbmV3ZXJzW2FyZ0NvdW50XTtpZighbmV3ZXIpe25ld2VyPWNyYWZ0RW12YWxBbGxvY2F0b3IoYXJnQ291bnQpO2VtdmFsX25ld2Vyc1thcmdDb3VudF09bmV3ZXJ9cmV0dXJuIG5ld2VyKGhhbmRsZSxhcmdUeXBlcyxhcmdzKX1mdW5jdGlvbiBfYWJvcnQoKXthYm9ydCgpfXZhciByZWFkQXNtQ29uc3RBcmdzQXJyYXk9W107ZnVuY3Rpb24gcmVhZEFzbUNvbnN0QXJncyhzaWdQdHIsYnVmKXtyZWFkQXNtQ29uc3RBcmdzQXJyYXkubGVuZ3RoPTA7dmFyIGNoO2J1Zj4+PTI7d2hpbGUoY2g9R1JPV0FCTEVfSEVBUF9VOCgpW3NpZ1B0cisrXSl7dmFyIGRvdWJsZT1jaDwxMDU7aWYoZG91YmxlJiZidWYmMSlidWYrKztyZWFkQXNtQ29uc3RBcmdzQXJyYXkucHVzaChkb3VibGU/R1JPV0FCTEVfSEVBUF9GNjQoKVtidWYrKz4+MV06R1JPV0FCTEVfSEVBUF9JMzIoKVtidWZdKTsrK2J1Zn1yZXR1cm4gcmVhZEFzbUNvbnN0QXJnc0FycmF5fWZ1bmN0aW9uIF9lbXNjcmlwdGVuX2FzbV9jb25zdF9pbnQoY29kZSxzaWdQdHIsYXJnYnVmKXt2YXIgYXJncz1yZWFkQXNtQ29uc3RBcmdzKHNpZ1B0cixhcmdidWYpO3JldHVybiBBU01fQ09OU1RTW2NvZGVdLmFwcGx5KG51bGwsYXJncyl9ZnVuY3Rpb24gX2Vtc2NyaXB0ZW5fY2hlY2tfYmxvY2tpbmdfYWxsb3dlZCgpe2lmKEVOVklST05NRU5UX0lTX1dPUktFUilyZXR1cm47d2Fybk9uY2UoXCJCbG9ja2luZyBvbiB0aGUgbWFpbiB0aHJlYWQgaXMgdmVyeSBkYW5nZXJvdXMsIHNlZSBodHRwczovL2Vtc2NyaXB0ZW4ub3JnL2RvY3MvcG9ydGluZy9wdGhyZWFkcy5odG1sI2Jsb2NraW5nLW9uLXRoZS1tYWluLWJyb3dzZXItdGhyZWFkXCIpfWZ1bmN0aW9uIF9lbXNjcmlwdGVuX2NvbmRpdGlvbmFsX3NldF9jdXJyZW50X3RocmVhZF9zdGF0dXMoZXhwZWN0ZWRTdGF0dXMsbmV3U3RhdHVzKXt9ZnVuY3Rpb24gX2Vtc2NyaXB0ZW5fZnV0ZXhfd2FpdChhZGRyLHZhbCx0aW1lb3V0KXtpZihhZGRyPD0wfHxhZGRyPkdST1dBQkxFX0hFQVBfSTgoKS5sZW5ndGh8fGFkZHImMyE9MClyZXR1cm4tMjg7aWYoIUVOVklST05NRU5UX0lTX1dFQil7dmFyIHJldD1BdG9taWNzLndhaXQoR1JPV0FCTEVfSEVBUF9JMzIoKSxhZGRyPj4yLHZhbCx0aW1lb3V0KTtpZihyZXQ9PT1cInRpbWVkLW91dFwiKXJldHVybi03MztpZihyZXQ9PT1cIm5vdC1lcXVhbFwiKXJldHVybi02O2lmKHJldD09PVwib2tcIilyZXR1cm4gMDt0aHJvd1wiQXRvbWljcy53YWl0IHJldHVybmVkIGFuIHVuZXhwZWN0ZWQgdmFsdWUgXCIrcmV0fWVsc2V7aWYoQXRvbWljcy5sb2FkKEdST1dBQkxFX0hFQVBfSTMyKCksYWRkcj4+MikhPXZhbCl7cmV0dXJuLTZ9dmFyIHROb3c9cGVyZm9ybWFuY2Uubm93KCk7dmFyIHRFbmQ9dE5vdyt0aW1lb3V0O3ZhciBsYXN0QWRkcj1BdG9taWNzLmV4Y2hhbmdlKEdST1dBQkxFX0hFQVBfSTMyKCksX19lbXNjcmlwdGVuX21haW5fdGhyZWFkX2Z1dGV4Pj4yLGFkZHIpO3doaWxlKDEpe3ROb3c9cGVyZm9ybWFuY2Uubm93KCk7aWYodE5vdz50RW5kKXtsYXN0QWRkcj1BdG9taWNzLmV4Y2hhbmdlKEdST1dBQkxFX0hFQVBfSTMyKCksX19lbXNjcmlwdGVuX21haW5fdGhyZWFkX2Z1dGV4Pj4yLDApO3JldHVybi03M31sYXN0QWRkcj1BdG9taWNzLmV4Y2hhbmdlKEdST1dBQkxFX0hFQVBfSTMyKCksX19lbXNjcmlwdGVuX21haW5fdGhyZWFkX2Z1dGV4Pj4yLDApO2lmKGxhc3RBZGRyPT0wKXticmVha31fZW1zY3JpcHRlbl9tYWluX3RocmVhZF9wcm9jZXNzX3F1ZXVlZF9jYWxscygpO2lmKEF0b21pY3MubG9hZChHUk9XQUJMRV9IRUFQX0kzMigpLGFkZHI+PjIpIT12YWwpe3JldHVybi02fWxhc3RBZGRyPUF0b21pY3MuZXhjaGFuZ2UoR1JPV0FCTEVfSEVBUF9JMzIoKSxfX2Vtc2NyaXB0ZW5fbWFpbl90aHJlYWRfZnV0ZXg+PjIsYWRkcil9cmV0dXJuIDB9fWZ1bmN0aW9uIF9sb25nam1wKGVudix2YWx1ZSl7X3NldFRocmV3KGVudix2YWx1ZXx8MSk7dGhyb3dcImxvbmdqbXBcIn1mdW5jdGlvbiBfZW1zY3JpcHRlbl9sb25nam1wKGEwLGExKXtyZXR1cm4gX2xvbmdqbXAoYTAsYTEpfWZ1bmN0aW9uIF9lbXNjcmlwdGVuX21lbWNweV9iaWcoZGVzdCxzcmMsbnVtKXtHUk9XQUJMRV9IRUFQX1U4KCkuY29weVdpdGhpbihkZXN0LHNyYyxzcmMrbnVtKX1mdW5jdGlvbiBfZW1zY3JpcHRlbl9udW1fbG9naWNhbF9jb3Jlcygpe3JldHVybiBuYXZpZ2F0b3JbXCJoYXJkd2FyZUNvbmN1cnJlbmN5XCJdfWZ1bmN0aW9uIF9lbXNjcmlwdGVuX3Byb3h5X3RvX21haW5fdGhyZWFkX2pzKGluZGV4LHN5bmMpe3ZhciBudW1DYWxsQXJncz1hcmd1bWVudHMubGVuZ3RoLTI7dmFyIHN0YWNrPXN0YWNrU2F2ZSgpO3ZhciBzZXJpYWxpemVkTnVtQ2FsbEFyZ3M9bnVtQ2FsbEFyZ3M7dmFyIGFyZ3M9c3RhY2tBbGxvYyhzZXJpYWxpemVkTnVtQ2FsbEFyZ3MqOCk7dmFyIGI9YXJncz4+Mztmb3IodmFyIGk9MDtpPG51bUNhbGxBcmdzO2krKyl7dmFyIGFyZz1hcmd1bWVudHNbMitpXTtHUk9XQUJMRV9IRUFQX0Y2NCgpW2IraV09YXJnfXZhciByZXQ9X2Vtc2NyaXB0ZW5fcnVuX2luX21haW5fcnVudGltZV90aHJlYWRfanMoaW5kZXgsc2VyaWFsaXplZE51bUNhbGxBcmdzLGFyZ3Msc3luYyk7c3RhY2tSZXN0b3JlKHN0YWNrKTtyZXR1cm4gcmV0fXZhciBfZW1zY3JpcHRlbl9yZWNlaXZlX29uX21haW5fdGhyZWFkX2pzX2NhbGxBcmdzPVtdO2Z1bmN0aW9uIF9lbXNjcmlwdGVuX3JlY2VpdmVfb25fbWFpbl90aHJlYWRfanMoaW5kZXgsbnVtQ2FsbEFyZ3MsYXJncyl7X2Vtc2NyaXB0ZW5fcmVjZWl2ZV9vbl9tYWluX3RocmVhZF9qc19jYWxsQXJncy5sZW5ndGg9bnVtQ2FsbEFyZ3M7dmFyIGI9YXJncz4+Mztmb3IodmFyIGk9MDtpPG51bUNhbGxBcmdzO2krKyl7X2Vtc2NyaXB0ZW5fcmVjZWl2ZV9vbl9tYWluX3RocmVhZF9qc19jYWxsQXJnc1tpXT1HUk9XQUJMRV9IRUFQX0Y2NCgpW2IraV19dmFyIGlzRW1Bc21Db25zdD1pbmRleDwwO3ZhciBmdW5jPSFpc0VtQXNtQ29uc3Q/cHJveGllZEZ1bmN0aW9uVGFibGVbaW5kZXhdOkFTTV9DT05TVFNbLWluZGV4LTFdO3JldHVybiBmdW5jLmFwcGx5KG51bGwsX2Vtc2NyaXB0ZW5fcmVjZWl2ZV9vbl9tYWluX3RocmVhZF9qc19jYWxsQXJncyl9ZnVuY3Rpb24gZW1zY3JpcHRlbl9yZWFsbG9jX2J1ZmZlcihzaXplKXt0cnl7d2FzbU1lbW9yeS5ncm93KHNpemUtYnVmZmVyLmJ5dGVMZW5ndGgrNjU1MzU+Pj4xNik7dXBkYXRlR2xvYmFsQnVmZmVyQW5kVmlld3Mod2FzbU1lbW9yeS5idWZmZXIpO3JldHVybiAxfWNhdGNoKGUpe319ZnVuY3Rpb24gX2Vtc2NyaXB0ZW5fcmVzaXplX2hlYXAocmVxdWVzdGVkU2l6ZSl7dmFyIG9sZFNpemU9R1JPV0FCTEVfSEVBUF9VOCgpLmxlbmd0aDtyZXF1ZXN0ZWRTaXplPXJlcXVlc3RlZFNpemU+Pj4wO2lmKHJlcXVlc3RlZFNpemU8PW9sZFNpemUpe3JldHVybiBmYWxzZX12YXIgbWF4SGVhcFNpemU9MjE0NzQ4MzY0ODtpZihyZXF1ZXN0ZWRTaXplPm1heEhlYXBTaXplKXtyZXR1cm4gZmFsc2V9Zm9yKHZhciBjdXREb3duPTE7Y3V0RG93bjw9NDtjdXREb3duKj0yKXt2YXIgb3Zlckdyb3duSGVhcFNpemU9b2xkU2l6ZSooMSsuMi9jdXREb3duKTtvdmVyR3Jvd25IZWFwU2l6ZT1NYXRoLm1pbihvdmVyR3Jvd25IZWFwU2l6ZSxyZXF1ZXN0ZWRTaXplKzEwMDY2MzI5Nik7dmFyIG5ld1NpemU9TWF0aC5taW4obWF4SGVhcFNpemUsYWxpZ25VcChNYXRoLm1heChyZXF1ZXN0ZWRTaXplLG92ZXJHcm93bkhlYXBTaXplKSw2NTUzNikpO3ZhciByZXBsYWNlbWVudD1lbXNjcmlwdGVuX3JlYWxsb2NfYnVmZmVyKG5ld1NpemUpO2lmKHJlcGxhY2VtZW50KXtyZXR1cm4gdHJ1ZX19cmV0dXJuIGZhbHNlfXZhciBKU0V2ZW50cz17aW5FdmVudEhhbmRsZXI6MCxyZW1vdmVBbGxFdmVudExpc3RlbmVyczpmdW5jdGlvbigpe2Zvcih2YXIgaT1KU0V2ZW50cy5ldmVudEhhbmRsZXJzLmxlbmd0aC0xO2k+PTA7LS1pKXtKU0V2ZW50cy5fcmVtb3ZlSGFuZGxlcihpKX1KU0V2ZW50cy5ldmVudEhhbmRsZXJzPVtdO0pTRXZlbnRzLmRlZmVycmVkQ2FsbHM9W119LHJlZ2lzdGVyUmVtb3ZlRXZlbnRMaXN0ZW5lcnM6ZnVuY3Rpb24oKXtpZighSlNFdmVudHMucmVtb3ZlRXZlbnRMaXN0ZW5lcnNSZWdpc3RlcmVkKXtfX0FURVhJVF9fLnB1c2goSlNFdmVudHMucmVtb3ZlQWxsRXZlbnRMaXN0ZW5lcnMpO0pTRXZlbnRzLnJlbW92ZUV2ZW50TGlzdGVuZXJzUmVnaXN0ZXJlZD10cnVlfX0sZGVmZXJyZWRDYWxsczpbXSxkZWZlckNhbGw6ZnVuY3Rpb24odGFyZ2V0RnVuY3Rpb24scHJlY2VkZW5jZSxhcmdzTGlzdCl7ZnVuY3Rpb24gYXJyYXlzSGF2ZUVxdWFsQ29udGVudChhcnJBLGFyckIpe2lmKGFyckEubGVuZ3RoIT1hcnJCLmxlbmd0aClyZXR1cm4gZmFsc2U7Zm9yKHZhciBpIGluIGFyckEpe2lmKGFyckFbaV0hPWFyckJbaV0pcmV0dXJuIGZhbHNlfXJldHVybiB0cnVlfWZvcih2YXIgaSBpbiBKU0V2ZW50cy5kZWZlcnJlZENhbGxzKXt2YXIgY2FsbD1KU0V2ZW50cy5kZWZlcnJlZENhbGxzW2ldO2lmKGNhbGwudGFyZ2V0RnVuY3Rpb249PXRhcmdldEZ1bmN0aW9uJiZhcnJheXNIYXZlRXF1YWxDb250ZW50KGNhbGwuYXJnc0xpc3QsYXJnc0xpc3QpKXtyZXR1cm59fUpTRXZlbnRzLmRlZmVycmVkQ2FsbHMucHVzaCh7dGFyZ2V0RnVuY3Rpb246dGFyZ2V0RnVuY3Rpb24scHJlY2VkZW5jZTpwcmVjZWRlbmNlLGFyZ3NMaXN0OmFyZ3NMaXN0fSk7SlNFdmVudHMuZGVmZXJyZWRDYWxscy5zb3J0KGZ1bmN0aW9uKHgseSl7cmV0dXJuIHgucHJlY2VkZW5jZTx5LnByZWNlZGVuY2V9KX0scmVtb3ZlRGVmZXJyZWRDYWxsczpmdW5jdGlvbih0YXJnZXRGdW5jdGlvbil7Zm9yKHZhciBpPTA7aTxKU0V2ZW50cy5kZWZlcnJlZENhbGxzLmxlbmd0aDsrK2kpe2lmKEpTRXZlbnRzLmRlZmVycmVkQ2FsbHNbaV0udGFyZ2V0RnVuY3Rpb249PXRhcmdldEZ1bmN0aW9uKXtKU0V2ZW50cy5kZWZlcnJlZENhbGxzLnNwbGljZShpLDEpOy0taX19fSxjYW5QZXJmb3JtRXZlbnRIYW5kbGVyUmVxdWVzdHM6ZnVuY3Rpb24oKXtyZXR1cm4gSlNFdmVudHMuaW5FdmVudEhhbmRsZXImJkpTRXZlbnRzLmN1cnJlbnRFdmVudEhhbmRsZXIuYWxsb3dzRGVmZXJyZWRDYWxsc30scnVuRGVmZXJyZWRDYWxsczpmdW5jdGlvbigpe2lmKCFKU0V2ZW50cy5jYW5QZXJmb3JtRXZlbnRIYW5kbGVyUmVxdWVzdHMoKSl7cmV0dXJufWZvcih2YXIgaT0wO2k8SlNFdmVudHMuZGVmZXJyZWRDYWxscy5sZW5ndGg7KytpKXt2YXIgY2FsbD1KU0V2ZW50cy5kZWZlcnJlZENhbGxzW2ldO0pTRXZlbnRzLmRlZmVycmVkQ2FsbHMuc3BsaWNlKGksMSk7LS1pO2NhbGwudGFyZ2V0RnVuY3Rpb24uYXBwbHkobnVsbCxjYWxsLmFyZ3NMaXN0KX19LGV2ZW50SGFuZGxlcnM6W10scmVtb3ZlQWxsSGFuZGxlcnNPblRhcmdldDpmdW5jdGlvbih0YXJnZXQsZXZlbnRUeXBlU3RyaW5nKXtmb3IodmFyIGk9MDtpPEpTRXZlbnRzLmV2ZW50SGFuZGxlcnMubGVuZ3RoOysraSl7aWYoSlNFdmVudHMuZXZlbnRIYW5kbGVyc1tpXS50YXJnZXQ9PXRhcmdldCYmKCFldmVudFR5cGVTdHJpbmd8fGV2ZW50VHlwZVN0cmluZz09SlNFdmVudHMuZXZlbnRIYW5kbGVyc1tpXS5ldmVudFR5cGVTdHJpbmcpKXtKU0V2ZW50cy5fcmVtb3ZlSGFuZGxlcihpLS0pfX19LF9yZW1vdmVIYW5kbGVyOmZ1bmN0aW9uKGkpe3ZhciBoPUpTRXZlbnRzLmV2ZW50SGFuZGxlcnNbaV07aC50YXJnZXQucmVtb3ZlRXZlbnRMaXN0ZW5lcihoLmV2ZW50VHlwZVN0cmluZyxoLmV2ZW50TGlzdGVuZXJGdW5jLGgudXNlQ2FwdHVyZSk7SlNFdmVudHMuZXZlbnRIYW5kbGVycy5zcGxpY2UoaSwxKX0scmVnaXN0ZXJPclJlbW92ZUhhbmRsZXI6ZnVuY3Rpb24oZXZlbnRIYW5kbGVyKXt2YXIganNFdmVudEhhbmRsZXI9ZnVuY3Rpb24ganNFdmVudEhhbmRsZXIoZXZlbnQpeysrSlNFdmVudHMuaW5FdmVudEhhbmRsZXI7SlNFdmVudHMuY3VycmVudEV2ZW50SGFuZGxlcj1ldmVudEhhbmRsZXI7SlNFdmVudHMucnVuRGVmZXJyZWRDYWxscygpO2V2ZW50SGFuZGxlci5oYW5kbGVyRnVuYyhldmVudCk7SlNFdmVudHMucnVuRGVmZXJyZWRDYWxscygpOy0tSlNFdmVudHMuaW5FdmVudEhhbmRsZXJ9O2lmKGV2ZW50SGFuZGxlci5jYWxsYmFja2Z1bmMpe2V2ZW50SGFuZGxlci5ldmVudExpc3RlbmVyRnVuYz1qc0V2ZW50SGFuZGxlcjtldmVudEhhbmRsZXIudGFyZ2V0LmFkZEV2ZW50TGlzdGVuZXIoZXZlbnRIYW5kbGVyLmV2ZW50VHlwZVN0cmluZyxqc0V2ZW50SGFuZGxlcixldmVudEhhbmRsZXIudXNlQ2FwdHVyZSk7SlNFdmVudHMuZXZlbnRIYW5kbGVycy5wdXNoKGV2ZW50SGFuZGxlcik7SlNFdmVudHMucmVnaXN0ZXJSZW1vdmVFdmVudExpc3RlbmVycygpfWVsc2V7Zm9yKHZhciBpPTA7aTxKU0V2ZW50cy5ldmVudEhhbmRsZXJzLmxlbmd0aDsrK2kpe2lmKEpTRXZlbnRzLmV2ZW50SGFuZGxlcnNbaV0udGFyZ2V0PT1ldmVudEhhbmRsZXIudGFyZ2V0JiZKU0V2ZW50cy5ldmVudEhhbmRsZXJzW2ldLmV2ZW50VHlwZVN0cmluZz09ZXZlbnRIYW5kbGVyLmV2ZW50VHlwZVN0cmluZyl7SlNFdmVudHMuX3JlbW92ZUhhbmRsZXIoaS0tKX19fX0scXVldWVFdmVudEhhbmRsZXJPblRocmVhZF9paWlpOmZ1bmN0aW9uKHRhcmdldFRocmVhZCxldmVudEhhbmRsZXJGdW5jLGV2ZW50VHlwZUlkLGV2ZW50RGF0YSx1c2VyRGF0YSl7dmFyIHN0YWNrVG9wPXN0YWNrU2F2ZSgpO3ZhciB2YXJhcmdzPXN0YWNrQWxsb2MoMTIpO0dST1dBQkxFX0hFQVBfSTMyKClbdmFyYXJncz4+Ml09ZXZlbnRUeXBlSWQ7R1JPV0FCTEVfSEVBUF9JMzIoKVt2YXJhcmdzKzQ+PjJdPWV2ZW50RGF0YTtHUk9XQUJMRV9IRUFQX0kzMigpW3ZhcmFyZ3MrOD4+Ml09dXNlckRhdGE7X19lbXNjcmlwdGVuX2NhbGxfb25fdGhyZWFkKDAsdGFyZ2V0VGhyZWFkLDYzNzUzNDIwOCxldmVudEhhbmRsZXJGdW5jLGV2ZW50RGF0YSx2YXJhcmdzKTtzdGFja1Jlc3RvcmUoc3RhY2tUb3ApfSxnZXRUYXJnZXRUaHJlYWRGb3JFdmVudENhbGxiYWNrOmZ1bmN0aW9uKHRhcmdldFRocmVhZCl7c3dpdGNoKHRhcmdldFRocmVhZCl7Y2FzZSAxOnJldHVybiAwO2Nhc2UgMjpyZXR1cm4gUFRocmVhZC5jdXJyZW50UHJveGllZE9wZXJhdGlvbkNhbGxlclRocmVhZDtkZWZhdWx0OnJldHVybiB0YXJnZXRUaHJlYWR9fSxnZXROb2RlTmFtZUZvclRhcmdldDpmdW5jdGlvbih0YXJnZXQpe2lmKCF0YXJnZXQpcmV0dXJuXCJcIjtpZih0YXJnZXQ9PXdpbmRvdylyZXR1cm5cIiN3aW5kb3dcIjtpZih0YXJnZXQ9PXNjcmVlbilyZXR1cm5cIiNzY3JlZW5cIjtyZXR1cm4gdGFyZ2V0JiZ0YXJnZXQubm9kZU5hbWU/dGFyZ2V0Lm5vZGVOYW1lOlwiXCJ9LGZ1bGxzY3JlZW5FbmFibGVkOmZ1bmN0aW9uKCl7cmV0dXJuIGRvY3VtZW50LmZ1bGxzY3JlZW5FbmFibGVkfHxkb2N1bWVudC53ZWJraXRGdWxsc2NyZWVuRW5hYmxlZH19O2Z1bmN0aW9uIHN0cmluZ1RvTmV3VVRGOChqc1N0cmluZyl7dmFyIGxlbmd0aD1sZW5ndGhCeXRlc1VURjgoanNTdHJpbmcpKzE7dmFyIGNTdHJpbmc9X21hbGxvYyhsZW5ndGgpO3N0cmluZ1RvVVRGOChqc1N0cmluZyxjU3RyaW5nLGxlbmd0aCk7cmV0dXJuIGNTdHJpbmd9ZnVuY3Rpb24gX2Vtc2NyaXB0ZW5fc2V0X29mZnNjcmVlbmNhbnZhc19zaXplX29uX3RhcmdldF90aHJlYWRfanModGFyZ2V0VGhyZWFkLHRhcmdldENhbnZhcyx3aWR0aCxoZWlnaHQpe3ZhciBzdGFja1RvcD1zdGFja1NhdmUoKTt2YXIgdmFyYXJncz1zdGFja0FsbG9jKDEyKTt2YXIgdGFyZ2V0Q2FudmFzUHRyPTA7aWYodGFyZ2V0Q2FudmFzKXt0YXJnZXRDYW52YXNQdHI9c3RyaW5nVG9OZXdVVEY4KHRhcmdldENhbnZhcyl9R1JPV0FCTEVfSEVBUF9JMzIoKVt2YXJhcmdzPj4yXT10YXJnZXRDYW52YXNQdHI7R1JPV0FCTEVfSEVBUF9JMzIoKVt2YXJhcmdzKzQ+PjJdPXdpZHRoO0dST1dBQkxFX0hFQVBfSTMyKClbdmFyYXJncys4Pj4yXT1oZWlnaHQ7X19lbXNjcmlwdGVuX2NhbGxfb25fdGhyZWFkKDAsdGFyZ2V0VGhyZWFkLDY1NzQ1NzE1MiwwLHRhcmdldENhbnZhc1B0cix2YXJhcmdzKTtzdGFja1Jlc3RvcmUoc3RhY2tUb3ApfWZ1bmN0aW9uIF9lbXNjcmlwdGVuX3NldF9vZmZzY3JlZW5jYW52YXNfc2l6ZV9vbl90YXJnZXRfdGhyZWFkKHRhcmdldFRocmVhZCx0YXJnZXRDYW52YXMsd2lkdGgsaGVpZ2h0KXt0YXJnZXRDYW52YXM9dGFyZ2V0Q2FudmFzP1VURjhUb1N0cmluZyh0YXJnZXRDYW52YXMpOlwiXCI7X2Vtc2NyaXB0ZW5fc2V0X29mZnNjcmVlbmNhbnZhc19zaXplX29uX3RhcmdldF90aHJlYWRfanModGFyZ2V0VGhyZWFkLHRhcmdldENhbnZhcyx3aWR0aCxoZWlnaHQpfWZ1bmN0aW9uIG1heWJlQ1N0cmluZ1RvSnNTdHJpbmcoY1N0cmluZyl7cmV0dXJuIGNTdHJpbmc+Mj9VVEY4VG9TdHJpbmcoY1N0cmluZyk6Y1N0cmluZ312YXIgc3BlY2lhbEhUTUxUYXJnZXRzPVswLHR5cGVvZiBkb2N1bWVudCE9PVwidW5kZWZpbmVkXCI/ZG9jdW1lbnQ6MCx0eXBlb2Ygd2luZG93IT09XCJ1bmRlZmluZWRcIj93aW5kb3c6MF07ZnVuY3Rpb24gZmluZEV2ZW50VGFyZ2V0KHRhcmdldCl7dGFyZ2V0PW1heWJlQ1N0cmluZ1RvSnNTdHJpbmcodGFyZ2V0KTt2YXIgZG9tRWxlbWVudD1zcGVjaWFsSFRNTFRhcmdldHNbdGFyZ2V0XXx8KHR5cGVvZiBkb2N1bWVudCE9PVwidW5kZWZpbmVkXCI/ZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0YXJnZXQpOnVuZGVmaW5lZCk7cmV0dXJuIGRvbUVsZW1lbnR9ZnVuY3Rpb24gZmluZENhbnZhc0V2ZW50VGFyZ2V0KHRhcmdldCl7cmV0dXJuIGZpbmRFdmVudFRhcmdldCh0YXJnZXQpfWZ1bmN0aW9uIF9lbXNjcmlwdGVuX3NldF9jYW52YXNfZWxlbWVudF9zaXplX2NhbGxpbmdfdGhyZWFkKHRhcmdldCx3aWR0aCxoZWlnaHQpe3ZhciBjYW52YXM9ZmluZENhbnZhc0V2ZW50VGFyZ2V0KHRhcmdldCk7aWYoIWNhbnZhcylyZXR1cm4tNDtpZihjYW52YXMuY2FudmFzU2hhcmVkUHRyKXtHUk9XQUJMRV9IRUFQX0kzMigpW2NhbnZhcy5jYW52YXNTaGFyZWRQdHI+PjJdPXdpZHRoO0dST1dBQkxFX0hFQVBfSTMyKClbY2FudmFzLmNhbnZhc1NoYXJlZFB0cis0Pj4yXT1oZWlnaHR9aWYoY2FudmFzLm9mZnNjcmVlbkNhbnZhc3x8IWNhbnZhcy5jb250cm9sVHJhbnNmZXJyZWRPZmZzY3JlZW4pe2lmKGNhbnZhcy5vZmZzY3JlZW5DYW52YXMpY2FudmFzPWNhbnZhcy5vZmZzY3JlZW5DYW52YXM7dmFyIGF1dG9SZXNpemVWaWV3cG9ydD1mYWxzZTtpZihjYW52YXMuR0xjdHhPYmplY3QmJmNhbnZhcy5HTGN0eE9iamVjdC5HTGN0eCl7dmFyIHByZXZWaWV3cG9ydD1jYW52YXMuR0xjdHhPYmplY3QuR0xjdHguZ2V0UGFyYW1ldGVyKDI5NzgpO2F1dG9SZXNpemVWaWV3cG9ydD1wcmV2Vmlld3BvcnRbMF09PT0wJiZwcmV2Vmlld3BvcnRbMV09PT0wJiZwcmV2Vmlld3BvcnRbMl09PT1jYW52YXMud2lkdGgmJnByZXZWaWV3cG9ydFszXT09PWNhbnZhcy5oZWlnaHR9Y2FudmFzLndpZHRoPXdpZHRoO2NhbnZhcy5oZWlnaHQ9aGVpZ2h0O2lmKGF1dG9SZXNpemVWaWV3cG9ydCl7Y2FudmFzLkdMY3R4T2JqZWN0LkdMY3R4LnZpZXdwb3J0KDAsMCx3aWR0aCxoZWlnaHQpfX1lbHNlIGlmKGNhbnZhcy5jYW52YXNTaGFyZWRQdHIpe3ZhciB0YXJnZXRUaHJlYWQ9R1JPV0FCTEVfSEVBUF9JMzIoKVtjYW52YXMuY2FudmFzU2hhcmVkUHRyKzg+PjJdO19lbXNjcmlwdGVuX3NldF9vZmZzY3JlZW5jYW52YXNfc2l6ZV9vbl90YXJnZXRfdGhyZWFkKHRhcmdldFRocmVhZCx0YXJnZXQsd2lkdGgsaGVpZ2h0KTtyZXR1cm4gMX1lbHNle3JldHVybi00fXJldHVybiAwfWZ1bmN0aW9uIF9lbXNjcmlwdGVuX3NldF9jYW52YXNfZWxlbWVudF9zaXplX21haW5fdGhyZWFkKHRhcmdldCx3aWR0aCxoZWlnaHQpe2lmKEVOVklST05NRU5UX0lTX1BUSFJFQUQpcmV0dXJuIF9lbXNjcmlwdGVuX3Byb3h5X3RvX21haW5fdGhyZWFkX2pzKDQsMSx0YXJnZXQsd2lkdGgsaGVpZ2h0KTtyZXR1cm4gX2Vtc2NyaXB0ZW5fc2V0X2NhbnZhc19lbGVtZW50X3NpemVfY2FsbGluZ190aHJlYWQodGFyZ2V0LHdpZHRoLGhlaWdodCl9ZnVuY3Rpb24gX2Vtc2NyaXB0ZW5fc2V0X2NhbnZhc19lbGVtZW50X3NpemUodGFyZ2V0LHdpZHRoLGhlaWdodCl7dmFyIGNhbnZhcz1maW5kQ2FudmFzRXZlbnRUYXJnZXQodGFyZ2V0KTtpZihjYW52YXMpe3JldHVybiBfZW1zY3JpcHRlbl9zZXRfY2FudmFzX2VsZW1lbnRfc2l6ZV9jYWxsaW5nX3RocmVhZCh0YXJnZXQsd2lkdGgsaGVpZ2h0KX1lbHNle3JldHVybiBfZW1zY3JpcHRlbl9zZXRfY2FudmFzX2VsZW1lbnRfc2l6ZV9tYWluX3RocmVhZCh0YXJnZXQsd2lkdGgsaGVpZ2h0KX19ZnVuY3Rpb24gX2Vtc2NyaXB0ZW5fc2V0X2N1cnJlbnRfdGhyZWFkX3N0YXR1cyhuZXdTdGF0dXMpe31mdW5jdGlvbiBfX3dlYmdsX2VuYWJsZV9BTkdMRV9pbnN0YW5jZWRfYXJyYXlzKGN0eCl7dmFyIGV4dD1jdHguZ2V0RXh0ZW5zaW9uKFwiQU5HTEVfaW5zdGFuY2VkX2FycmF5c1wiKTtpZihleHQpe2N0eFtcInZlcnRleEF0dHJpYkRpdmlzb3JcIl09ZnVuY3Rpb24oaW5kZXgsZGl2aXNvcil7ZXh0W1widmVydGV4QXR0cmliRGl2aXNvckFOR0xFXCJdKGluZGV4LGRpdmlzb3IpfTtjdHhbXCJkcmF3QXJyYXlzSW5zdGFuY2VkXCJdPWZ1bmN0aW9uKG1vZGUsZmlyc3QsY291bnQscHJpbWNvdW50KXtleHRbXCJkcmF3QXJyYXlzSW5zdGFuY2VkQU5HTEVcIl0obW9kZSxmaXJzdCxjb3VudCxwcmltY291bnQpfTtjdHhbXCJkcmF3RWxlbWVudHNJbnN0YW5jZWRcIl09ZnVuY3Rpb24obW9kZSxjb3VudCx0eXBlLGluZGljZXMscHJpbWNvdW50KXtleHRbXCJkcmF3RWxlbWVudHNJbnN0YW5jZWRBTkdMRVwiXShtb2RlLGNvdW50LHR5cGUsaW5kaWNlcyxwcmltY291bnQpfTtyZXR1cm4gMX19ZnVuY3Rpb24gX193ZWJnbF9lbmFibGVfT0VTX3ZlcnRleF9hcnJheV9vYmplY3QoY3R4KXt2YXIgZXh0PWN0eC5nZXRFeHRlbnNpb24oXCJPRVNfdmVydGV4X2FycmF5X29iamVjdFwiKTtpZihleHQpe2N0eFtcImNyZWF0ZVZlcnRleEFycmF5XCJdPWZ1bmN0aW9uKCl7cmV0dXJuIGV4dFtcImNyZWF0ZVZlcnRleEFycmF5T0VTXCJdKCl9O2N0eFtcImRlbGV0ZVZlcnRleEFycmF5XCJdPWZ1bmN0aW9uKHZhbyl7ZXh0W1wiZGVsZXRlVmVydGV4QXJyYXlPRVNcIl0odmFvKX07Y3R4W1wiYmluZFZlcnRleEFycmF5XCJdPWZ1bmN0aW9uKHZhbyl7ZXh0W1wiYmluZFZlcnRleEFycmF5T0VTXCJdKHZhbyl9O2N0eFtcImlzVmVydGV4QXJyYXlcIl09ZnVuY3Rpb24odmFvKXtyZXR1cm4gZXh0W1wiaXNWZXJ0ZXhBcnJheU9FU1wiXSh2YW8pfTtyZXR1cm4gMX19ZnVuY3Rpb24gX193ZWJnbF9lbmFibGVfV0VCR0xfZHJhd19idWZmZXJzKGN0eCl7dmFyIGV4dD1jdHguZ2V0RXh0ZW5zaW9uKFwiV0VCR0xfZHJhd19idWZmZXJzXCIpO2lmKGV4dCl7Y3R4W1wiZHJhd0J1ZmZlcnNcIl09ZnVuY3Rpb24obixidWZzKXtleHRbXCJkcmF3QnVmZmVyc1dFQkdMXCJdKG4sYnVmcyl9O3JldHVybiAxfX1mdW5jdGlvbiBfX3dlYmdsX2VuYWJsZV9XRUJHTF9tdWx0aV9kcmF3KGN0eCl7cmV0dXJuISEoY3R4Lm11bHRpRHJhd1dlYmdsPWN0eC5nZXRFeHRlbnNpb24oXCJXRUJHTF9tdWx0aV9kcmF3XCIpKX12YXIgR0w9e2NvdW50ZXI6MSxidWZmZXJzOltdLHByb2dyYW1zOltdLGZyYW1lYnVmZmVyczpbXSxyZW5kZXJidWZmZXJzOltdLHRleHR1cmVzOltdLHNoYWRlcnM6W10sdmFvczpbXSxjb250ZXh0czp7fSxvZmZzY3JlZW5DYW52YXNlczp7fSxxdWVyaWVzOltdLHN0cmluZ0NhY2hlOnt9LHVucGFja0FsaWdubWVudDo0LHJlY29yZEVycm9yOmZ1bmN0aW9uIHJlY29yZEVycm9yKGVycm9yQ29kZSl7aWYoIUdMLmxhc3RFcnJvcil7R0wubGFzdEVycm9yPWVycm9yQ29kZX19LGdldE5ld0lkOmZ1bmN0aW9uKHRhYmxlKXt2YXIgcmV0PUdMLmNvdW50ZXIrKztmb3IodmFyIGk9dGFibGUubGVuZ3RoO2k8cmV0O2krKyl7dGFibGVbaV09bnVsbH1yZXR1cm4gcmV0fSxnZXRTb3VyY2U6ZnVuY3Rpb24oc2hhZGVyLGNvdW50LHN0cmluZyxsZW5ndGgpe3ZhciBzb3VyY2U9XCJcIjtmb3IodmFyIGk9MDtpPGNvdW50OysraSl7dmFyIGxlbj1sZW5ndGg/R1JPV0FCTEVfSEVBUF9JMzIoKVtsZW5ndGgraSo0Pj4yXTotMTtzb3VyY2UrPVVURjhUb1N0cmluZyhHUk9XQUJMRV9IRUFQX0kzMigpW3N0cmluZytpKjQ+PjJdLGxlbjwwP3VuZGVmaW5lZDpsZW4pfXJldHVybiBzb3VyY2V9LGNyZWF0ZUNvbnRleHQ6ZnVuY3Rpb24oY2FudmFzLHdlYkdMQ29udGV4dEF0dHJpYnV0ZXMpe2lmKCFjYW52YXMuZ2V0Q29udGV4dFNhZmFyaVdlYkdMMkZpeGVkKXtjYW52YXMuZ2V0Q29udGV4dFNhZmFyaVdlYkdMMkZpeGVkPWNhbnZhcy5nZXRDb250ZXh0O2NhbnZhcy5nZXRDb250ZXh0PWZ1bmN0aW9uKHZlcixhdHRycyl7dmFyIGdsPWNhbnZhcy5nZXRDb250ZXh0U2FmYXJpV2ViR0wyRml4ZWQodmVyLGF0dHJzKTtyZXR1cm4gdmVyPT1cIndlYmdsXCI9PWdsIGluc3RhbmNlb2YgV2ViR0xSZW5kZXJpbmdDb250ZXh0P2dsOm51bGx9fXZhciBjdHg9Y2FudmFzLmdldENvbnRleHQoXCJ3ZWJnbFwiLHdlYkdMQ29udGV4dEF0dHJpYnV0ZXMpO2lmKCFjdHgpcmV0dXJuIDA7dmFyIGhhbmRsZT1HTC5yZWdpc3RlckNvbnRleHQoY3R4LHdlYkdMQ29udGV4dEF0dHJpYnV0ZXMpO3JldHVybiBoYW5kbGV9LHJlZ2lzdGVyQ29udGV4dDpmdW5jdGlvbihjdHgsd2ViR0xDb250ZXh0QXR0cmlidXRlcyl7dmFyIGhhbmRsZT1fbWFsbG9jKDgpO0dST1dBQkxFX0hFQVBfSTMyKClbaGFuZGxlKzQ+PjJdPV9wdGhyZWFkX3NlbGYoKTt2YXIgY29udGV4dD17aGFuZGxlOmhhbmRsZSxhdHRyaWJ1dGVzOndlYkdMQ29udGV4dEF0dHJpYnV0ZXMsdmVyc2lvbjp3ZWJHTENvbnRleHRBdHRyaWJ1dGVzLm1ham9yVmVyc2lvbixHTGN0eDpjdHh9O2lmKGN0eC5jYW52YXMpY3R4LmNhbnZhcy5HTGN0eE9iamVjdD1jb250ZXh0O0dMLmNvbnRleHRzW2hhbmRsZV09Y29udGV4dDtpZih0eXBlb2Ygd2ViR0xDb250ZXh0QXR0cmlidXRlcy5lbmFibGVFeHRlbnNpb25zQnlEZWZhdWx0PT09XCJ1bmRlZmluZWRcInx8d2ViR0xDb250ZXh0QXR0cmlidXRlcy5lbmFibGVFeHRlbnNpb25zQnlEZWZhdWx0KXtHTC5pbml0RXh0ZW5zaW9ucyhjb250ZXh0KX1yZXR1cm4gaGFuZGxlfSxtYWtlQ29udGV4dEN1cnJlbnQ6ZnVuY3Rpb24oY29udGV4dEhhbmRsZSl7R0wuY3VycmVudENvbnRleHQ9R0wuY29udGV4dHNbY29udGV4dEhhbmRsZV07TW9kdWxlLmN0eD1HTGN0eD1HTC5jdXJyZW50Q29udGV4dCYmR0wuY3VycmVudENvbnRleHQuR0xjdHg7cmV0dXJuIShjb250ZXh0SGFuZGxlJiYhR0xjdHgpfSxnZXRDb250ZXh0OmZ1bmN0aW9uKGNvbnRleHRIYW5kbGUpe3JldHVybiBHTC5jb250ZXh0c1tjb250ZXh0SGFuZGxlXX0sZGVsZXRlQ29udGV4dDpmdW5jdGlvbihjb250ZXh0SGFuZGxlKXtpZihHTC5jdXJyZW50Q29udGV4dD09PUdMLmNvbnRleHRzW2NvbnRleHRIYW5kbGVdKUdMLmN1cnJlbnRDb250ZXh0PW51bGw7aWYodHlwZW9mIEpTRXZlbnRzPT09XCJvYmplY3RcIilKU0V2ZW50cy5yZW1vdmVBbGxIYW5kbGVyc09uVGFyZ2V0KEdMLmNvbnRleHRzW2NvbnRleHRIYW5kbGVdLkdMY3R4LmNhbnZhcyk7aWYoR0wuY29udGV4dHNbY29udGV4dEhhbmRsZV0mJkdMLmNvbnRleHRzW2NvbnRleHRIYW5kbGVdLkdMY3R4LmNhbnZhcylHTC5jb250ZXh0c1tjb250ZXh0SGFuZGxlXS5HTGN0eC5jYW52YXMuR0xjdHhPYmplY3Q9dW5kZWZpbmVkO19mcmVlKEdMLmNvbnRleHRzW2NvbnRleHRIYW5kbGVdLmhhbmRsZSk7R0wuY29udGV4dHNbY29udGV4dEhhbmRsZV09bnVsbH0saW5pdEV4dGVuc2lvbnM6ZnVuY3Rpb24oY29udGV4dCl7aWYoIWNvbnRleHQpY29udGV4dD1HTC5jdXJyZW50Q29udGV4dDtpZihjb250ZXh0LmluaXRFeHRlbnNpb25zRG9uZSlyZXR1cm47Y29udGV4dC5pbml0RXh0ZW5zaW9uc0RvbmU9dHJ1ZTt2YXIgR0xjdHg9Y29udGV4dC5HTGN0eDtfX3dlYmdsX2VuYWJsZV9BTkdMRV9pbnN0YW5jZWRfYXJyYXlzKEdMY3R4KTtfX3dlYmdsX2VuYWJsZV9PRVNfdmVydGV4X2FycmF5X29iamVjdChHTGN0eCk7X193ZWJnbF9lbmFibGVfV0VCR0xfZHJhd19idWZmZXJzKEdMY3R4KTt7R0xjdHguZGlzam9pbnRUaW1lclF1ZXJ5RXh0PUdMY3R4LmdldEV4dGVuc2lvbihcIkVYVF9kaXNqb2ludF90aW1lcl9xdWVyeVwiKX1fX3dlYmdsX2VuYWJsZV9XRUJHTF9tdWx0aV9kcmF3KEdMY3R4KTt2YXIgZXh0cz1HTGN0eC5nZXRTdXBwb3J0ZWRFeHRlbnNpb25zKCl8fFtdO2V4dHMuZm9yRWFjaChmdW5jdGlvbihleHQpe2lmKCFleHQuaW5jbHVkZXMoXCJsb3NlX2NvbnRleHRcIikmJiFleHQuaW5jbHVkZXMoXCJkZWJ1Z1wiKSl7R0xjdHguZ2V0RXh0ZW5zaW9uKGV4dCl9fSl9fTt2YXIgX19lbXNjcmlwdGVuX3dlYmdsX3Bvd2VyX3ByZWZlcmVuY2VzPVtcImRlZmF1bHRcIixcImxvdy1wb3dlclwiLFwiaGlnaC1wZXJmb3JtYW5jZVwiXTtmdW5jdGlvbiBfZW1zY3JpcHRlbl93ZWJnbF9kb19jcmVhdGVfY29udGV4dCh0YXJnZXQsYXR0cmlidXRlcyl7dmFyIGE9YXR0cmlidXRlcz4+Mjt2YXIgcG93ZXJQcmVmZXJlbmNlPUdST1dBQkxFX0hFQVBfSTMyKClbYSsoMjQ+PjIpXTt2YXIgY29udGV4dEF0dHJpYnV0ZXM9e1wiYWxwaGFcIjohIUdST1dBQkxFX0hFQVBfSTMyKClbYSsoMD4+MildLFwiZGVwdGhcIjohIUdST1dBQkxFX0hFQVBfSTMyKClbYSsoND4+MildLFwic3RlbmNpbFwiOiEhR1JPV0FCTEVfSEVBUF9JMzIoKVthKyg4Pj4yKV0sXCJhbnRpYWxpYXNcIjohIUdST1dBQkxFX0hFQVBfSTMyKClbYSsoMTI+PjIpXSxcInByZW11bHRpcGxpZWRBbHBoYVwiOiEhR1JPV0FCTEVfSEVBUF9JMzIoKVthKygxNj4+MildLFwicHJlc2VydmVEcmF3aW5nQnVmZmVyXCI6ISFHUk9XQUJMRV9IRUFQX0kzMigpW2ErKDIwPj4yKV0sXCJwb3dlclByZWZlcmVuY2VcIjpfX2Vtc2NyaXB0ZW5fd2ViZ2xfcG93ZXJfcHJlZmVyZW5jZXNbcG93ZXJQcmVmZXJlbmNlXSxcImZhaWxJZk1ham9yUGVyZm9ybWFuY2VDYXZlYXRcIjohIUdST1dBQkxFX0hFQVBfSTMyKClbYSsoMjg+PjIpXSxtYWpvclZlcnNpb246R1JPV0FCTEVfSEVBUF9JMzIoKVthKygzMj4+MildLG1pbm9yVmVyc2lvbjpHUk9XQUJMRV9IRUFQX0kzMigpW2ErKDM2Pj4yKV0sZW5hYmxlRXh0ZW5zaW9uc0J5RGVmYXVsdDpHUk9XQUJMRV9IRUFQX0kzMigpW2ErKDQwPj4yKV0sZXhwbGljaXRTd2FwQ29udHJvbDpHUk9XQUJMRV9IRUFQX0kzMigpW2ErKDQ0Pj4yKV0scHJveHlDb250ZXh0VG9NYWluVGhyZWFkOkdST1dBQkxFX0hFQVBfSTMyKClbYSsoNDg+PjIpXSxyZW5kZXJWaWFPZmZzY3JlZW5CYWNrQnVmZmVyOkdST1dBQkxFX0hFQVBfSTMyKClbYSsoNTI+PjIpXX07dmFyIGNhbnZhcz1maW5kQ2FudmFzRXZlbnRUYXJnZXQodGFyZ2V0KTtpZighY2FudmFzKXtyZXR1cm4gMH1pZihjb250ZXh0QXR0cmlidXRlcy5leHBsaWNpdFN3YXBDb250cm9sKXtyZXR1cm4gMH12YXIgY29udGV4dEhhbmRsZT1HTC5jcmVhdGVDb250ZXh0KGNhbnZhcyxjb250ZXh0QXR0cmlidXRlcyk7cmV0dXJuIGNvbnRleHRIYW5kbGV9ZnVuY3Rpb24gX2Vtc2NyaXB0ZW5fd2ViZ2xfY3JlYXRlX2NvbnRleHQoYTAsYTEpe3JldHVybiBfZW1zY3JpcHRlbl93ZWJnbF9kb19jcmVhdGVfY29udGV4dChhMCxhMSl9ZnVuY3Rpb24gX2ZkX2Nsb3NlKGZkKXtpZihFTlZJUk9OTUVOVF9JU19QVEhSRUFEKXJldHVybiBfZW1zY3JpcHRlbl9wcm94eV90b19tYWluX3RocmVhZF9qcyg1LDEsZmQpO3JldHVybiAwfWZ1bmN0aW9uIF9mZF9yZWFkKGZkLGlvdixpb3ZjbnQscG51bSl7aWYoRU5WSVJPTk1FTlRfSVNfUFRIUkVBRClyZXR1cm4gX2Vtc2NyaXB0ZW5fcHJveHlfdG9fbWFpbl90aHJlYWRfanMoNiwxLGZkLGlvdixpb3ZjbnQscG51bSk7dmFyIHN0cmVhbT1TWVNDQUxMUy5nZXRTdHJlYW1Gcm9tRkQoZmQpO3ZhciBudW09U1lTQ0FMTFMuZG9SZWFkdihzdHJlYW0saW92LGlvdmNudCk7R1JPV0FCTEVfSEVBUF9JMzIoKVtwbnVtPj4yXT1udW07cmV0dXJuIDB9ZnVuY3Rpb24gX2ZkX3NlZWsoZmQsb2Zmc2V0X2xvdyxvZmZzZXRfaGlnaCx3aGVuY2UsbmV3T2Zmc2V0KXtpZihFTlZJUk9OTUVOVF9JU19QVEhSRUFEKXJldHVybiBfZW1zY3JpcHRlbl9wcm94eV90b19tYWluX3RocmVhZF9qcyg3LDEsZmQsb2Zmc2V0X2xvdyxvZmZzZXRfaGlnaCx3aGVuY2UsbmV3T2Zmc2V0KX1mdW5jdGlvbiBfZmRfd3JpdGUoZmQsaW92LGlvdmNudCxwbnVtKXtpZihFTlZJUk9OTUVOVF9JU19QVEhSRUFEKXJldHVybiBfZW1zY3JpcHRlbl9wcm94eV90b19tYWluX3RocmVhZF9qcyg4LDEsZmQsaW92LGlvdmNudCxwbnVtKTt2YXIgbnVtPTA7Zm9yKHZhciBpPTA7aTxpb3ZjbnQ7aSsrKXt2YXIgcHRyPUdST1dBQkxFX0hFQVBfSTMyKClbaW92K2kqOD4+Ml07dmFyIGxlbj1HUk9XQUJMRV9IRUFQX0kzMigpW2lvdisoaSo4KzQpPj4yXTtmb3IodmFyIGo9MDtqPGxlbjtqKyspe1NZU0NBTExTLnByaW50Q2hhcihmZCxHUk9XQUJMRV9IRUFQX1U4KClbcHRyK2pdKX1udW0rPWxlbn1HUk9XQUJMRV9IRUFQX0kzMigpW3BudW0+PjJdPW51bTtyZXR1cm4gMH1mdW5jdGlvbiBfZ2V0VGVtcFJldDAoKXtyZXR1cm4gZ2V0VGVtcFJldDAoKX1mdW5jdGlvbiBfcHRocmVhZF9jbGVhbnVwX3BvcChleGVjdXRlKXt2YXIgcm91dGluZT1QVGhyZWFkLnRocmVhZEV4aXRIYW5kbGVycy5wb3AoKTtpZihleGVjdXRlKXJvdXRpbmUoKX1mdW5jdGlvbiBzcGF3blRocmVhZCh0aHJlYWRQYXJhbXMpe2lmKEVOVklST05NRU5UX0lTX1BUSFJFQUQpdGhyb3dcIkludGVybmFsIEVycm9yISBzcGF3blRocmVhZCgpIGNhbiBvbmx5IGV2ZXIgYmUgY2FsbGVkIGZyb20gbWFpbiBhcHBsaWNhdGlvbiB0aHJlYWQhXCI7dmFyIHdvcmtlcj1QVGhyZWFkLmdldE5ld1dvcmtlcigpO2lmKCF3b3JrZXIpe3JldHVybiA2fWlmKHdvcmtlci5wdGhyZWFkIT09dW5kZWZpbmVkKXRocm93XCJJbnRlcm5hbCBlcnJvciFcIjtpZighdGhyZWFkUGFyYW1zLnB0aHJlYWRfcHRyKXRocm93XCJJbnRlcm5hbCBlcnJvciwgbm8gcHRocmVhZCBwdHIhXCI7UFRocmVhZC5ydW5uaW5nV29ya2Vycy5wdXNoKHdvcmtlcik7dmFyIHRsc01lbW9yeT1fbWFsbG9jKDEyOCo0KTtmb3IodmFyIGk9MDtpPDEyODsrK2kpe0dST1dBQkxFX0hFQVBfSTMyKClbdGxzTWVtb3J5K2kqND4+Ml09MH12YXIgc3RhY2tIaWdoPXRocmVhZFBhcmFtcy5zdGFja0Jhc2UrdGhyZWFkUGFyYW1zLnN0YWNrU2l6ZTt2YXIgcHRocmVhZD1QVGhyZWFkLnB0aHJlYWRzW3RocmVhZFBhcmFtcy5wdGhyZWFkX3B0cl09e3dvcmtlcjp3b3JrZXIsc3RhY2tCYXNlOnRocmVhZFBhcmFtcy5zdGFja0Jhc2Usc3RhY2tTaXplOnRocmVhZFBhcmFtcy5zdGFja1NpemUsYWxsb2NhdGVkT3duU3RhY2s6dGhyZWFkUGFyYW1zLmFsbG9jYXRlZE93blN0YWNrLHRocmVhZEluZm9TdHJ1Y3Q6dGhyZWFkUGFyYW1zLnB0aHJlYWRfcHRyfTt2YXIgdGlzPXB0aHJlYWQudGhyZWFkSW5mb1N0cnVjdD4+MjtBdG9taWNzLnN0b3JlKEdST1dBQkxFX0hFQVBfVTMyKCksdGlzKyg2ND4+MiksdGhyZWFkUGFyYW1zLmRldGFjaGVkKTtBdG9taWNzLnN0b3JlKEdST1dBQkxFX0hFQVBfVTMyKCksdGlzKygxMDA+PjIpLHRsc01lbW9yeSk7QXRvbWljcy5zdG9yZShHUk9XQUJMRV9IRUFQX1UzMigpLHRpcysoNDA+PjIpLHB0aHJlYWQudGhyZWFkSW5mb1N0cnVjdCk7QXRvbWljcy5zdG9yZShHUk9XQUJMRV9IRUFQX1UzMigpLHRpcysoODA+PjIpLHRocmVhZFBhcmFtcy5zdGFja1NpemUpO0F0b21pY3Muc3RvcmUoR1JPV0FCTEVfSEVBUF9VMzIoKSx0aXMrKDc2Pj4yKSxzdGFja0hpZ2gpO0F0b21pY3Muc3RvcmUoR1JPV0FCTEVfSEVBUF9VMzIoKSx0aXMrKDEwND4+MiksdGhyZWFkUGFyYW1zLnN0YWNrU2l6ZSk7QXRvbWljcy5zdG9yZShHUk9XQUJMRV9IRUFQX1UzMigpLHRpcysoMTA0Kzg+PjIpLHN0YWNrSGlnaCk7QXRvbWljcy5zdG9yZShHUk9XQUJMRV9IRUFQX1UzMigpLHRpcysoMTA0KzEyPj4yKSx0aHJlYWRQYXJhbXMuZGV0YWNoZWQpO3ZhciBnbG9iYWxfbGliYz1fZW1zY3JpcHRlbl9nZXRfZ2xvYmFsX2xpYmMoKTt2YXIgZ2xvYmFsX2xvY2FsZT1nbG9iYWxfbGliYys0MDtBdG9taWNzLnN0b3JlKEdST1dBQkxFX0hFQVBfVTMyKCksdGlzKygxNzI+PjIpLGdsb2JhbF9sb2NhbGUpO3dvcmtlci5wdGhyZWFkPXB0aHJlYWQ7dmFyIG1zZz17XCJjbWRcIjpcInJ1blwiLFwic3RhcnRfcm91dGluZVwiOnRocmVhZFBhcmFtcy5zdGFydFJvdXRpbmUsXCJhcmdcIjp0aHJlYWRQYXJhbXMuYXJnLFwidGhyZWFkSW5mb1N0cnVjdFwiOnRocmVhZFBhcmFtcy5wdGhyZWFkX3B0cixcInN0YWNrQmFzZVwiOnRocmVhZFBhcmFtcy5zdGFja0Jhc2UsXCJzdGFja1NpemVcIjp0aHJlYWRQYXJhbXMuc3RhY2tTaXplfTt3b3JrZXIucnVuUHRocmVhZD1mdW5jdGlvbigpe21zZy50aW1lPXBlcmZvcm1hbmNlLm5vdygpO3dvcmtlci5wb3N0TWVzc2FnZShtc2csdGhyZWFkUGFyYW1zLnRyYW5zZmVyTGlzdCl9O2lmKHdvcmtlci5sb2FkZWQpe3dvcmtlci5ydW5QdGhyZWFkKCk7ZGVsZXRlIHdvcmtlci5ydW5QdGhyZWFkfXJldHVybiAwfWZ1bmN0aW9uIF9wdGhyZWFkX2NyZWF0ZShwdGhyZWFkX3B0cixhdHRyLHN0YXJ0X3JvdXRpbmUsYXJnKXtpZih0eXBlb2YgU2hhcmVkQXJyYXlCdWZmZXI9PT1cInVuZGVmaW5lZFwiKXtlcnIoXCJDdXJyZW50IGVudmlyb25tZW50IGRvZXMgbm90IHN1cHBvcnQgU2hhcmVkQXJyYXlCdWZmZXIsIHB0aHJlYWRzIGFyZSBub3QgYXZhaWxhYmxlIVwiKTtyZXR1cm4gNn1pZighcHRocmVhZF9wdHIpe2VycihcInB0aHJlYWRfY3JlYXRlIGNhbGxlZCB3aXRoIGEgbnVsbCB0aHJlYWQgcG9pbnRlciFcIik7cmV0dXJuIDI4fXZhciB0cmFuc2Zlckxpc3Q9W107dmFyIGVycm9yPTA7aWYoRU5WSVJPTk1FTlRfSVNfUFRIUkVBRCYmKHRyYW5zZmVyTGlzdC5sZW5ndGg9PT0wfHxlcnJvcikpe3JldHVybiBfZW1zY3JpcHRlbl9zeW5jX3J1bl9pbl9tYWluX3RocmVhZF80KDY4Nzg2NTg1NixwdGhyZWFkX3B0cixhdHRyLHN0YXJ0X3JvdXRpbmUsYXJnKX1pZihlcnJvcilyZXR1cm4gZXJyb3I7dmFyIHN0YWNrU2l6ZT0wO3ZhciBzdGFja0Jhc2U9MDt2YXIgZGV0YWNoZWQ9MDtpZihhdHRyJiZhdHRyIT0tMSl7c3RhY2tTaXplPUdST1dBQkxFX0hFQVBfSTMyKClbYXR0cj4+Ml07c3RhY2tTaXplKz04MTkyMDtzdGFja0Jhc2U9R1JPV0FCTEVfSEVBUF9JMzIoKVthdHRyKzg+PjJdO2RldGFjaGVkPUdST1dBQkxFX0hFQVBfSTMyKClbYXR0cisxMj4+Ml0hPT0wfWVsc2V7c3RhY2tTaXplPTIwOTcxNTJ9dmFyIGFsbG9jYXRlZE93blN0YWNrPXN0YWNrQmFzZT09MDtpZihhbGxvY2F0ZWRPd25TdGFjayl7c3RhY2tCYXNlPV9tZW1hbGlnbigxNixzdGFja1NpemUpfWVsc2V7c3RhY2tCYXNlLT1zdGFja1NpemU7YXNzZXJ0KHN0YWNrQmFzZT4wKX12YXIgdGhyZWFkSW5mb1N0cnVjdD1fbWFsbG9jKDIyOCk7Zm9yKHZhciBpPTA7aTwyMjg+PjI7KytpKUdST1dBQkxFX0hFQVBfVTMyKClbKHRocmVhZEluZm9TdHJ1Y3Q+PjIpK2ldPTA7R1JPV0FCTEVfSEVBUF9JMzIoKVtwdGhyZWFkX3B0cj4+Ml09dGhyZWFkSW5mb1N0cnVjdDtHUk9XQUJMRV9IRUFQX0kzMigpW3RocmVhZEluZm9TdHJ1Y3QrMTI+PjJdPXRocmVhZEluZm9TdHJ1Y3Q7dmFyIGhlYWRQdHI9dGhyZWFkSW5mb1N0cnVjdCsxNTI7R1JPV0FCTEVfSEVBUF9JMzIoKVtoZWFkUHRyPj4yXT1oZWFkUHRyO3ZhciB0aHJlYWRQYXJhbXM9e3N0YWNrQmFzZTpzdGFja0Jhc2Usc3RhY2tTaXplOnN0YWNrU2l6ZSxhbGxvY2F0ZWRPd25TdGFjazphbGxvY2F0ZWRPd25TdGFjayxkZXRhY2hlZDpkZXRhY2hlZCxzdGFydFJvdXRpbmU6c3RhcnRfcm91dGluZSxwdGhyZWFkX3B0cjp0aHJlYWRJbmZvU3RydWN0LGFyZzphcmcsdHJhbnNmZXJMaXN0OnRyYW5zZmVyTGlzdH07aWYoRU5WSVJPTk1FTlRfSVNfUFRIUkVBRCl7dGhyZWFkUGFyYW1zLmNtZD1cInNwYXduVGhyZWFkXCI7cG9zdE1lc3NhZ2UodGhyZWFkUGFyYW1zLHRyYW5zZmVyTGlzdCk7cmV0dXJuIDB9cmV0dXJuIHNwYXduVGhyZWFkKHRocmVhZFBhcmFtcyl9ZnVuY3Rpb24gX19wdGhyZWFkX3Rlc3RjYW5jZWxfanMoKXtpZighRU5WSVJPTk1FTlRfSVNfUFRIUkVBRClyZXR1cm47dmFyIHRiPV9wdGhyZWFkX3NlbGYoKTtpZighdGIpcmV0dXJuO3ZhciBjYW5jZWxEaXNhYmxlZD1BdG9taWNzLmxvYWQoR1JPV0FCTEVfSEVBUF9VMzIoKSx0Yis1Nj4+Mik7aWYoY2FuY2VsRGlzYWJsZWQpcmV0dXJuO3ZhciBjYW5jZWxlZD1BdG9taWNzLmxvYWQoR1JPV0FCTEVfSEVBUF9VMzIoKSx0YiswPj4yKTtpZihjYW5jZWxlZD09Mil0aHJvd1wiQ2FuY2VsZWQhXCJ9ZnVuY3Rpb24gX19lbXNjcmlwdGVuX2RvX3B0aHJlYWRfam9pbih0aHJlYWQsc3RhdHVzLGJsb2NrKXtpZighdGhyZWFkKXtlcnIoXCJwdGhyZWFkX2pvaW4gYXR0ZW1wdGVkIG9uIGEgbnVsbCB0aHJlYWQgcG9pbnRlciFcIik7cmV0dXJuIEVSUk5PX0NPREVTLkVTUkNIfWlmKEVOVklST05NRU5UX0lTX1BUSFJFQUQmJl9wdGhyZWFkX3NlbGYoKT09dGhyZWFkKXtlcnIoXCJQVGhyZWFkIFwiK3RocmVhZCtcIiBpcyBhdHRlbXB0aW5nIHRvIGpvaW4gdG8gaXRzZWxmIVwiKTtyZXR1cm4gRVJSTk9fQ09ERVMuRURFQURMS31lbHNlIGlmKCFFTlZJUk9OTUVOVF9JU19QVEhSRUFEJiZfZW1zY3JpcHRlbl9tYWluX2Jyb3dzZXJfdGhyZWFkX2lkKCk9PXRocmVhZCl7ZXJyKFwiTWFpbiB0aHJlYWQgXCIrdGhyZWFkK1wiIGlzIGF0dGVtcHRpbmcgdG8gam9pbiB0byBpdHNlbGYhXCIpO3JldHVybiBFUlJOT19DT0RFUy5FREVBRExLfXZhciBzZWxmPUdST1dBQkxFX0hFQVBfSTMyKClbdGhyZWFkKzEyPj4yXTtpZihzZWxmIT09dGhyZWFkKXtlcnIoXCJwdGhyZWFkX2pvaW4gYXR0ZW1wdGVkIG9uIHRocmVhZCBcIit0aHJlYWQrXCIsIHdoaWNoIGRvZXMgbm90IHBvaW50IHRvIGEgdmFsaWQgdGhyZWFkLCBvciBkb2VzIG5vdCBleGlzdCBhbnltb3JlIVwiKTtyZXR1cm4gRVJSTk9fQ09ERVMuRVNSQ0h9dmFyIGRldGFjaGVkPUF0b21pY3MubG9hZChHUk9XQUJMRV9IRUFQX1UzMigpLHRocmVhZCs2ND4+Mik7aWYoZGV0YWNoZWQpe2VycihcIkF0dGVtcHRlZCB0byBqb2luIHRocmVhZCBcIit0aHJlYWQrXCIsIHdoaWNoIHdhcyBhbHJlYWR5IGRldGFjaGVkIVwiKTtyZXR1cm4gRVJSTk9fQ09ERVMuRUlOVkFMfWlmKGJsb2NrKXtfZW1zY3JpcHRlbl9jaGVja19ibG9ja2luZ19hbGxvd2VkKCl9Zm9yKDs7KXt2YXIgdGhyZWFkU3RhdHVzPUF0b21pY3MubG9hZChHUk9XQUJMRV9IRUFQX1UzMigpLHRocmVhZCswPj4yKTtpZih0aHJlYWRTdGF0dXM9PTEpe3ZhciB0aHJlYWRFeGl0Q29kZT1BdG9taWNzLmxvYWQoR1JPV0FCTEVfSEVBUF9VMzIoKSx0aHJlYWQrND4+Mik7aWYoc3RhdHVzKUdST1dBQkxFX0hFQVBfSTMyKClbc3RhdHVzPj4yXT10aHJlYWRFeGl0Q29kZTtBdG9taWNzLnN0b3JlKEdST1dBQkxFX0hFQVBfVTMyKCksdGhyZWFkKzY0Pj4yLDEpO2lmKCFFTlZJUk9OTUVOVF9JU19QVEhSRUFEKWNsZWFudXBUaHJlYWQodGhyZWFkKTtlbHNlIHBvc3RNZXNzYWdlKHtcImNtZFwiOlwiY2xlYW51cFRocmVhZFwiLFwidGhyZWFkXCI6dGhyZWFkfSk7cmV0dXJuIDB9aWYoIWJsb2NrKXtyZXR1cm4gRVJSTk9fQ09ERVMuRUJVU1l9X19wdGhyZWFkX3Rlc3RjYW5jZWxfanMoKTtpZighRU5WSVJPTk1FTlRfSVNfUFRIUkVBRClfZW1zY3JpcHRlbl9tYWluX3RocmVhZF9wcm9jZXNzX3F1ZXVlZF9jYWxscygpO19lbXNjcmlwdGVuX2Z1dGV4X3dhaXQodGhyZWFkKzAsdGhyZWFkU3RhdHVzLEVOVklST05NRU5UX0lTX1BUSFJFQUQ/MTAwOjEpfX1mdW5jdGlvbiBfcHRocmVhZF9qb2luKHRocmVhZCxzdGF0dXMpe3JldHVybiBfX2Vtc2NyaXB0ZW5fZG9fcHRocmVhZF9qb2luKHRocmVhZCxzdGF0dXMsdHJ1ZSl9ZnVuY3Rpb24gX3NldFRlbXBSZXQwKHZhbCl7c2V0VGVtcFJldDAodmFsKX1mdW5jdGlvbiBfdGltZShwdHIpe3ZhciByZXQ9RGF0ZS5ub3coKS8xZTN8MDtpZihwdHIpe0dST1dBQkxFX0hFQVBfSTMyKClbcHRyPj4yXT1yZXR9cmV0dXJuIHJldH1pZighRU5WSVJPTk1FTlRfSVNfUFRIUkVBRClQVGhyZWFkLmluaXRNYWluVGhyZWFkQmxvY2soKTtJbnRlcm5hbEVycm9yPU1vZHVsZVtcIkludGVybmFsRXJyb3JcIl09ZXh0ZW5kRXJyb3IoRXJyb3IsXCJJbnRlcm5hbEVycm9yXCIpO2VtYmluZF9pbml0X2NoYXJDb2RlcygpO0JpbmRpbmdFcnJvcj1Nb2R1bGVbXCJCaW5kaW5nRXJyb3JcIl09ZXh0ZW5kRXJyb3IoRXJyb3IsXCJCaW5kaW5nRXJyb3JcIik7aW5pdF9lbXZhbCgpO1VuYm91bmRUeXBlRXJyb3I9TW9kdWxlW1wiVW5ib3VuZFR5cGVFcnJvclwiXT1leHRlbmRFcnJvcihFcnJvcixcIlVuYm91bmRUeXBlRXJyb3JcIik7dmFyIEdMY3R4O3ZhciBwcm94aWVkRnVuY3Rpb25UYWJsZT1bbnVsbCxfX19zeXNfZmNudGw2NCxfX19zeXNfaW9jdGwsX19fc3lzX29wZW4sX2Vtc2NyaXB0ZW5fc2V0X2NhbnZhc19lbGVtZW50X3NpemVfbWFpbl90aHJlYWQsX2ZkX2Nsb3NlLF9mZF9yZWFkLF9mZF9zZWVrLF9mZF93cml0ZV07dmFyIGFzbUxpYnJhcnlBcmc9e1wia1wiOl9fX2Fzc2VydF9mYWlsLFwiQlwiOl9fX2N4YV90aHJlYWRfYXRleGl0LFwidFwiOl9fX3N5c19mY250bDY0LFwiVFwiOl9fX3N5c19pb2N0bCxcIlVcIjpfX19zeXNfb3BlbixcIkVcIjpfX2VtYmluZF9maW5hbGl6ZV92YWx1ZV9vYmplY3QsXCJJXCI6X19lbWJpbmRfcmVnaXN0ZXJfYmlnaW50LFwiY2FcIjpfX2VtYmluZF9yZWdpc3Rlcl9ib29sLFwiYmFcIjpfX2VtYmluZF9yZWdpc3Rlcl9lbXZhbCxcInlcIjpfX2VtYmluZF9yZWdpc3Rlcl9mbG9hdCxcIkRcIjpfX2VtYmluZF9yZWdpc3Rlcl9mdW5jdGlvbixcImpcIjpfX2VtYmluZF9yZWdpc3Rlcl9pbnRlZ2VyLFwiaFwiOl9fZW1iaW5kX3JlZ2lzdGVyX21lbW9yeV92aWV3LFwielwiOl9fZW1iaW5kX3JlZ2lzdGVyX3N0ZF9zdHJpbmcsXCJxXCI6X19lbWJpbmRfcmVnaXN0ZXJfc3RkX3dzdHJpbmcsXCJNXCI6X19lbWJpbmRfcmVnaXN0ZXJfdmFsdWVfb2JqZWN0LFwiaVwiOl9fZW1iaW5kX3JlZ2lzdGVyX3ZhbHVlX29iamVjdF9maWVsZCxcImRhXCI6X19lbWJpbmRfcmVnaXN0ZXJfdm9pZCxcIiRcIjpfX2Vtc2NyaXB0ZW5fbm90aWZ5X3RocmVhZF9xdWV1ZSxcIm9cIjpfX2VtdmFsX2RlY3JlZixcImFhXCI6X19lbXZhbF9nZXRfZ2xvYmFsLFwiQ1wiOl9fZW12YWxfaW5jcmVmLFwiU1wiOl9fZW12YWxfbmV3LFwiZ1wiOl9hYm9ydCxcInhcIjpfZW1zY3JpcHRlbl9hc21fY29uc3RfaW50LFwiWFwiOl9lbXNjcmlwdGVuX2NoZWNrX2Jsb2NraW5nX2FsbG93ZWQsXCJ3XCI6X2Vtc2NyaXB0ZW5fY29uZGl0aW9uYWxfc2V0X2N1cnJlbnRfdGhyZWFkX3N0YXR1cyxcImxcIjpfZW1zY3JpcHRlbl9mdXRleF93YWl0LFwibVwiOl9lbXNjcmlwdGVuX2Z1dGV4X3dha2UsXCJwXCI6X2Vtc2NyaXB0ZW5fZ2V0X25vdyxcImRcIjpfZW1zY3JpcHRlbl9sb25nam1wLFwiT1wiOl9lbXNjcmlwdGVuX21lbWNweV9iaWcsXCJnYVwiOl9lbXNjcmlwdGVuX251bV9sb2dpY2FsX2NvcmVzLFwiWVwiOl9lbXNjcmlwdGVuX3JlY2VpdmVfb25fbWFpbl90aHJlYWRfanMsXCJQXCI6X2Vtc2NyaXB0ZW5fcmVzaXplX2hlYXAsXCJaXCI6X2Vtc2NyaXB0ZW5fc2V0X2NhbnZhc19lbGVtZW50X3NpemUsXCJ2XCI6X2Vtc2NyaXB0ZW5fc2V0X2N1cnJlbnRfdGhyZWFkX3N0YXR1cyxcIl9cIjpfZW1zY3JpcHRlbl93ZWJnbF9jcmVhdGVfY29udGV4dCxcInVcIjpfZmRfY2xvc2UsXCJSXCI6X2ZkX3JlYWQsXCJIXCI6X2ZkX3NlZWssXCJRXCI6X2ZkX3dyaXRlLFwiY1wiOl9nZXRUZW1wUmV0MCxcIk5cIjppbml0UHRocmVhZHNKUyxcIktcIjppbnZva2VfaWksXCJyXCI6aW52b2tlX2lpaSxcIkxcIjppbnZva2VfaWlpaWlpaWlpaSxcIkpcIjppbnZva2VfaWlpaWlpaWlpaWlpLFwiR1wiOmludm9rZV9paWlpamosXCJGXCI6aW52b2tlX2lqaWlpLFwiblwiOmludm9rZV92aSxcImZcIjppbnZva2VfdmlpLFwic1wiOmludm9rZV92aWlpLFwiZVwiOmludm9rZV92aWlpaSxcImFcIjp3YXNtTWVtb3J5fHxNb2R1bGVbXCJ3YXNtTWVtb3J5XCJdLFwiVlwiOl9wdGhyZWFkX2NsZWFudXBfcG9wLFwiV1wiOl9wdGhyZWFkX2NsZWFudXBfcHVzaCxcIkFcIjpfcHRocmVhZF9jcmVhdGUsXCJlYVwiOl9wdGhyZWFkX2pvaW4sXCJiXCI6X3NldFRlbXBSZXQwLFwiZmFcIjpfdGltZX07dmFyIGFzbT1jcmVhdGVXYXNtKCk7dmFyIF9fX3dhc21fY2FsbF9jdG9ycz1Nb2R1bGVbXCJfX193YXNtX2NhbGxfY3RvcnNcIl09ZnVuY3Rpb24oKXtyZXR1cm4oX19fd2FzbV9jYWxsX2N0b3JzPU1vZHVsZVtcIl9fX3dhc21fY2FsbF9jdG9yc1wiXT1Nb2R1bGVbXCJhc21cIl1bXCJoYVwiXSkuYXBwbHkobnVsbCxhcmd1bWVudHMpfTt2YXIgX21hbGxvYz1Nb2R1bGVbXCJfbWFsbG9jXCJdPWZ1bmN0aW9uKCl7cmV0dXJuKF9tYWxsb2M9TW9kdWxlW1wiX21hbGxvY1wiXT1Nb2R1bGVbXCJhc21cIl1bXCJpYVwiXSkuYXBwbHkobnVsbCxhcmd1bWVudHMpfTt2YXIgX2ZyZWU9TW9kdWxlW1wiX2ZyZWVcIl09ZnVuY3Rpb24oKXtyZXR1cm4oX2ZyZWU9TW9kdWxlW1wiX2ZyZWVcIl09TW9kdWxlW1wiYXNtXCJdW1wiamFcIl0pLmFwcGx5KG51bGwsYXJndW1lbnRzKX07dmFyIF9lbXNjcmlwdGVuX3Rsc19pbml0PU1vZHVsZVtcIl9lbXNjcmlwdGVuX3Rsc19pbml0XCJdPWZ1bmN0aW9uKCl7cmV0dXJuKF9lbXNjcmlwdGVuX3Rsc19pbml0PU1vZHVsZVtcIl9lbXNjcmlwdGVuX3Rsc19pbml0XCJdPU1vZHVsZVtcImFzbVwiXVtcImthXCJdKS5hcHBseShudWxsLGFyZ3VtZW50cyl9O3ZhciBfX19nZXRUeXBlTmFtZT1Nb2R1bGVbXCJfX19nZXRUeXBlTmFtZVwiXT1mdW5jdGlvbigpe3JldHVybihfX19nZXRUeXBlTmFtZT1Nb2R1bGVbXCJfX19nZXRUeXBlTmFtZVwiXT1Nb2R1bGVbXCJhc21cIl1bXCJtYVwiXSkuYXBwbHkobnVsbCxhcmd1bWVudHMpfTt2YXIgX19fZW1iaW5kX3JlZ2lzdGVyX25hdGl2ZV9hbmRfYnVpbHRpbl90eXBlcz1Nb2R1bGVbXCJfX19lbWJpbmRfcmVnaXN0ZXJfbmF0aXZlX2FuZF9idWlsdGluX3R5cGVzXCJdPWZ1bmN0aW9uKCl7cmV0dXJuKF9fX2VtYmluZF9yZWdpc3Rlcl9uYXRpdmVfYW5kX2J1aWx0aW5fdHlwZXM9TW9kdWxlW1wiX19fZW1iaW5kX3JlZ2lzdGVyX25hdGl2ZV9hbmRfYnVpbHRpbl90eXBlc1wiXT1Nb2R1bGVbXCJhc21cIl1bXCJuYVwiXSkuYXBwbHkobnVsbCxhcmd1bWVudHMpfTt2YXIgX2Vtc2NyaXB0ZW5fY3VycmVudF90aHJlYWRfcHJvY2Vzc19xdWV1ZWRfY2FsbHM9TW9kdWxlW1wiX2Vtc2NyaXB0ZW5fY3VycmVudF90aHJlYWRfcHJvY2Vzc19xdWV1ZWRfY2FsbHNcIl09ZnVuY3Rpb24oKXtyZXR1cm4oX2Vtc2NyaXB0ZW5fY3VycmVudF90aHJlYWRfcHJvY2Vzc19xdWV1ZWRfY2FsbHM9TW9kdWxlW1wiX2Vtc2NyaXB0ZW5fY3VycmVudF90aHJlYWRfcHJvY2Vzc19xdWV1ZWRfY2FsbHNcIl09TW9kdWxlW1wiYXNtXCJdW1wib2FcIl0pLmFwcGx5KG51bGwsYXJndW1lbnRzKX07dmFyIF9lbXNjcmlwdGVuX3JlZ2lzdGVyX21haW5fYnJvd3Nlcl90aHJlYWRfaWQ9TW9kdWxlW1wiX2Vtc2NyaXB0ZW5fcmVnaXN0ZXJfbWFpbl9icm93c2VyX3RocmVhZF9pZFwiXT1mdW5jdGlvbigpe3JldHVybihfZW1zY3JpcHRlbl9yZWdpc3Rlcl9tYWluX2Jyb3dzZXJfdGhyZWFkX2lkPU1vZHVsZVtcIl9lbXNjcmlwdGVuX3JlZ2lzdGVyX21haW5fYnJvd3Nlcl90aHJlYWRfaWRcIl09TW9kdWxlW1wiYXNtXCJdW1wicGFcIl0pLmFwcGx5KG51bGwsYXJndW1lbnRzKX07dmFyIF9lbXNjcmlwdGVuX21haW5fYnJvd3Nlcl90aHJlYWRfaWQ9TW9kdWxlW1wiX2Vtc2NyaXB0ZW5fbWFpbl9icm93c2VyX3RocmVhZF9pZFwiXT1mdW5jdGlvbigpe3JldHVybihfZW1zY3JpcHRlbl9tYWluX2Jyb3dzZXJfdGhyZWFkX2lkPU1vZHVsZVtcIl9lbXNjcmlwdGVuX21haW5fYnJvd3Nlcl90aHJlYWRfaWRcIl09TW9kdWxlW1wiYXNtXCJdW1wicWFcIl0pLmFwcGx5KG51bGwsYXJndW1lbnRzKX07dmFyIF9fZW1zY3JpcHRlbl9kb19kaXNwYXRjaF90b190aHJlYWQ9TW9kdWxlW1wiX19lbXNjcmlwdGVuX2RvX2Rpc3BhdGNoX3RvX3RocmVhZFwiXT1mdW5jdGlvbigpe3JldHVybihfX2Vtc2NyaXB0ZW5fZG9fZGlzcGF0Y2hfdG9fdGhyZWFkPU1vZHVsZVtcIl9fZW1zY3JpcHRlbl9kb19kaXNwYXRjaF90b190aHJlYWRcIl09TW9kdWxlW1wiYXNtXCJdW1wicmFcIl0pLmFwcGx5KG51bGwsYXJndW1lbnRzKX07dmFyIF9lbXNjcmlwdGVuX3N5bmNfcnVuX2luX21haW5fdGhyZWFkXzQ9TW9kdWxlW1wiX2Vtc2NyaXB0ZW5fc3luY19ydW5faW5fbWFpbl90aHJlYWRfNFwiXT1mdW5jdGlvbigpe3JldHVybihfZW1zY3JpcHRlbl9zeW5jX3J1bl9pbl9tYWluX3RocmVhZF80PU1vZHVsZVtcIl9lbXNjcmlwdGVuX3N5bmNfcnVuX2luX21haW5fdGhyZWFkXzRcIl09TW9kdWxlW1wiYXNtXCJdW1wic2FcIl0pLmFwcGx5KG51bGwsYXJndW1lbnRzKX07dmFyIF9lbXNjcmlwdGVuX21haW5fdGhyZWFkX3Byb2Nlc3NfcXVldWVkX2NhbGxzPU1vZHVsZVtcIl9lbXNjcmlwdGVuX21haW5fdGhyZWFkX3Byb2Nlc3NfcXVldWVkX2NhbGxzXCJdPWZ1bmN0aW9uKCl7cmV0dXJuKF9lbXNjcmlwdGVuX21haW5fdGhyZWFkX3Byb2Nlc3NfcXVldWVkX2NhbGxzPU1vZHVsZVtcIl9lbXNjcmlwdGVuX21haW5fdGhyZWFkX3Byb2Nlc3NfcXVldWVkX2NhbGxzXCJdPU1vZHVsZVtcImFzbVwiXVtcInRhXCJdKS5hcHBseShudWxsLGFyZ3VtZW50cyl9O3ZhciBfZW1zY3JpcHRlbl9ydW5faW5fbWFpbl9ydW50aW1lX3RocmVhZF9qcz1Nb2R1bGVbXCJfZW1zY3JpcHRlbl9ydW5faW5fbWFpbl9ydW50aW1lX3RocmVhZF9qc1wiXT1mdW5jdGlvbigpe3JldHVybihfZW1zY3JpcHRlbl9ydW5faW5fbWFpbl9ydW50aW1lX3RocmVhZF9qcz1Nb2R1bGVbXCJfZW1zY3JpcHRlbl9ydW5faW5fbWFpbl9ydW50aW1lX3RocmVhZF9qc1wiXT1Nb2R1bGVbXCJhc21cIl1bXCJ1YVwiXSkuYXBwbHkobnVsbCxhcmd1bWVudHMpfTt2YXIgX19lbXNjcmlwdGVuX2NhbGxfb25fdGhyZWFkPU1vZHVsZVtcIl9fZW1zY3JpcHRlbl9jYWxsX29uX3RocmVhZFwiXT1mdW5jdGlvbigpe3JldHVybihfX2Vtc2NyaXB0ZW5fY2FsbF9vbl90aHJlYWQ9TW9kdWxlW1wiX19lbXNjcmlwdGVuX2NhbGxfb25fdGhyZWFkXCJdPU1vZHVsZVtcImFzbVwiXVtcInZhXCJdKS5hcHBseShudWxsLGFyZ3VtZW50cyl9O3ZhciBfX2Vtc2NyaXB0ZW5fdGhyZWFkX2luaXQ9TW9kdWxlW1wiX19lbXNjcmlwdGVuX3RocmVhZF9pbml0XCJdPWZ1bmN0aW9uKCl7cmV0dXJuKF9fZW1zY3JpcHRlbl90aHJlYWRfaW5pdD1Nb2R1bGVbXCJfX2Vtc2NyaXB0ZW5fdGhyZWFkX2luaXRcIl09TW9kdWxlW1wiYXNtXCJdW1wid2FcIl0pLmFwcGx5KG51bGwsYXJndW1lbnRzKX07dmFyIF9lbXNjcmlwdGVuX2dldF9nbG9iYWxfbGliYz1Nb2R1bGVbXCJfZW1zY3JpcHRlbl9nZXRfZ2xvYmFsX2xpYmNcIl09ZnVuY3Rpb24oKXtyZXR1cm4oX2Vtc2NyaXB0ZW5fZ2V0X2dsb2JhbF9saWJjPU1vZHVsZVtcIl9lbXNjcmlwdGVuX2dldF9nbG9iYWxfbGliY1wiXT1Nb2R1bGVbXCJhc21cIl1bXCJ4YVwiXSkuYXBwbHkobnVsbCxhcmd1bWVudHMpfTt2YXIgX3B0aHJlYWRfc2VsZj1Nb2R1bGVbXCJfcHRocmVhZF9zZWxmXCJdPWZ1bmN0aW9uKCl7cmV0dXJuKF9wdGhyZWFkX3NlbGY9TW9kdWxlW1wiX3B0aHJlYWRfc2VsZlwiXT1Nb2R1bGVbXCJhc21cIl1bXCJ5YVwiXSkuYXBwbHkobnVsbCxhcmd1bWVudHMpfTt2YXIgX19fcHRocmVhZF90c2RfcnVuX2R0b3JzPU1vZHVsZVtcIl9fX3B0aHJlYWRfdHNkX3J1bl9kdG9yc1wiXT1mdW5jdGlvbigpe3JldHVybihfX19wdGhyZWFkX3RzZF9ydW5fZHRvcnM9TW9kdWxlW1wiX19fcHRocmVhZF90c2RfcnVuX2R0b3JzXCJdPU1vZHVsZVtcImFzbVwiXVtcInphXCJdKS5hcHBseShudWxsLGFyZ3VtZW50cyl9O3ZhciBzdGFja1NhdmU9TW9kdWxlW1wic3RhY2tTYXZlXCJdPWZ1bmN0aW9uKCl7cmV0dXJuKHN0YWNrU2F2ZT1Nb2R1bGVbXCJzdGFja1NhdmVcIl09TW9kdWxlW1wiYXNtXCJdW1wiQWFcIl0pLmFwcGx5KG51bGwsYXJndW1lbnRzKX07dmFyIHN0YWNrUmVzdG9yZT1Nb2R1bGVbXCJzdGFja1Jlc3RvcmVcIl09ZnVuY3Rpb24oKXtyZXR1cm4oc3RhY2tSZXN0b3JlPU1vZHVsZVtcInN0YWNrUmVzdG9yZVwiXT1Nb2R1bGVbXCJhc21cIl1bXCJCYVwiXSkuYXBwbHkobnVsbCxhcmd1bWVudHMpfTt2YXIgc3RhY2tBbGxvYz1Nb2R1bGVbXCJzdGFja0FsbG9jXCJdPWZ1bmN0aW9uKCl7cmV0dXJuKHN0YWNrQWxsb2M9TW9kdWxlW1wic3RhY2tBbGxvY1wiXT1Nb2R1bGVbXCJhc21cIl1bXCJDYVwiXSkuYXBwbHkobnVsbCxhcmd1bWVudHMpfTt2YXIgX2Vtc2NyaXB0ZW5fc3RhY2tfc2V0X2xpbWl0cz1Nb2R1bGVbXCJfZW1zY3JpcHRlbl9zdGFja19zZXRfbGltaXRzXCJdPWZ1bmN0aW9uKCl7cmV0dXJuKF9lbXNjcmlwdGVuX3N0YWNrX3NldF9saW1pdHM9TW9kdWxlW1wiX2Vtc2NyaXB0ZW5fc3RhY2tfc2V0X2xpbWl0c1wiXT1Nb2R1bGVbXCJhc21cIl1bXCJEYVwiXSkuYXBwbHkobnVsbCxhcmd1bWVudHMpfTt2YXIgX3NldFRocmV3PU1vZHVsZVtcIl9zZXRUaHJld1wiXT1mdW5jdGlvbigpe3JldHVybihfc2V0VGhyZXc9TW9kdWxlW1wiX3NldFRocmV3XCJdPU1vZHVsZVtcImFzbVwiXVtcIkVhXCJdKS5hcHBseShudWxsLGFyZ3VtZW50cyl9O3ZhciBfbWVtYWxpZ249TW9kdWxlW1wiX21lbWFsaWduXCJdPWZ1bmN0aW9uKCl7cmV0dXJuKF9tZW1hbGlnbj1Nb2R1bGVbXCJfbWVtYWxpZ25cIl09TW9kdWxlW1wiYXNtXCJdW1wiRmFcIl0pLmFwcGx5KG51bGwsYXJndW1lbnRzKX07dmFyIGR5bkNhbGxfamlpaWlpaWlpaT1Nb2R1bGVbXCJkeW5DYWxsX2ppaWlpaWlpaWlcIl09ZnVuY3Rpb24oKXtyZXR1cm4oZHluQ2FsbF9qaWlpaWlpaWlpPU1vZHVsZVtcImR5bkNhbGxfamlpaWlpaWlpaVwiXT1Nb2R1bGVbXCJhc21cIl1bXCJHYVwiXSkuYXBwbHkobnVsbCxhcmd1bWVudHMpfTt2YXIgZHluQ2FsbF9paWlpamo9TW9kdWxlW1wiZHluQ2FsbF9paWlpampcIl09ZnVuY3Rpb24oKXtyZXR1cm4oZHluQ2FsbF9paWlpamo9TW9kdWxlW1wiZHluQ2FsbF9paWlpampcIl09TW9kdWxlW1wiYXNtXCJdW1wiSGFcIl0pLmFwcGx5KG51bGwsYXJndW1lbnRzKX07dmFyIGR5bkNhbGxfaWppaWk9TW9kdWxlW1wiZHluQ2FsbF9pamlpaVwiXT1mdW5jdGlvbigpe3JldHVybihkeW5DYWxsX2lqaWlpPU1vZHVsZVtcImR5bkNhbGxfaWppaWlcIl09TW9kdWxlW1wiYXNtXCJdW1wiSWFcIl0pLmFwcGx5KG51bGwsYXJndW1lbnRzKX07dmFyIGR5bkNhbGxfamlqaT1Nb2R1bGVbXCJkeW5DYWxsX2ppamlcIl09ZnVuY3Rpb24oKXtyZXR1cm4oZHluQ2FsbF9qaWppPU1vZHVsZVtcImR5bkNhbGxfamlqaVwiXT1Nb2R1bGVbXCJhc21cIl1bXCJKYVwiXSkuYXBwbHkobnVsbCxhcmd1bWVudHMpfTt2YXIgZHluQ2FsbF9qaWlpaWlpaWk9TW9kdWxlW1wiZHluQ2FsbF9qaWlpaWlpaWlcIl09ZnVuY3Rpb24oKXtyZXR1cm4oZHluQ2FsbF9qaWlpaWlpaWk9TW9kdWxlW1wiZHluQ2FsbF9qaWlpaWlpaWlcIl09TW9kdWxlW1wiYXNtXCJdW1wiS2FcIl0pLmFwcGx5KG51bGwsYXJndW1lbnRzKX07dmFyIGR5bkNhbGxfamlpaWlpaT1Nb2R1bGVbXCJkeW5DYWxsX2ppaWlpaWlcIl09ZnVuY3Rpb24oKXtyZXR1cm4oZHluQ2FsbF9qaWlpaWlpPU1vZHVsZVtcImR5bkNhbGxfamlpaWlpaVwiXT1Nb2R1bGVbXCJhc21cIl1bXCJMYVwiXSkuYXBwbHkobnVsbCxhcmd1bWVudHMpfTt2YXIgZHluQ2FsbF9qaWlpaWk9TW9kdWxlW1wiZHluQ2FsbF9qaWlpaWlcIl09ZnVuY3Rpb24oKXtyZXR1cm4oZHluQ2FsbF9qaWlpaWk9TW9kdWxlW1wiZHluQ2FsbF9qaWlpaWlcIl09TW9kdWxlW1wiYXNtXCJdW1wiTWFcIl0pLmFwcGx5KG51bGwsYXJndW1lbnRzKX07dmFyIGR5bkNhbGxfaWlpamlpPU1vZHVsZVtcImR5bkNhbGxfaWlpamlpXCJdPWZ1bmN0aW9uKCl7cmV0dXJuKGR5bkNhbGxfaWlpamlpPU1vZHVsZVtcImR5bkNhbGxfaWlpamlpXCJdPU1vZHVsZVtcImFzbVwiXVtcIk5hXCJdKS5hcHBseShudWxsLGFyZ3VtZW50cyl9O3ZhciBfX2Vtc2NyaXB0ZW5fYWxsb3dfbWFpbl9ydW50aW1lX3F1ZXVlZF9jYWxscz1Nb2R1bGVbXCJfX2Vtc2NyaXB0ZW5fYWxsb3dfbWFpbl9ydW50aW1lX3F1ZXVlZF9jYWxsc1wiXT02MDAyMzI7dmFyIF9fZW1zY3JpcHRlbl9tYWluX3RocmVhZF9mdXRleD1Nb2R1bGVbXCJfX2Vtc2NyaXB0ZW5fbWFpbl90aHJlYWRfZnV0ZXhcIl09ODk2NzE2O2Z1bmN0aW9uIGludm9rZV92aShpbmRleCxhMSl7dmFyIHNwPXN0YWNrU2F2ZSgpO3RyeXt3YXNtVGFibGUuZ2V0KGluZGV4KShhMSl9Y2F0Y2goZSl7c3RhY2tSZXN0b3JlKHNwKTtpZihlIT09ZSswJiZlIT09XCJsb25nam1wXCIpdGhyb3cgZTtfc2V0VGhyZXcoMSwwKX19ZnVuY3Rpb24gaW52b2tlX3ZpaWkoaW5kZXgsYTEsYTIsYTMpe3ZhciBzcD1zdGFja1NhdmUoKTt0cnl7d2FzbVRhYmxlLmdldChpbmRleCkoYTEsYTIsYTMpfWNhdGNoKGUpe3N0YWNrUmVzdG9yZShzcCk7aWYoZSE9PWUrMCYmZSE9PVwibG9uZ2ptcFwiKXRocm93IGU7X3NldFRocmV3KDEsMCl9fWZ1bmN0aW9uIGludm9rZV92aWlpaShpbmRleCxhMSxhMixhMyxhNCl7dmFyIHNwPXN0YWNrU2F2ZSgpO3RyeXt3YXNtVGFibGUuZ2V0KGluZGV4KShhMSxhMixhMyxhNCl9Y2F0Y2goZSl7c3RhY2tSZXN0b3JlKHNwKTtpZihlIT09ZSswJiZlIT09XCJsb25nam1wXCIpdGhyb3cgZTtfc2V0VGhyZXcoMSwwKX19ZnVuY3Rpb24gaW52b2tlX2lpaWlpaWlpaWkoaW5kZXgsYTEsYTIsYTMsYTQsYTUsYTYsYTcsYTgsYTkpe3ZhciBzcD1zdGFja1NhdmUoKTt0cnl7cmV0dXJuIHdhc21UYWJsZS5nZXQoaW5kZXgpKGExLGEyLGEzLGE0LGE1LGE2LGE3LGE4LGE5KX1jYXRjaChlKXtzdGFja1Jlc3RvcmUoc3ApO2lmKGUhPT1lKzAmJmUhPT1cImxvbmdqbXBcIil0aHJvdyBlO19zZXRUaHJldygxLDApfX1mdW5jdGlvbiBpbnZva2VfdmlpKGluZGV4LGExLGEyKXt2YXIgc3A9c3RhY2tTYXZlKCk7dHJ5e3dhc21UYWJsZS5nZXQoaW5kZXgpKGExLGEyKX1jYXRjaChlKXtzdGFja1Jlc3RvcmUoc3ApO2lmKGUhPT1lKzAmJmUhPT1cImxvbmdqbXBcIil0aHJvdyBlO19zZXRUaHJldygxLDApfX1mdW5jdGlvbiBpbnZva2VfaWkoaW5kZXgsYTEpe3ZhciBzcD1zdGFja1NhdmUoKTt0cnl7cmV0dXJuIHdhc21UYWJsZS5nZXQoaW5kZXgpKGExKX1jYXRjaChlKXtzdGFja1Jlc3RvcmUoc3ApO2lmKGUhPT1lKzAmJmUhPT1cImxvbmdqbXBcIil0aHJvdyBlO19zZXRUaHJldygxLDApfX1mdW5jdGlvbiBpbnZva2VfaWlpaWlpaWlpaWlpKGluZGV4LGExLGEyLGEzLGE0LGE1LGE2LGE3LGE4LGE5LGExMCxhMTEpe3ZhciBzcD1zdGFja1NhdmUoKTt0cnl7cmV0dXJuIHdhc21UYWJsZS5nZXQoaW5kZXgpKGExLGEyLGEzLGE0LGE1LGE2LGE3LGE4LGE5LGExMCxhMTEpfWNhdGNoKGUpe3N0YWNrUmVzdG9yZShzcCk7aWYoZSE9PWUrMCYmZSE9PVwibG9uZ2ptcFwiKXRocm93IGU7X3NldFRocmV3KDEsMCl9fWZ1bmN0aW9uIGludm9rZV9paWkoaW5kZXgsYTEsYTIpe3ZhciBzcD1zdGFja1NhdmUoKTt0cnl7cmV0dXJuIHdhc21UYWJsZS5nZXQoaW5kZXgpKGExLGEyKX1jYXRjaChlKXtzdGFja1Jlc3RvcmUoc3ApO2lmKGUhPT1lKzAmJmUhPT1cImxvbmdqbXBcIil0aHJvdyBlO19zZXRUaHJldygxLDApfX1mdW5jdGlvbiBpbnZva2VfaWlpaWpqKGluZGV4LGExLGEyLGEzLGE0LGE1LGE2LGE3KXt2YXIgc3A9c3RhY2tTYXZlKCk7dHJ5e3JldHVybiBkeW5DYWxsX2lpaWlqaihpbmRleCxhMSxhMixhMyxhNCxhNSxhNixhNyl9Y2F0Y2goZSl7c3RhY2tSZXN0b3JlKHNwKTtpZihlIT09ZSswJiZlIT09XCJsb25nam1wXCIpdGhyb3cgZTtfc2V0VGhyZXcoMSwwKX19ZnVuY3Rpb24gaW52b2tlX2lqaWlpKGluZGV4LGExLGEyLGEzLGE0LGE1KXt2YXIgc3A9c3RhY2tTYXZlKCk7dHJ5e3JldHVybiBkeW5DYWxsX2lqaWlpKGluZGV4LGExLGEyLGEzLGE0LGE1KX1jYXRjaChlKXtzdGFja1Jlc3RvcmUoc3ApO2lmKGUhPT1lKzAmJmUhPT1cImxvbmdqbXBcIil0aHJvdyBlO19zZXRUaHJldygxLDApfX1Nb2R1bGVbXCJQVGhyZWFkXCJdPVBUaHJlYWQ7TW9kdWxlW1wiUFRocmVhZFwiXT1QVGhyZWFkO01vZHVsZVtcIndhc21NZW1vcnlcIl09d2FzbU1lbW9yeTtNb2R1bGVbXCJFeGl0U3RhdHVzXCJdPUV4aXRTdGF0dXM7dmFyIGNhbGxlZFJ1bjtmdW5jdGlvbiBFeGl0U3RhdHVzKHN0YXR1cyl7dGhpcy5uYW1lPVwiRXhpdFN0YXR1c1wiO3RoaXMubWVzc2FnZT1cIlByb2dyYW0gdGVybWluYXRlZCB3aXRoIGV4aXQoXCIrc3RhdHVzK1wiKVwiO3RoaXMuc3RhdHVzPXN0YXR1c31kZXBlbmRlbmNpZXNGdWxmaWxsZWQ9ZnVuY3Rpb24gcnVuQ2FsbGVyKCl7aWYoIWNhbGxlZFJ1bilydW4oKTtpZighY2FsbGVkUnVuKWRlcGVuZGVuY2llc0Z1bGZpbGxlZD1ydW5DYWxsZXJ9O2Z1bmN0aW9uIHJ1bihhcmdzKXthcmdzPWFyZ3N8fGFyZ3VtZW50c187aWYocnVuRGVwZW5kZW5jaWVzPjApe3JldHVybn1pZihFTlZJUk9OTUVOVF9JU19QVEhSRUFEKXtyZWFkeVByb21pc2VSZXNvbHZlKE1vZHVsZSk7aW5pdFJ1bnRpbWUoKTtwb3N0TWVzc2FnZSh7XCJjbWRcIjpcImxvYWRlZFwifSk7cmV0dXJufXByZVJ1bigpO2lmKHJ1bkRlcGVuZGVuY2llcz4wKXtyZXR1cm59ZnVuY3Rpb24gZG9SdW4oKXtpZihjYWxsZWRSdW4pcmV0dXJuO2NhbGxlZFJ1bj10cnVlO01vZHVsZVtcImNhbGxlZFJ1blwiXT10cnVlO2lmKEFCT1JUKXJldHVybjtpbml0UnVudGltZSgpO3JlYWR5UHJvbWlzZVJlc29sdmUoTW9kdWxlKTtpZihNb2R1bGVbXCJvblJ1bnRpbWVJbml0aWFsaXplZFwiXSlNb2R1bGVbXCJvblJ1bnRpbWVJbml0aWFsaXplZFwiXSgpO3Bvc3RSdW4oKX1pZihNb2R1bGVbXCJzZXRTdGF0dXNcIl0pe01vZHVsZVtcInNldFN0YXR1c1wiXShcIlJ1bm5pbmcuLi5cIik7c2V0VGltZW91dChmdW5jdGlvbigpe3NldFRpbWVvdXQoZnVuY3Rpb24oKXtNb2R1bGVbXCJzZXRTdGF0dXNcIl0oXCJcIil9LDEpO2RvUnVuKCl9LDEpfWVsc2V7ZG9SdW4oKX19TW9kdWxlW1wicnVuXCJdPXJ1bjtmdW5jdGlvbiBleGl0KHN0YXR1cyxpbXBsaWNpdCl7RVhJVFNUQVRVUz1zdGF0dXM7aWYoaW1wbGljaXQmJmtlZXBSdW50aW1lQWxpdmUoKSYmc3RhdHVzPT09MCl7cmV0dXJufWlmKCFpbXBsaWNpdCl7aWYoRU5WSVJPTk1FTlRfSVNfUFRIUkVBRCl7cG9zdE1lc3NhZ2Uoe1wiY21kXCI6XCJleGl0UHJvY2Vzc1wiLFwicmV0dXJuQ29kZVwiOnN0YXR1c30pO3Rocm93IG5ldyBFeGl0U3RhdHVzKHN0YXR1cyl9ZWxzZXt9fWlmKGtlZXBSdW50aW1lQWxpdmUoKSl7fWVsc2V7UFRocmVhZC50ZXJtaW5hdGVBbGxUaHJlYWRzKCk7ZXhpdFJ1bnRpbWUoKTtpZihNb2R1bGVbXCJvbkV4aXRcIl0pTW9kdWxlW1wib25FeGl0XCJdKHN0YXR1cyk7QUJPUlQ9dHJ1ZX1xdWl0XyhzdGF0dXMsbmV3IEV4aXRTdGF0dXMoc3RhdHVzKSl9aWYoTW9kdWxlW1wicHJlSW5pdFwiXSl7aWYodHlwZW9mIE1vZHVsZVtcInByZUluaXRcIl09PVwiZnVuY3Rpb25cIilNb2R1bGVbXCJwcmVJbml0XCJdPVtNb2R1bGVbXCJwcmVJbml0XCJdXTt3aGlsZShNb2R1bGVbXCJwcmVJbml0XCJdLmxlbmd0aD4wKXtNb2R1bGVbXCJwcmVJbml0XCJdLnBvcCgpKCl9fWlmKEVOVklST05NRU5UX0lTX1BUSFJFQUQpe25vRXhpdFJ1bnRpbWU9ZmFsc2U7UFRocmVhZC5pbml0V29ya2VyKCl9cnVuKCk7XG5cblxuICByZXR1cm4gTW9kdWxlLnJlYWR5XG59XG4pO1xufSkoKTtcbmV4cG9ydCBkZWZhdWx0IE1vZHVsZTsiXSwibmFtZXMiOlsiaW1wb3J0IiwiTW9kdWxlIiwiR1JPV0FCTEVfSEVBUF9JOCIsIndhc21NZW1vcnkiLCJidWZmZXIiLCJ1cGRhdGVHbG9iYWxCdWZmZXJBbmRWaWV3cyIsIkhFQVA4IiwiR1JPV0FCTEVfSEVBUF9VOCIsIkhFQVBVOCIsIkdST1dBQkxFX0hFQVBfSTE2IiwiSEVBUDE2IiwiR1JPV0FCTEVfSEVBUF9VMTYiLCJIRUFQVTE2IiwiR1JPV0FCTEVfSEVBUF9JMzIiLCJIRUFQMzIiLCJHUk9XQUJMRV9IRUFQX1UzMiIsIkhFQVBVMzIiLCJHUk9XQUJMRV9IRUFQX0Y2NCIsIkhFQVBGNjQiLCJyZWFkeVByb21pc2VSZXNvbHZlIiwicmVhZHlQcm9taXNlUmVqZWN0IiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJrZXkiLCJtb2R1bGVPdmVycmlkZXMiLCJoYXNPd25Qcm9wZXJ0eSIsInJlYWRCaW5hcnkiLCJhcmd1bWVudHNfIiwicXVpdF8iLCJzdGF0dXMiLCJ0b1Rocm93IiwiRU5WSVJPTk1FTlRfSVNfUFRIUkVBRCIsInNjcmlwdERpcmVjdG9yeSIsImxvY2F0ZUZpbGUiLCJwYXRoIiwic2VsZiIsImxvY2F0aW9uIiwiaHJlZiIsImluZGV4T2YiLCJzdWJzdHIiLCJsYXN0SW5kZXhPZiIsInVybCIsInhociIsIlhNTEh0dHBSZXF1ZXN0Iiwib3BlbiIsInJlc3BvbnNlVHlwZSIsInNlbmQiLCJVaW50OEFycmF5IiwicmVzcG9uc2UiLCJvdXQiLCJjb25zb2xlIiwibG9nIiwiYmluZCIsImVyciIsIndhcm4iLCJ3YXNtQmluYXJ5IiwidGVtcFJldDAiLCJBdG9taWNzIiwibG9hZCIsInN0b3JlIiwiY29tcGFyZUV4Y2hhbmdlIiwid2FzbU1vZHVsZSIsIm5vRXhpdFJ1bnRpbWUiLCJXZWJBc3NlbWJseSIsImFib3J0IiwiSEVBUEYzMiIsIkFCT1JUIiwiYXNzZXJ0IiwiY29uZGl0aW9uIiwidGV4dCIsIlVURjhBcnJheVRvU3RyaW5nIiwiaGVhcCIsImlkeCIsIm1heEJ5dGVzVG9SZWFkIiwiZW5kSWR4Iiwic3RyIiwidTAiLCJ1MSIsInUyIiwiU3RyaW5nIiwiZnJvbUNoYXJDb2RlIiwiY2giLCJVVEY4VG9TdHJpbmciLCJwdHIiLCJzdHJpbmdUb1VURjgiLCJvdXRQdHIiLCJtYXhCeXRlc1RvV3JpdGUiLCJvdXRJZHgiLCJzdGFydElkeCIsImkiLCJsZW5ndGgiLCJ1IiwiY2hhckNvZGVBdCIsInN0cmluZ1RvVVRGOEFycmF5IiwibGVuZ3RoQnl0ZXNVVEY4IiwibGVuIiwiVVRGMTZUb1N0cmluZyIsImNvZGVVbml0Iiwic3RyaW5nVG9VVEYxNiIsInVuZGVmaW5lZCIsInN0YXJ0UHRyIiwibnVtQ2hhcnNUb1dyaXRlIiwibGVuZ3RoQnl0ZXNVVEYxNiIsIlVURjMyVG9TdHJpbmciLCJ1dGYzMiIsInN0cmluZ1RvVVRGMzIiLCJlbmRQdHIiLCJsZW5ndGhCeXRlc1VURjMyIiwiYnVmIiwiSW50OEFycmF5IiwiSW50MTZBcnJheSIsIkludDMyQXJyYXkiLCJVaW50MTZBcnJheSIsIlVpbnQzMkFycmF5IiwiRmxvYXQzMkFycmF5IiwiRmxvYXQ2NEFycmF5Iiwid2FzbVRhYmxlIiwiSU5JVElBTF9NRU1PUlkiLCJNZW1vcnkiLCJTaGFyZWRBcnJheUJ1ZmZlciIsIkVycm9yIiwiYnl0ZUxlbmd0aCIsIl9fQVRQUkVSVU5fXyIsIl9fQVRJTklUX18iLCJfX0FURVhJVF9fIiwiX19BVFBPU1RSVU5fXyIsImluaXRSdW50aW1lIiwiY2FsbFJ1bnRpbWVDYWxsYmFja3MiLCJydW5EZXBlbmRlbmNpZXMiLCJydW5EZXBlbmRlbmN5V2F0Y2hlciIsImRlcGVuZGVuY2llc0Z1bGZpbGxlZCIsIndoYXQiLCJlcnJvciIsInN0YWNrIiwiZSIsIlJ1bnRpbWVFcnJvciIsImlzRGF0YVVSSSIsImZpbGVuYW1lIiwic3RhcnRzV2l0aCIsIndhc21CaW5hcnlGaWxlIiwiVVJMIiwidG9TdHJpbmciLCJnZXRCaW5hcnkiLCJmaWxlIiwiQVNNX0NPTlNUUyIsIiQwIiwiJDEiLCJzZXRUaW1lb3V0IiwiX19lbXNjcmlwdGVuX2RvX2Rpc3BhdGNoX3RvX3RocmVhZCIsImNhbGxiYWNrcyIsImNhbGxiYWNrIiwic2hpZnQiLCJmdW5jIiwiYXJnIiwiZ2V0IiwiX2Vtc2NyaXB0ZW5fZnV0ZXhfd2FrZSIsImFkZHIiLCJjb3VudCIsIkluZmluaXR5IiwibWFpblRocmVhZFdhaXRBZGRyZXNzIiwiX19lbXNjcmlwdGVuX21haW5fdGhyZWFkX2Z1dGV4IiwibWFpblRocmVhZFdva2VuIiwicmV0Iiwibm90aWZ5IiwiY2xlYW51cFRocmVhZCIsInB0aHJlYWRfcHRyIiwicHRocmVhZCIsIlBUaHJlYWQiLCJwdGhyZWFkcyIsIndvcmtlciIsInJldHVybldvcmtlclRvUG9vbCIsIl9lbXNjcmlwdGVuX2dldF9ub3ciLCJ1bnVzZWRXb3JrZXJzIiwicnVubmluZ1dvcmtlcnMiLCJ0bHNJbml0RnVuY3Rpb25zIiwiaW5pdE1haW5UaHJlYWRCbG9jayIsInB0aHJlYWRQb29sU2l6ZSIsIm5hdmlnYXRvciIsImhhcmR3YXJlQ29uY3VycmVuY3kiLCJhbGxvY2F0ZVVudXNlZFdvcmtlciIsInRiIiwiX21hbGxvYyIsImhlYWRQdHIiLCJ0bHNNZW1vcnkiLCJfX2Vtc2NyaXB0ZW5fdGhyZWFkX2luaXQiLCJfZW1zY3JpcHRlbl9yZWdpc3Rlcl9tYWluX2Jyb3dzZXJfdGhyZWFkX2lkIiwiaW5pdFdvcmtlciIsInRocmVhZEV4aXRIYW5kbGVycyIsInJ1bkV4aXRIYW5kbGVycyIsInBvcCIsIl9wdGhyZWFkX3NlbGYiLCJfX19wdGhyZWFkX3RzZF9ydW5fZHRvcnMiLCJydW5FeGl0SGFuZGxlcnNBbmREZWluaXRUaHJlYWQiLCJleGl0Q29kZSIsInNldEV4aXRTdGF0dXMiLCJ0aHJlYWRFeGl0IiwicG9zdE1lc3NhZ2UiLCJ0aHJlYWRDYW5jZWwiLCJ0ZXJtaW5hdGVBbGxUaHJlYWRzIiwidCIsInRlcm1pbmF0ZSIsImZyZWVUaHJlYWREYXRhIiwidGhyZWFkSW5mb1N0cnVjdCIsIl9mcmVlIiwiYWxsb2NhdGVkT3duU3RhY2siLCJzdGFja0Jhc2UiLCJydW5XaXRob3V0TWFpblRocmVhZFF1ZXVlZENhbGxzIiwicHVzaCIsInNwbGljZSIsIl9fZW1zY3JpcHRlbl9hbGxvd19tYWluX3J1bnRpbWVfcXVldWVkX2NhbGxzIiwicmVjZWl2ZU9iamVjdFRyYW5zZmVyIiwiZGF0YSIsInRocmVhZEluaXQiLCJsb2FkV2FzbU1vZHVsZVRvV29ya2VyIiwib25GaW5pc2hlZExvYWRpbmciLCJvbm1lc3NhZ2UiLCJkIiwiY21kIiwiY3VycmVudFByb3hpZWRPcGVyYXRpb25DYWxsZXJUaHJlYWQiLCJ0aHJlYWQiLCJ0YXJnZXRUaHJlYWQiLCJfZW1zY3JpcHRlbl9tYWluX3RocmVhZF9wcm9jZXNzX3F1ZXVlZF9jYWxscyIsInNwYXduVGhyZWFkIiwia2lsbFRocmVhZCIsImNhbmNlbFRocmVhZCIsImxvYWRlZCIsInJ1blB0aHJlYWQiLCJhbGVydCIsImltcGxpY2l0IiwiRXhpdFN0YXR1cyIsImtlZXBSdW50aW1lQWxpdmUiLCJleGl0IiwidGFyZ2V0Iiwib25lcnJvciIsImxpbmVubyIsIm1lc3NhZ2UiLCJwdGhyZWFkTWFpbkpzIiwiV29ya2VyIiwiZ2V0TmV3V29ya2VyIiwiYnVzeVNwaW5XYWl0IiwibXNlY3MiLCJwZXJmb3JtYW5jZSIsIm5vdyIsInJ1bnRpbWVLZWVwYWxpdmVDb3VudGVyIiwiX3B0aHJlYWRfY2xlYW51cF9wdXNoIiwicm91dGluZSIsInN0YWNrVG9wIiwic3RhY2tNYXgiLCJfZW1zY3JpcHRlbl9zdGFja19zZXRfbGltaXRzIiwic3RhY2tSZXN0b3JlIiwiU1lTQ0FMTFMiLCJtYXBwaW5ncyIsImJ1ZmZlcnMiLCJwcmludENoYXIiLCJzdHJlYW0iLCJjdXJyIiwidmFyYXJncyIsImdldFN0ciIsImdldDY0IiwibG93IiwiaGlnaCIsIl9fX3N5c19mY250bDY0IiwiZmQiLCJfZW1zY3JpcHRlbl9wcm94eV90b19tYWluX3RocmVhZF9qcyIsIl9fX3N5c19pb2N0bCIsIm9wIiwiX19fc3lzX29wZW4iLCJmbGFncyIsInN0cnVjdFJlZ2lzdHJhdGlvbnMiLCJydW5EZXN0cnVjdG9ycyIsImRlc3RydWN0b3JzIiwiZGVsIiwic2ltcGxlUmVhZFZhbHVlRnJvbVBvaW50ZXIiLCJwb2ludGVyIiwidGhpcyIsImF3YWl0aW5nRGVwZW5kZW5jaWVzIiwicmVnaXN0ZXJlZFR5cGVzIiwidHlwZURlcGVuZGVuY2llcyIsIm1ha2VMZWdhbEZ1bmN0aW9uTmFtZSIsIm5hbWUiLCJmIiwicmVwbGFjZSIsImNyZWF0ZU5hbWVkRnVuY3Rpb24iLCJib2R5IiwiRnVuY3Rpb24iLCJleHRlbmRFcnJvciIsImJhc2VFcnJvclR5cGUiLCJlcnJvck5hbWUiLCJlcnJvckNsYXNzIiwicHJvdG90eXBlIiwiT2JqZWN0IiwiY3JlYXRlIiwiY29uc3RydWN0b3IiLCJJbnRlcm5hbEVycm9yIiwidGhyb3dJbnRlcm5hbEVycm9yIiwid2hlbkRlcGVuZGVudFR5cGVzQXJlUmVzb2x2ZWQiLCJteVR5cGVzIiwiZGVwZW5kZW50VHlwZXMiLCJnZXRUeXBlQ29udmVydGVycyIsIm9uQ29tcGxldGUiLCJ0eXBlQ29udmVydGVycyIsIm15VHlwZUNvbnZlcnRlcnMiLCJyZWdpc3RlclR5cGUiLCJmb3JFYWNoIiwidHlwZSIsIkFycmF5IiwidW5yZWdpc3RlcmVkVHlwZXMiLCJyZWdpc3RlcmVkIiwiZHQiLCJnZXRTaGlmdEZyb21TaXplIiwic2l6ZSIsIlR5cGVFcnJvciIsImVtYmluZF9jaGFyQ29kZXMiLCJyZWFkTGF0aW4xU3RyaW5nIiwiYyIsIkJpbmRpbmdFcnJvciIsInRocm93QmluZGluZ0Vycm9yIiwicmF3VHlwZSIsInJlZ2lzdGVyZWRJbnN0YW5jZSIsIm9wdGlvbnMiLCJpZ25vcmVEdXBsaWNhdGVSZWdpc3RyYXRpb25zIiwiY2IiLCJlbXZhbF9mcmVlX2xpc3QiLCJlbXZhbF9oYW5kbGVfYXJyYXkiLCJ2YWx1ZSIsIl9fZW12YWxfZGVjcmVmIiwiaGFuZGxlIiwicmVmY291bnQiLCJfX2VtdmFsX3JlZ2lzdGVyIiwiX2VtYmluZF9yZXByIiwidiIsImZsb2F0UmVhZFZhbHVlRnJvbVBvaW50ZXIiLCJkeW5DYWxsIiwic2lnIiwiYXJncyIsImluY2x1ZGVzIiwiYXBwbHkiLCJjb25jYXQiLCJjYWxsIiwiZHluQ2FsbExlZ2FjeSIsImVtYmluZF9fcmVxdWlyZUZ1bmN0aW9uIiwic2lnbmF0dXJlIiwicmF3RnVuY3Rpb24iLCJhcmdDYWNoZSIsImZwIiwiYXJndW1lbnRzIiwiVW5ib3VuZFR5cGVFcnJvciIsImdldFR5cGVOYW1lIiwiX19fZ2V0VHlwZU5hbWUiLCJydiIsImludGVnZXJSZWFkVmFsdWVGcm9tUG9pbnRlciIsInNpZ25lZCIsImVtdmFsX3N5bWJvbHMiLCJlbXZhbF9nZXRfZ2xvYmFsIiwiZ2xvYmFsVGhpcyIsInJlcXVpcmVSZWdpc3RlcmVkVHlwZSIsImh1bWFuTmFtZSIsImltcGwiLCJlbXZhbF9uZXdlcnMiLCJyZWFkQXNtQ29uc3RBcmdzQXJyYXkiLCJfZW1zY3JpcHRlbl9mdXRleF93YWl0IiwidmFsIiwidGltZW91dCIsIndhaXQiLCJpbmRleCIsInN5bmMiLCJudW1DYWxsQXJncyIsInN0YWNrU2F2ZSIsInNlcmlhbGl6ZWROdW1DYWxsQXJncyIsInN0YWNrQWxsb2MiLCJiIiwiX2Vtc2NyaXB0ZW5fcnVuX2luX21haW5fcnVudGltZV90aHJlYWRfanMiLCJfZW1zY3JpcHRlbl9yZWNlaXZlX29uX21haW5fdGhyZWFkX2pzX2NhbGxBcmdzIiwiZW1zY3JpcHRlbl9yZWFsbG9jX2J1ZmZlciIsImdyb3ciLCJKU0V2ZW50cyIsImluRXZlbnRIYW5kbGVyIiwicmVtb3ZlQWxsRXZlbnRMaXN0ZW5lcnMiLCJldmVudEhhbmRsZXJzIiwiX3JlbW92ZUhhbmRsZXIiLCJkZWZlcnJlZENhbGxzIiwicmVnaXN0ZXJSZW1vdmVFdmVudExpc3RlbmVycyIsInJlbW92ZUV2ZW50TGlzdGVuZXJzUmVnaXN0ZXJlZCIsImRlZmVyQ2FsbCIsInRhcmdldEZ1bmN0aW9uIiwicHJlY2VkZW5jZSIsImFyZ3NMaXN0IiwiYXJyYXlzSGF2ZUVxdWFsQ29udGVudCIsImFyckEiLCJhcnJCIiwic29ydCIsIngiLCJ5IiwicmVtb3ZlRGVmZXJyZWRDYWxscyIsImNhblBlcmZvcm1FdmVudEhhbmRsZXJSZXF1ZXN0cyIsImN1cnJlbnRFdmVudEhhbmRsZXIiLCJhbGxvd3NEZWZlcnJlZENhbGxzIiwicnVuRGVmZXJyZWRDYWxscyIsInJlbW92ZUFsbEhhbmRsZXJzT25UYXJnZXQiLCJldmVudFR5cGVTdHJpbmciLCJoIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsImV2ZW50TGlzdGVuZXJGdW5jIiwidXNlQ2FwdHVyZSIsInJlZ2lzdGVyT3JSZW1vdmVIYW5kbGVyIiwiZXZlbnRIYW5kbGVyIiwianNFdmVudEhhbmRsZXIiLCJldmVudCIsImhhbmRsZXJGdW5jIiwiY2FsbGJhY2tmdW5jIiwiYWRkRXZlbnRMaXN0ZW5lciIsInF1ZXVlRXZlbnRIYW5kbGVyT25UaHJlYWRfaWlpaSIsImV2ZW50SGFuZGxlckZ1bmMiLCJldmVudFR5cGVJZCIsImV2ZW50RGF0YSIsInVzZXJEYXRhIiwiX19lbXNjcmlwdGVuX2NhbGxfb25fdGhyZWFkIiwiZ2V0VGFyZ2V0VGhyZWFkRm9yRXZlbnRDYWxsYmFjayIsImdldE5vZGVOYW1lRm9yVGFyZ2V0Iiwid2luZG93Iiwic2NyZWVuIiwibm9kZU5hbWUiLCJmdWxsc2NyZWVuRW5hYmxlZCIsImRvY3VtZW50Iiwid2Via2l0RnVsbHNjcmVlbkVuYWJsZWQiLCJzcGVjaWFsSFRNTFRhcmdldHMiLCJmaW5kQ2FudmFzRXZlbnRUYXJnZXQiLCJjU3RyaW5nIiwicXVlcnlTZWxlY3RvciIsImZpbmRFdmVudFRhcmdldCIsIl9lbXNjcmlwdGVuX3NldF9jYW52YXNfZWxlbWVudF9zaXplX2NhbGxpbmdfdGhyZWFkIiwid2lkdGgiLCJoZWlnaHQiLCJjYW52YXMiLCJjYW52YXNTaGFyZWRQdHIiLCJvZmZzY3JlZW5DYW52YXMiLCJjb250cm9sVHJhbnNmZXJyZWRPZmZzY3JlZW4iLCJ0YXJnZXRDYW52YXMiLCJqc1N0cmluZyIsInRhcmdldENhbnZhc1B0ciIsIl9lbXNjcmlwdGVuX3NldF9vZmZzY3JlZW5jYW52YXNfc2l6ZV9vbl90YXJnZXRfdGhyZWFkX2pzIiwiX2Vtc2NyaXB0ZW5fc2V0X29mZnNjcmVlbmNhbnZhc19zaXplX29uX3RhcmdldF90aHJlYWQiLCJhdXRvUmVzaXplVmlld3BvcnQiLCJHTGN0eE9iamVjdCIsIkdMY3R4IiwicHJldlZpZXdwb3J0IiwiZ2V0UGFyYW1ldGVyIiwidmlld3BvcnQiLCJfZW1zY3JpcHRlbl9zZXRfY2FudmFzX2VsZW1lbnRfc2l6ZV9tYWluX3RocmVhZCIsIkdMIiwiY291bnRlciIsInByb2dyYW1zIiwiZnJhbWVidWZmZXJzIiwicmVuZGVyYnVmZmVycyIsInRleHR1cmVzIiwic2hhZGVycyIsInZhb3MiLCJjb250ZXh0cyIsIm9mZnNjcmVlbkNhbnZhc2VzIiwicXVlcmllcyIsInN0cmluZ0NhY2hlIiwidW5wYWNrQWxpZ25tZW50IiwicmVjb3JkRXJyb3IiLCJlcnJvckNvZGUiLCJsYXN0RXJyb3IiLCJnZXROZXdJZCIsInRhYmxlIiwiZ2V0U291cmNlIiwic2hhZGVyIiwic3RyaW5nIiwic291cmNlIiwiY3JlYXRlQ29udGV4dCIsIndlYkdMQ29udGV4dEF0dHJpYnV0ZXMiLCJnZXRDb250ZXh0U2FmYXJpV2ViR0wyRml4ZWQiLCJnZXRDb250ZXh0IiwidmVyIiwiYXR0cnMiLCJnbCIsIldlYkdMUmVuZGVyaW5nQ29udGV4dCIsImN0eCIsInJlZ2lzdGVyQ29udGV4dCIsImNvbnRleHQiLCJhdHRyaWJ1dGVzIiwidmVyc2lvbiIsIm1ham9yVmVyc2lvbiIsImVuYWJsZUV4dGVuc2lvbnNCeURlZmF1bHQiLCJpbml0RXh0ZW5zaW9ucyIsIm1ha2VDb250ZXh0Q3VycmVudCIsImNvbnRleHRIYW5kbGUiLCJjdXJyZW50Q29udGV4dCIsImRlbGV0ZUNvbnRleHQiLCJpbml0RXh0ZW5zaW9uc0RvbmUiLCJleHQiLCJnZXRFeHRlbnNpb24iLCJkaXZpc29yIiwibW9kZSIsImZpcnN0IiwicHJpbWNvdW50IiwiaW5kaWNlcyIsIl9fd2ViZ2xfZW5hYmxlX0FOR0xFX2luc3RhbmNlZF9hcnJheXMiLCJ2YW8iLCJfX3dlYmdsX2VuYWJsZV9PRVNfdmVydGV4X2FycmF5X29iamVjdCIsIm4iLCJidWZzIiwiX193ZWJnbF9lbmFibGVfV0VCR0xfZHJhd19idWZmZXJzIiwiZGlzam9pbnRUaW1lclF1ZXJ5RXh0IiwibXVsdGlEcmF3V2ViZ2wiLCJnZXRTdXBwb3J0ZWRFeHRlbnNpb25zIiwiX19lbXNjcmlwdGVuX3dlYmdsX3Bvd2VyX3ByZWZlcmVuY2VzIiwiX2ZkX2Nsb3NlIiwiX2ZkX3JlYWQiLCJpb3YiLCJpb3ZjbnQiLCJwbnVtIiwiZ2V0U3RyZWFtRnJvbUZEIiwibnVtIiwiZG9SZWFkdiIsIl9mZF9zZWVrIiwib2Zmc2V0X2xvdyIsIm9mZnNldF9oaWdoIiwid2hlbmNlIiwibmV3T2Zmc2V0IiwiX2ZkX3dyaXRlIiwiaiIsInRocmVhZFBhcmFtcyIsInN0YWNrSGlnaCIsInN0YWNrU2l6ZSIsInRpcyIsImRldGFjaGVkIiwiZ2xvYmFsX2xvY2FsZSIsIl9lbXNjcmlwdGVuX2dldF9nbG9iYWxfbGliYyIsIm1zZyIsInN0YXJ0Um91dGluZSIsInRpbWUiLCJ0cmFuc2Zlckxpc3QiLCJfX3B0aHJlYWRfdGVzdGNhbmNlbF9qcyIsImNvZGVzIiwiZW1iaW5kX2luaXRfY2hhckNvZGVzIiwiY2FsbGVkUnVuIiwicHJveGllZEZ1bmN0aW9uVGFibGUiLCJhc21MaWJyYXJ5QXJnIiwibGluZSIsImEwIiwiYTEiLCJzdHJ1Y3RUeXBlIiwicmVnIiwicmF3Q29uc3RydWN0b3IiLCJyYXdEZXN0cnVjdG9yIiwiZmllbGRSZWNvcmRzIiwiZmllbGRzIiwibWFwIiwiZmllbGQiLCJnZXR0ZXJSZXR1cm5UeXBlIiwic2V0dGVyQXJndW1lbnRUeXBlIiwiZmllbGRUeXBlcyIsImZpZWxkTmFtZSIsImdldHRlciIsImdldHRlckNvbnRleHQiLCJzZXR0ZXIiLCJzZXR0ZXJDb250ZXh0IiwicmVhZCIsIndyaXRlIiwibyIsImRlc3RydWN0b3JGdW5jdGlvbiIsInByaW1pdGl2ZVR5cGUiLCJtaW5SYW5nZSIsIm1heFJhbmdlIiwidHJ1ZVZhbHVlIiwiZmFsc2VWYWx1ZSIsInd0IiwiYXJnQ291bnQiLCJyYXdBcmdUeXBlc0FkZHIiLCJyYXdJbnZva2VyIiwiZm4iLCJhcmdUeXBlcyIsImZpcnN0RWxlbWVudCIsImFycmF5IiwiaGVhcDMyVmVjdG9yVG9BcnJheSIsIm51bUFyZ3VtZW50cyIsIm92ZXJsb2FkVGFibGUiLCJwcm90byIsIm1ldGhvZE5hbWUiLCJwcmV2RnVuYyIsImVuc3VyZU92ZXJsb2FkVGFibGUiLCJleHBvc2VQdWJsaWNTeW1ib2wiLCJ0eXBlcyIsInVuYm91bmRUeXBlcyIsInNlZW4iLCJ2aXNpdCIsImpvaW4iLCJ0aHJvd1VuYm91bmRUeXBlRXJyb3IiLCJpbnZva2VyQXJnc0FycmF5Iiwic2xpY2UiLCJyZXBsYWNlUHVibGljU3ltYm9sIiwiY2xhc3NUeXBlIiwiY3BwSW52b2tlckZ1bmMiLCJjcHBUYXJnZXRGdW5jIiwiaXNDbGFzc01ldGhvZEZ1bmMiLCJuZWVkc0Rlc3RydWN0b3JTdGFjayIsInJldHVybnMiLCJhcmdzTGlzdFdpcmVkIiwiaW52b2tlckZuQm9keSIsImR0b3JTdGFjayIsImFyZ3MxIiwiYXJnczIiLCJwYXJhbU5hbWUiLCJhcmd1bWVudExpc3QiLCJkdW1teSIsIm9iaiIsInIiLCJuZXdfIiwiY3JhZnRJbnZva2VyRnVuY3Rpb24iLCJmcm9tV2lyZVR5cGUiLCJiaXRzaGlmdCIsImlzVW5zaWduZWRUeXBlIiwiZGF0YVR5cGVJbmRleCIsIlRBIiwiZGVjb2RlTWVtb3J5VmlldyIsInN0ZFN0cmluZ0lzVVRGOCIsImRlY29kZVN0YXJ0UHRyIiwiY3VycmVudEJ5dGVQdHIiLCJzdHJpbmdTZWdtZW50IiwiYSIsIkFycmF5QnVmZmVyIiwidmFsdWVJc09mVHlwZVN0cmluZyIsIlVpbnQ4Q2xhbXBlZEFycmF5IiwiY2hhckNvZGUiLCJjaGFyU2l6ZSIsImRlY29kZVN0cmluZyIsImVuY29kZVN0cmluZyIsImdldEhlYXAiLCJsZW5ndGhCeXRlc1VURiIsIkhFQVAiLCJjb25zdHJ1Y3RvclNpZ25hdHVyZSIsImRlc3RydWN0b3JTaWduYXR1cmUiLCJnZXR0ZXJTaWduYXR1cmUiLCJzZXR0ZXJTaWduYXR1cmUiLCJpc1ZvaWQiLCJ0YXJnZXRUaHJlYWRJZCIsIm1haW5UaHJlYWRJZCIsInN5bWJvbCIsImFkZHJlc3MiLCJyZXF1aXJlSGFuZGxlIiwibmV3ZXIiLCJmdW5jdGlvbkJvZHkiLCJjcmFmdEVtdmFsQWxsb2NhdG9yIiwiY29kZSIsInNpZ1B0ciIsImFyZ2J1ZiIsImRvdWJsZSIsInJlYWRBc21Db25zdEFyZ3MiLCJleHBlY3RlZFN0YXR1cyIsIm5ld1N0YXR1cyIsImVudiIsIl9zZXRUaHJldyIsIl9sb25nam1wIiwiZGVzdCIsInNyYyIsImNvcHlXaXRoaW4iLCJyZXF1ZXN0ZWRTaXplIiwib2xkU2l6ZSIsIm1heEhlYXBTaXplIiwiY3V0RG93biIsIm92ZXJHcm93bkhlYXBTaXplIiwiTWF0aCIsIm1pbiIsIm1heCIsInBvd2VyUHJlZmVyZW5jZSIsImNvbnRleHRBdHRyaWJ1dGVzIiwibWlub3JWZXJzaW9uIiwiZXhwbGljaXRTd2FwQ29udHJvbCIsInByb3h5Q29udGV4dFRvTWFpblRocmVhZCIsInJlbmRlclZpYU9mZnNjcmVlbkJhY2tCdWZmZXIiLCJzcCIsImEyIiwiYTMiLCJhNCIsImE1IiwiYTYiLCJhNyIsImE4IiwiYTkiLCJhMTAiLCJhMTEiLCJkeW5DYWxsX2lpaWlqaiIsImR5bkNhbGxfaWppaWkiLCJleGVjdXRlIiwiYXR0ciIsInN0YXJ0X3JvdXRpbmUiLCJfZW1zY3JpcHRlbl9zeW5jX3J1bl9pbl9tYWluX3RocmVhZF80IiwiX21lbWFsaWduIiwiYmxvY2siLCJfZW1zY3JpcHRlbl9tYWluX2Jyb3dzZXJfdGhyZWFkX2lkIiwidGhyZWFkU3RhdHVzIiwidGhyZWFkRXhpdENvZGUiLCJfX2Vtc2NyaXB0ZW5fZG9fcHRocmVhZF9qb2luIiwiRGF0ZSIsImluZm8iLCJyZWNlaXZlSW5zdGFuY2UiLCJpbnN0YW5jZSIsIm1vZHVsZSIsImV4cG9ydHMiLCJ1bnNoaWZ0IiwibnVtV29ya2Vyc1RvTG9hZCIsInciLCJpZCIsImNsZWFySW50ZXJ2YWwiLCJyZW1vdmVSdW5EZXBlbmRlbmN5IiwicmVjZWl2ZUluc3RhbnRpYXRpb25SZXN1bHQiLCJyZXN1bHQiLCJpbnN0YW50aWF0ZUFycmF5QnVmZmVyIiwicmVjZWl2ZXIiLCJmZXRjaCIsInRoZW4iLCJjcmVkZW50aWFscyIsImNhdGNoIiwiYmluYXJ5IiwiaW5zdGFudGlhdGUiLCJyZWFzb24iLCJpbnN0YW50aWF0ZVN0cmVhbWluZyIsImNyZWF0ZVdhc20iLCJydW4iLCJwcmVSdW4iLCJkb1J1biIsInBvc3RSdW4iLCJydW5DYWxsZXIiLCJyZWFkeSJdLCJzb3VyY2VSb290IjoiIn0=