"use strict";(self.webpackChunksquoosh_browser_demo=self.webpackChunksquoosh_browser_demo||[]).push([[447],{447:(e,r,n)=>{n.r(r),n.d(r,{default:()=>t});const t=("file:///C:/Users/Dell7010/Desktop/web/tw/squoosh/codecs/avif/enc/avif_enc_mt.js",function(e){function r(){return k.buffer!=x&&Q(k.buffer),E}function t(){return k.buffer!=x&&Q(k.buffer),W}function a(){return k.buffer!=x&&Q(k.buffer),S}function o(){return k.buffer!=x&&Q(k.buffer),P}function i(){return k.buffer!=x&&Q(k.buffer),j}function u(){return k.buffer!=x&&Q(k.buffer),I}function s(){return k.buffer!=x&&Q(k.buffer),R}var c,f;(e=void 0!==(e=e||{})?e:{}).ready=new Promise((function(e,r){c=e,f=r}));var l,d={};for(l in e)e.hasOwnProperty(l)&&(d[l]=e[l]);var p,h=[],v=function(e,r){throw r},m=e.ENVIRONMENT_IS_PTHREAD||!1,g="";function y(r){return e.locateFile?e.locateFile(r,g):g+r}g=self.location.href,g=0!==(g="file:///C:/Users/Dell7010/Desktop/web/tw/squoosh/codecs/avif/enc/avif_enc_mt.js").indexOf("blob:")?g.substr(0,g.lastIndexOf("/")+1):"",p=function(e){var r=new XMLHttpRequest;return r.open("GET",e,!1),r.responseType="arraybuffer",r.send(null),new Uint8Array(r.response)};var _=e.print||console.log.bind(console),w=e.printErr||console.warn.bind(console);for(l in d)d.hasOwnProperty(l)&&(e[l]=d[l]);d=null,e.arguments&&(h=e.arguments),e.thisProgram&&e.thisProgram,e.quit&&(v=e.quit);var b,T=0;Atomics.load,Atomics.store,Atomics.compareExchange,e.wasmBinary&&(b=e.wasmBinary);var k,A,C=e.noExitRuntime||!0;"object"!=typeof WebAssembly&&ae("no native wasm support detected");var x,E,W,S,P,j,I,F,R,H=!1;function L(e,r){e||ae("Assertion failed: "+r)}function M(e,r,n){for(var t=r+n,a="";!(r>=t);){var o=e[r++];if(!o)return a;if(128&o){var i=63&e[r++];if(192!=(224&o)){var u=63&e[r++];if((o=224==(240&o)?(15&o)<<12|i<<6|u:(7&o)<<18|i<<12|u<<6|63&e[r++])<65536)a+=String.fromCharCode(o);else{var s=o-65536;a+=String.fromCharCode(55296|s>>10,56320|1023&s)}}else a+=String.fromCharCode((31&o)<<6|i)}else a+=String.fromCharCode(o)}return a}function O(e,r){return e?M(t(),e,r):""}function D(e,r,n){return function(e,r,n,t){if(!(t>0))return 0;for(var a=n,o=n+t-1,i=0;i<e.length;++i){var u=e.charCodeAt(i);if(u>=55296&&u<=57343&&(u=65536+((1023&u)<<10)|1023&e.charCodeAt(++i)),u<=127){if(n>=o)break;r[n++]=u}else if(u<=2047){if(n+1>=o)break;r[n++]=192|u>>6,r[n++]=128|63&u}else if(u<=65535){if(n+2>=o)break;r[n++]=224|u>>12,r[n++]=128|u>>6&63,r[n++]=128|63&u}else{if(n+3>=o)break;r[n++]=240|u>>18,r[n++]=128|u>>12&63,r[n++]=128|u>>6&63,r[n++]=128|63&u}}return r[n]=0,n-a}(e,t(),r,n)}function B(e){for(var r=0,n=0;n<e.length;++n){var t=e.charCodeAt(n);t>=55296&&t<=57343&&(t=65536+((1023&t)<<10)|1023&e.charCodeAt(++n)),t<=127?++r:r+=t<=2047?2:t<=65535?3:4}return r}function U(e,r){for(var n="",t=0;!(t>=r/2);++t){var o=a()[e+2*t>>1];if(0==o)break;n+=String.fromCharCode(o)}return n}function G(e,r,n){if(void 0===n&&(n=2147483647),n<2)return 0;for(var t=r,o=(n-=2)<2*e.length?n/2:e.length,i=0;i<o;++i){var u=e.charCodeAt(i);a()[r>>1]=u,r+=2}return a()[r>>1]=0,r-t}function N(e){return 2*e.length}function q(e,r){for(var n=0,t="";!(n>=r/4);){var a=i()[e+4*n>>2];if(0==a)break;if(++n,a>=65536){var o=a-65536;t+=String.fromCharCode(55296|o>>10,56320|1023&o)}else t+=String.fromCharCode(a)}return t}function V(e,r,n){if(void 0===n&&(n=2147483647),n<4)return 0;for(var t=r,a=t+n-4,o=0;o<e.length;++o){var u=e.charCodeAt(o);if(u>=55296&&u<=57343&&(u=65536+((1023&u)<<10)|1023&e.charCodeAt(++o)),i()[r>>2]=u,(r+=4)+4>a)break}return i()[r>>2]=0,r-t}function z(e){for(var r=0,n=0;n<e.length;++n){var t=e.charCodeAt(n);t>=55296&&t<=57343&&++n,r+=4}return r}function Q(r){x=r,e.HEAP8=E=new Int8Array(r),e.HEAP16=S=new Int16Array(r),e.HEAP32=j=new Int32Array(r),e.HEAPU8=W=new Uint8Array(r),e.HEAPU16=P=new Uint16Array(r),e.HEAPU32=I=new Uint32Array(r),e.HEAPF32=F=new Float32Array(r),e.HEAPF64=R=new Float64Array(r)}m&&(x=e.buffer);var J,X=e.INITIAL_MEMORY||16777216;if(m)k=e.wasmMemory,x=e.buffer;else if(e.wasmMemory)k=e.wasmMemory;else if(!((k=new WebAssembly.Memory({initial:X/65536,maximum:32768,shared:!0})).buffer instanceof SharedArrayBuffer))throw w("requested a shared WebAssembly.Memory but the returned buffer is not a SharedArrayBuffer, indicating that while the browser has SharedArrayBuffer it does not have WebAssembly threads support - you may need to set a flag"),Error("bad memory");k&&(x=k.buffer),X=x.byteLength,Q(x);var K=[],Y=[],Z=[],$=[];function ee(){m||ce(Y)}var re=0,ne=null,te=null;function ae(r){e.onAbort&&e.onAbort(r),m&&console.error("Pthread aborting at "+(new Error).stack),w(r+=""),H=!0,r="abort("+r+"). Build with -s ASSERTIONS=1 for more info.";var n=new WebAssembly.RuntimeError(r);throw f(n),n}function oe(e){return e.startsWith("data:application/octet-stream;base64,")}if(e.preloadedImages={},e.preloadedAudios={},e.locateFile)oe(ie="avif_enc_mt.wasm")||(ie=y(ie));else var ie=new URL(n(211),n.b).toString();function ue(e){try{if(e==ie&&b)return new Uint8Array(b);if(p)return p(e);throw"both async and sync fetching of the wasm failed"}catch(e){ae(e)}}var se={600540:function(){throw"Canceled!"},600558:function(e,r){setTimeout((function(){xr(e,r)}),0)}};function ce(r){for(;r.length>0;){var n=r.shift();if("function"!=typeof n){var t=n.func;"number"==typeof t?void 0===n.arg?J.get(t)():J.get(t)(n.arg):t(void 0===n.arg?null:n.arg)}else n(e)}}function fe(e,n){if(e<=0||e>r().length||!0&e||n<0)return-28;if(0==n)return 0;n>=2147483647&&(n=1/0);var t=Atomics.load(i(),qr>>2),a=0;if(t==e&&Atomics.compareExchange(i(),qr>>2,t,0)==t&&(a=1,--n<=0))return 1;var o=Atomics.notify(i(),e>>2,n);if(o>=0)return o+a;throw"Atomics.notify returned an unexpected value "+o}function le(e){if(m)throw"Internal Error! cleanupThread() can only ever be called from main application thread!";if(!e)throw"Internal Error! Null pthread_ptr in cleanupThread!";var r=pe.pthreads[e];if(r){i()[e+12>>2]=0;var n=r.worker;pe.returnWorkerToPool(n)}}e._emscripten_futex_wake=fe;var de,pe={unusedWorkers:[],runningWorkers:[],tlsInitFunctions:[],initMainThreadBlock:function(){for(var e=navigator.hardwareConcurrency,r=0;r<e;++r)pe.allocateUnusedWorker()},initRuntime:function(){for(var e=br(228),r=0;r<57;++r)u()[e/4+r]=0;i()[e+12>>2]=e;var n=e+152;i()[n>>2]=n;var t=br(512);for(r=0;r<128;++r)u()[t/4+r]=0;Atomics.store(u(),e+100>>2,t),Atomics.store(u(),e+40>>2,e),jr(e,!1,1),Ar(e)},initWorker:function(){},pthreads:{},threadExitHandlers:[],runExitHandlers:function(){for(;pe.threadExitHandlers.length>0;)pe.threadExitHandlers.pop()();m&&Fr()&&Rr()},runExitHandlersAndDeinitThread:function(e,r){Atomics.store(u(),e+56>>2,1),Atomics.store(u(),e+60>>2,0),pe.runExitHandlers(),Atomics.store(u(),e+4>>2,r),Atomics.store(u(),e+0>>2,1),fe(e+0,2147483647),jr(0,0,0)},setExitStatus:function(e){},threadExit:function(e){var r=Fr();r&&(pe.runExitHandlersAndDeinitThread(r,e),m&&postMessage({cmd:"exit"}))},threadCancel:function(){pe.runExitHandlersAndDeinitThread(Fr(),-1),postMessage({cmd:"cancelDone"})},terminateAllThreads:function(){for(var e in pe.pthreads)(t=pe.pthreads[e])&&t.worker&&pe.returnWorkerToPool(t.worker);pe.pthreads={};for(var r=0;r<pe.unusedWorkers.length;++r)(n=pe.unusedWorkers[r]).terminate();for(pe.unusedWorkers=[],r=0;r<pe.runningWorkers.length;++r){var n,t=(n=pe.runningWorkers[r]).pthread;pe.freeThreadData(t),n.terminate()}pe.runningWorkers=[]},freeThreadData:function(e){if(e){if(e.threadInfoStruct){var r=i()[e.threadInfoStruct+100>>2];i()[e.threadInfoStruct+100>>2]=0,Tr(r),Tr(e.threadInfoStruct)}e.threadInfoStruct=0,e.allocatedOwnStack&&e.stackBase&&Tr(e.stackBase),e.stackBase=0,e.worker&&(e.worker.pthread=null)}},returnWorkerToPool:function(e){pe.runWithoutMainThreadQueuedCalls((function(){delete pe.pthreads[e.pthread.threadInfoStruct],pe.unusedWorkers.push(e),pe.runningWorkers.splice(pe.runningWorkers.indexOf(e),1),pe.freeThreadData(e.pthread),e.pthread=void 0}))},runWithoutMainThreadQueuedCalls:function(e){i()[Nr>>2]=0;try{e()}finally{i()[Nr>>2]=1}},receiveObjectTransfer:function(e){},threadInit:function(){for(var e in pe.tlsInitFunctions)pe.tlsInitFunctions[e]()},loadWasmModuleToWorker:function(r,n){r.onmessage=function(t){var a=t.data,o=a.cmd;if(r.pthread&&(pe.currentProxiedOperationCallerThread=r.pthread.threadInfoStruct),a.targetThread&&a.targetThread!=Fr()){var s=pe.pthreads[a.targetThread];return s?s.worker.postMessage(t.data,a.transferList):console.error('Internal error! Worker sent a message "'+o+'" to target pthread '+a.targetThread+", but that thread no longer exists!"),void(pe.currentProxiedOperationCallerThread=void 0)}if("processQueuedMainThreadWork"===o)Wr();else if("spawnThread"===o)mr(t.data);else if("cleanupThread"===o)le(a.thread);else if("killThread"===o)!function(e){if(m)throw"Internal Error! killThread() can only ever be called from main application thread!";if(!e)throw"Internal Error! Null pthread_ptr in killThread!";i()[e+12>>2]=0;var r=pe.pthreads[e];r.worker.terminate(),pe.freeThreadData(r),pe.runningWorkers.splice(pe.runningWorkers.indexOf(r.worker),1),r.worker.pthread=void 0}(a.thread);else if("cancelThread"===o)!function(e){if(m)throw"Internal Error! cancelThread() can only ever be called from main application thread!";if(!e)throw"Internal Error! Null pthread_ptr in cancelThread!";pe.pthreads[e].worker.postMessage({cmd:"cancel"})}(a.thread);else if("loaded"===o)r.loaded=!0,n&&n(r),r.runPthread&&(r.runPthread(),delete r.runPthread);else if("print"===o)_("Thread "+a.threadId+": "+a.text);else if("printErr"===o)w("Thread "+a.threadId+": "+a.text);else if("alert"===o)alert("Thread "+a.threadId+": "+a.text);else if("exit"===o)r.pthread&&Atomics.load(u(),r.pthread.threadInfoStruct+64>>2)&&pe.returnWorkerToPool(r);else if("exitProcess"===o)try{!function(r,n){if(m)throw postMessage({cmd:"exitProcess",returnCode:r}),new Vr(r);he()||(pe.terminateAllThreads(),e.onExit&&e.onExit(r),H=!0),v(r,new Vr(r))}(a.returnCode)}catch(t){if(t instanceof Vr)return;throw t}else"cancelDone"===o?pe.returnWorkerToPool(r):"objectTransfer"===o?pe.receiveObjectTransfer(t.data):"setimmediate"===t.data.target?r.postMessage(t.data):w("worker sent an unknown command "+o);pe.currentProxiedOperationCallerThread=void 0},r.onerror=function(e){w("pthread sent an error! "+e.filename+":"+e.lineno+": "+e.message)},r.postMessage({cmd:"load",urlOrBlob:e.mainScriptUrlOrBlob,wasmMemory:k,wasmModule:A})},allocateUnusedWorker:function(){if(e.locateFile){var r=y("avif_enc_mt.worker.js");pe.unusedWorkers.push(new Worker(r))}else pe.unusedWorkers.push(new Worker(new URL(n.p+n.u(95),n.b)))},getNewWorker:function(){return 0==pe.unusedWorkers.length&&(pe.allocateUnusedWorker(),pe.loadWasmModuleToWorker(pe.unusedWorkers[0])),pe.unusedWorkers.pop()},busySpinWait:function(e){for(var r=performance.now()+e;performance.now()<r;);}};function he(){return C||!1}function ve(e,r){pe.threadExitHandlers.push((function(){J.get(e)(r)}))}e.establishStackSpace=function(e,r){Or(e,r),Lr(e)},e.invokeEntryPoint=function(e,r){return J.get(e)(r)},e.keepRuntimeAlive=he,de=m?function(){return performance.now()-e.__performance_now_clock_drift}:function(){return performance.now()};var me={mappings:{},buffers:[null,[],[]],printChar:function(e,r){var n=me.buffers[e];0===r||10===r?((1===e?_:w)(M(n,0)),n.length=0):n.push(r)},varargs:void 0,get:function(){return me.varargs+=4,i()[me.varargs-4>>2]},getStr:function(e){return O(e)},get64:function(e,r){return e}};function ge(e,r,n){return m?rr(1,1,e,r,n):(me.varargs=n,0)}function ye(e,r,n){return m?rr(2,1,e,r,n):(me.varargs=n,0)}function _e(e,r,n){if(m)return rr(3,1,e,r,n);me.varargs=n}var we={};function be(e){for(;e.length;){var r=e.pop();e.pop()(r)}}function Te(e){return this.fromWireType(u()[e>>2])}var ke={},Ae={},Ce={};function xe(e){if(void 0===e)return"_unknown";var r=(e=e.replace(/[^a-zA-Z0-9_]/g,"$")).charCodeAt(0);return r>=48&&r<=57?"_"+e:e}function Ee(e,r){return e=xe(e),new Function("body","return function "+e+'() {\n    "use strict";    return body.apply(this, arguments);\n};\n')(r)}function We(e,r){var n=Ee(r,(function(e){this.name=r,this.message=e;var n=new Error(e).stack;void 0!==n&&(this.stack=this.toString()+"\n"+n.replace(/^Error(:[^\n]*)?\n/,""))}));return n.prototype=Object.create(e.prototype),n.prototype.constructor=n,n.prototype.toString=function(){return void 0===this.message?this.name:this.name+": "+this.message},n}var Se=void 0;function Pe(e){throw new Se(e)}function je(e,r,n){function t(r){var t=n(r);t.length!==e.length&&Pe("Mismatched type converter count");for(var a=0;a<e.length;++a)Me(e[a],t[a])}e.forEach((function(e){Ce[e]=r}));var a=new Array(r.length),o=[],i=0;r.forEach((function(e,r){Ae.hasOwnProperty(e)?a[r]=Ae[e]:(o.push(e),ke.hasOwnProperty(e)||(ke[e]=[]),ke[e].push((function(){a[r]=Ae[e],++i===o.length&&t(a)})))})),0===o.length&&t(a)}function Ie(e){switch(e){case 1:return 0;case 2:return 1;case 4:return 2;case 8:return 3;default:throw new TypeError("Unknown type size: "+e)}}var Fe=void 0;function Re(e){for(var r="",n=e;t()[n];)r+=Fe[t()[n++]];return r}var He=void 0;function Le(e){throw new He(e)}function Me(e,r,n){if(n=n||{},!("argPackAdvance"in r))throw new TypeError("registerType registeredInstance requires argPackAdvance");var t=r.name;if(e||Le('type "'+t+'" must have a positive integer typeid pointer'),Ae.hasOwnProperty(e)){if(n.ignoreDuplicateRegistrations)return;Le("Cannot register type '"+t+"' twice")}if(Ae[e]=r,delete Ce[e],ke.hasOwnProperty(e)){var a=ke[e];delete ke[e],a.forEach((function(e){e()}))}}var Oe=[],De=[{},{value:void 0},{value:null},{value:!0},{value:!1}];function Be(e){e>4&&0==--De[e].refcount&&(De[e]=void 0,Oe.push(e))}function Ue(e){switch(e){case void 0:return 1;case null:return 2;case!0:return 3;case!1:return 4;default:var r=Oe.length?Oe.pop():De.length;return De[r]={refcount:1,value:e},r}}function Ge(e){if(null===e)return"null";var r=typeof e;return"object"===r||"array"===r||"function"===r?e.toString():""+e}function Ne(e,r){switch(r){case 2:return function(e){return this.fromWireType((k.buffer!=x&&Q(k.buffer),F)[e>>2])};case 3:return function(e){return this.fromWireType(s()[e>>3])};default:throw new TypeError("Unknown float type: "+e)}}function qe(r,n,t){return r.includes("j")?function(r,n,t){var a=e["dynCall_"+r];return t&&t.length?a.apply(null,[n].concat(t)):a.call(null,n)}(r,n,t):J.get(n).apply(null,t)}function Ve(e,r){var n,t,a,o=(e=Re(e)).includes("j")?(n=e,t=r,a=[],function(){a.length=arguments.length;for(var e=0;e<arguments.length;e++)a[e]=arguments[e];return qe(n,t,a)}):J.get(r);return"function"!=typeof o&&Le("unknown function pointer with signature "+e+": "+r),o}var ze=void 0;function Qe(e){var r=kr(e),n=Re(r);return Tr(r),n}function Je(e,n,s){switch(n){case 0:return s?function(e){return r()[e]}:function(e){return t()[e]};case 1:return s?function(e){return a()[e>>1]}:function(e){return o()[e>>1]};case 2:return s?function(e){return i()[e>>2]}:function(e){return u()[e>>2]};default:throw new TypeError("Unknown integer type: "+e)}}var Xe={};function Ke(){return"object"==typeof globalThis?globalThis:Function("return this")()}function Ye(e,r){var n=Ae[e];return void 0===n&&Le(r+" has unknown type "+Qe(e)),n}var Ze={},$e=[];function er(e,n,t){if(e<=0||e>r().length||!0&e)return-28;var a=Atomics.wait(i(),e>>2,n,t);if("timed-out"===a)return-73;if("not-equal"===a)return-6;if("ok"===a)return 0;throw"Atomics.wait returned an unexpected value "+a}function rr(e,r){for(var n=arguments.length-2,t=Hr(),a=n,o=Mr(8*a),i=o>>3,u=0;u<n;u++){var c=arguments[2+u];s()[i+u]=c}var f=Sr(e,a,o,r);return Lr(t),f}var nr=[];function tr(e){try{return k.grow(e-x.byteLength+65535>>>16),Q(k.buffer),1}catch(e){}}var ar={inEventHandler:0,removeAllEventListeners:function(){for(var e=ar.eventHandlers.length-1;e>=0;--e)ar._removeHandler(e);ar.eventHandlers=[],ar.deferredCalls=[]},registerRemoveEventListeners:function(){ar.removeEventListenersRegistered||(Z.push(ar.removeAllEventListeners),ar.removeEventListenersRegistered=!0)},deferredCalls:[],deferCall:function(e,r,n){function t(e,r){if(e.length!=r.length)return!1;for(var n in e)if(e[n]!=r[n])return!1;return!0}for(var a in ar.deferredCalls){var o=ar.deferredCalls[a];if(o.targetFunction==e&&t(o.argsList,n))return}ar.deferredCalls.push({targetFunction:e,precedence:r,argsList:n}),ar.deferredCalls.sort((function(e,r){return e.precedence<r.precedence}))},removeDeferredCalls:function(e){for(var r=0;r<ar.deferredCalls.length;++r)ar.deferredCalls[r].targetFunction==e&&(ar.deferredCalls.splice(r,1),--r)},canPerformEventHandlerRequests:function(){return ar.inEventHandler&&ar.currentEventHandler.allowsDeferredCalls},runDeferredCalls:function(){if(ar.canPerformEventHandlerRequests())for(var e=0;e<ar.deferredCalls.length;++e){var r=ar.deferredCalls[e];ar.deferredCalls.splice(e,1),--e,r.targetFunction.apply(null,r.argsList)}},eventHandlers:[],removeAllHandlersOnTarget:function(e,r){for(var n=0;n<ar.eventHandlers.length;++n)ar.eventHandlers[n].target!=e||r&&r!=ar.eventHandlers[n].eventTypeString||ar._removeHandler(n--)},_removeHandler:function(e){var r=ar.eventHandlers[e];r.target.removeEventListener(r.eventTypeString,r.eventListenerFunc,r.useCapture),ar.eventHandlers.splice(e,1)},registerOrRemoveHandler:function(e){var r=function(r){++ar.inEventHandler,ar.currentEventHandler=e,ar.runDeferredCalls(),e.handlerFunc(r),ar.runDeferredCalls(),--ar.inEventHandler};if(e.callbackfunc)e.eventListenerFunc=r,e.target.addEventListener(e.eventTypeString,r,e.useCapture),ar.eventHandlers.push(e),ar.registerRemoveEventListeners();else for(var n=0;n<ar.eventHandlers.length;++n)ar.eventHandlers[n].target==e.target&&ar.eventHandlers[n].eventTypeString==e.eventTypeString&&ar._removeHandler(n--)},queueEventHandlerOnThread_iiii:function(e,r,n,t,a){var o=Hr(),u=Mr(12);i()[u>>2]=n,i()[u+4>>2]=t,i()[u+8>>2]=a,Pr(0,e,637534208,r,t,u),Lr(o)},getTargetThreadForEventCallback:function(e){switch(e){case 1:return 0;case 2:return pe.currentProxiedOperationCallerThread;default:return e}},getNodeNameForTarget:function(e){return e?e==window?"#window":e==screen?"#screen":e&&e.nodeName?e.nodeName:"":""},fullscreenEnabled:function(){return document.fullscreenEnabled||document.webkitFullscreenEnabled}};var or=[0,"undefined"!=typeof document?document:0,"undefined"!=typeof window?window:0];function ir(e){return function(e){var r;return e=(r=e)>2?O(r):r,or[e]||("undefined"!=typeof document?document.querySelector(e):void 0)}(e)}function ur(e,r,n){var t=ir(e);if(!t)return-4;if(t.canvasSharedPtr&&(i()[t.canvasSharedPtr>>2]=r,i()[t.canvasSharedPtr+4>>2]=n),!t.offscreenCanvas&&t.controlTransferredOffscreen)return t.canvasSharedPtr?(function(e,r,n,t){!function(e,r,n,t){var a,o,u,s=Hr(),c=Mr(12),f=0;r&&(o=B(a=r)+1,D(a,u=br(o),o),f=u),i()[c>>2]=f,i()[c+4>>2]=n,i()[c+8>>2]=t,Pr(0,e,657457152,0,f,c),Lr(s)}(e,r=r?O(r):"",n,t)}(i()[t.canvasSharedPtr+8>>2],e,r,n),1):-4;t.offscreenCanvas&&(t=t.offscreenCanvas);var a=!1;if(t.GLctxObject&&t.GLctxObject.GLctx){var o=t.GLctxObject.GLctx.getParameter(2978);a=0===o[0]&&0===o[1]&&o[2]===t.width&&o[3]===t.height}return t.width=r,t.height=n,a&&t.GLctxObject.GLctx.viewport(0,0,r,n),0}function sr(e,r,n){return m?rr(4,1,e,r,n):ur(e,r,n)}var cr,fr={counter:1,buffers:[],programs:[],framebuffers:[],renderbuffers:[],textures:[],shaders:[],vaos:[],contexts:{},offscreenCanvases:{},queries:[],stringCache:{},unpackAlignment:4,recordError:function(e){fr.lastError||(fr.lastError=e)},getNewId:function(e){for(var r=fr.counter++,n=e.length;n<r;n++)e[n]=null;return r},getSource:function(e,r,n,t){for(var a="",o=0;o<r;++o){var u=t?i()[t+4*o>>2]:-1;a+=O(i()[n+4*o>>2],u<0?void 0:u)}return a},createContext:function(e,r){e.getContextSafariWebGL2Fixed||(e.getContextSafariWebGL2Fixed=e.getContext,e.getContext=function(r,n){var t=e.getContextSafariWebGL2Fixed(r,n);return"webgl"==r==t instanceof WebGLRenderingContext?t:null});var n=e.getContext("webgl",r);return n?fr.registerContext(n,r):0},registerContext:function(e,r){var n=br(8);i()[n+4>>2]=Fr();var t={handle:n,attributes:r,version:r.majorVersion,GLctx:e};return e.canvas&&(e.canvas.GLctxObject=t),fr.contexts[n]=t,(void 0===r.enableExtensionsByDefault||r.enableExtensionsByDefault)&&fr.initExtensions(t),n},makeContextCurrent:function(r){return fr.currentContext=fr.contexts[r],e.ctx=cr=fr.currentContext&&fr.currentContext.GLctx,!(r&&!cr)},getContext:function(e){return fr.contexts[e]},deleteContext:function(e){fr.currentContext===fr.contexts[e]&&(fr.currentContext=null),"object"==typeof ar&&ar.removeAllHandlersOnTarget(fr.contexts[e].GLctx.canvas),fr.contexts[e]&&fr.contexts[e].GLctx.canvas&&(fr.contexts[e].GLctx.canvas.GLctxObject=void 0),Tr(fr.contexts[e].handle),fr.contexts[e]=null},initExtensions:function(e){if(e||(e=fr.currentContext),!e.initExtensionsDone){e.initExtensionsDone=!0;var r,n=e.GLctx;!function(e){var r=e.getExtension("ANGLE_instanced_arrays");r&&(e.vertexAttribDivisor=function(e,n){r.vertexAttribDivisorANGLE(e,n)},e.drawArraysInstanced=function(e,n,t,a){r.drawArraysInstancedANGLE(e,n,t,a)},e.drawElementsInstanced=function(e,n,t,a,o){r.drawElementsInstancedANGLE(e,n,t,a,o)})}(n),function(e){var r=e.getExtension("OES_vertex_array_object");r&&(e.createVertexArray=function(){return r.createVertexArrayOES()},e.deleteVertexArray=function(e){r.deleteVertexArrayOES(e)},e.bindVertexArray=function(e){r.bindVertexArrayOES(e)},e.isVertexArray=function(e){return r.isVertexArrayOES(e)})}(n),function(e){var r=e.getExtension("WEBGL_draw_buffers");r&&(e.drawBuffers=function(e,n){r.drawBuffersWEBGL(e,n)})}(n),n.disjointTimerQueryExt=n.getExtension("EXT_disjoint_timer_query"),(r=n).multiDrawWebgl=r.getExtension("WEBGL_multi_draw"),(n.getSupportedExtensions()||[]).forEach((function(e){e.includes("lose_context")||e.includes("debug")||n.getExtension(e)}))}}},lr=["default","low-power","high-performance"];function dr(e){return m?rr(5,1,e):0}function pr(e,r,n,t){if(m)return rr(6,1,e,r,n,t);var a=me.getStreamFromFD(e),o=me.doReadv(a,r,n);return i()[t>>2]=o,0}function hr(e,r,n,t,a){if(m)return rr(7,1,e,r,n,t,a)}function vr(e,r,n,a){if(m)return rr(8,1,e,r,n,a);for(var o=0,u=0;u<n;u++){for(var s=i()[r+8*u>>2],c=i()[r+(8*u+4)>>2],f=0;f<c;f++)me.printChar(e,t()[s+f]);o+=c}return i()[a>>2]=o,0}function mr(e){if(m)throw"Internal Error! spawnThread() can only ever be called from main application thread!";var r=pe.getNewWorker();if(!r)return 6;if(void 0!==r.pthread)throw"Internal error!";if(!e.pthread_ptr)throw"Internal error, no pthread ptr!";pe.runningWorkers.push(r);for(var n=br(512),t=0;t<128;++t)i()[n+4*t>>2]=0;var a=e.stackBase+e.stackSize,o=pe.pthreads[e.pthread_ptr]={worker:r,stackBase:e.stackBase,stackSize:e.stackSize,allocatedOwnStack:e.allocatedOwnStack,threadInfoStruct:e.pthread_ptr},s=o.threadInfoStruct>>2;Atomics.store(u(),s+16,e.detached),Atomics.store(u(),s+25,n),Atomics.store(u(),s+10,o.threadInfoStruct),Atomics.store(u(),s+20,e.stackSize),Atomics.store(u(),s+19,a),Atomics.store(u(),s+26,e.stackSize),Atomics.store(u(),s+28,a),Atomics.store(u(),s+29,e.detached);var c=Ir()+40;Atomics.store(u(),s+43,c),r.pthread=o;var f={cmd:"run",start_routine:e.startRoutine,arg:e.arg,threadInfoStruct:e.pthread_ptr,stackBase:e.stackBase,stackSize:e.stackSize};return r.runPthread=function(){f.time=performance.now(),r.postMessage(f,e.transferList)},r.loaded&&(r.runPthread(),delete r.runPthread),0}function gr(){if(m){var e=Fr();if(e&&!Atomics.load(u(),e+56>>2)&&2==Atomics.load(u(),e+0>>2))throw"Canceled!"}}m||pe.initMainThreadBlock(),Se=e.InternalError=We(Error,"InternalError"),function(){for(var e=new Array(256),r=0;r<256;++r)e[r]=String.fromCharCode(r);Fe=e}(),He=e.BindingError=We(Error,"BindingError"),e.count_emval_handles=function(){for(var e=0,r=5;r<De.length;++r)void 0!==De[r]&&++e;return e},e.get_first_emval=function(){for(var e=5;e<De.length;++e)if(void 0!==De[e])return De[e];return null},ze=e.UnboundTypeError=We(Error,"UnboundTypeError");var yr,_r=[null,ge,ye,_e,sr,dr,pr,hr,vr],wr={k:function(e,r,n,t){ae("Assertion failed: "+O(e)+", at: "+[r?O(r):"unknown filename",n,t?O(t):"unknown function"])},B:function(e,r){return ve(e,r)},t:ge,T:ye,U:_e,E:function(e){var r=we[e];delete we[e];var n=r.rawConstructor,t=r.rawDestructor,a=r.fields;je([e],a.map((function(e){return e.getterReturnType})).concat(a.map((function(e){return e.setterArgumentType}))),(function(e){var o={};return a.forEach((function(r,n){var t=r.fieldName,i=e[n],u=r.getter,s=r.getterContext,c=e[n+a.length],f=r.setter,l=r.setterContext;o[t]={read:function(e){return i.fromWireType(u(s,e))},write:function(e,r){var n=[];f(l,e,c.toWireType(n,r)),be(n)}}})),[{name:r.name,fromWireType:function(e){var r={};for(var n in o)r[n]=o[n].read(e);return t(e),r},toWireType:function(e,r){for(var a in o)if(!(a in r))throw new TypeError('Missing field:  "'+a+'"');var i=n();for(a in o)o[a].write(i,r[a]);return null!==e&&e.push(t,i),i},argPackAdvance:8,readValueFromPointer:Te,destructorFunction:t}]}))},I:function(e,r,n,t,a){},ca:function(e,n,t,o,u){var s=Ie(t);Me(e,{name:n=Re(n),fromWireType:function(e){return!!e},toWireType:function(e,r){return r?o:u},argPackAdvance:8,readValueFromPointer:function(e){var o;if(1===t)o=r();else if(2===t)o=a();else{if(4!==t)throw new TypeError("Unknown boolean type size: "+n);o=i()}return this.fromWireType(o[e>>s])},destructorFunction:null})},ba:function(e,r){Me(e,{name:r=Re(r),fromWireType:function(e){var r=De[e].value;return Be(e),r},toWireType:function(e,r){return Ue(r)},argPackAdvance:8,readValueFromPointer:Te,destructorFunction:null})},y:function(e,r,n){var t=Ie(n);Me(e,{name:r=Re(r),fromWireType:function(e){return e},toWireType:function(e,r){if("number"!=typeof r&&"boolean"!=typeof r)throw new TypeError('Cannot convert "'+Ge(r)+'" to '+this.name);return r},argPackAdvance:8,readValueFromPointer:Ne(r,t),destructorFunction:null})},D:function(r,n,t,a,o,u){var s=function(e,r){for(var n=[],t=0;t<e;t++)n.push(i()[(r>>2)+t]);return n}(n,t);r=Re(r),o=Ve(a,o),function(r,n,t){e.hasOwnProperty(r)?((void 0===t||void 0!==e[r].overloadTable&&void 0!==e[r].overloadTable[t])&&Le("Cannot register public name '"+r+"' twice"),function(e,r,n){if(void 0===e[r].overloadTable){var t=e[r];e[r]=function(){return e[r].overloadTable.hasOwnProperty(arguments.length)||Le("Function '"+n+"' called with an invalid number of arguments ("+arguments.length+") - expects one of ("+e[r].overloadTable+")!"),e[r].overloadTable[arguments.length].apply(this,arguments)},e[r].overloadTable=[],e[r].overloadTable[t.argCount]=t}}(e,r,r),e.hasOwnProperty(t)&&Le("Cannot register multiple overloads of a function with the same number of arguments ("+t+")!"),e[r].overloadTable[t]=n):(e[r]=n,void 0!==t&&(e[r].numArguments=t))}(r,(function(){!function(e,r){var n=[],t={};throw r.forEach((function e(r){t[r]||Ae[r]||(Ce[r]?Ce[r].forEach(e):(n.push(r),t[r]=!0))})),new ze(e+": "+n.map(Qe).join([", "]))}("Cannot call "+r+" due to unbound types",s)}),n-1),je([],s,(function(t){var a=[t[0],null].concat(t.slice(1));return function(r,n,t){e.hasOwnProperty(r)||Pe("Replacing nonexistant public symbol"),void 0!==e[r].overloadTable&&void 0!==t?e[r].overloadTable[t]=n:(e[r]=n,e[r].argCount=t)}(r,function(e,r,n,t,a){var o=r.length;o<2&&Le("argTypes array size mismatch! Must at least get return value and 'this' types!");for(var i=null!==r[1]&&null!==n,u=!1,s=1;s<r.length;++s)if(null!==r[s]&&void 0===r[s].destructorFunction){u=!0;break}var c="void"!==r[0].name,f="",l="";for(s=0;s<o-2;++s)f+=(0!==s?", ":"")+"arg"+s,l+=(0!==s?", ":"")+"arg"+s+"Wired";var d="return function "+xe(e)+"("+f+") {\nif (arguments.length !== "+(o-2)+") {\nthrowBindingError('function "+e+" called with ' + arguments.length + ' arguments, expected "+(o-2)+" args!');\n}\n";u&&(d+="var destructors = [];\n");var p=u?"destructors":"null",h=["throwBindingError","invoker","fn","runDestructors","retType","classParam"],v=[Le,t,a,be,r[0],r[1]];for(i&&(d+="var thisWired = classParam.toWireType("+p+", this);\n"),s=0;s<o-2;++s)d+="var arg"+s+"Wired = argType"+s+".toWireType("+p+", arg"+s+"); // "+r[s+2].name+"\n",h.push("argType"+s),v.push(r[s+2]);if(i&&(l="thisWired"+(l.length>0?", ":"")+l),d+=(c?"var rv = ":"")+"invoker(fn"+(l.length>0?", ":"")+l+");\n",u)d+="runDestructors(destructors);\n";else for(s=i?1:2;s<r.length;++s){var m=1===s?"thisWired":"arg"+(s-2)+"Wired";null!==r[s].destructorFunction&&(d+=m+"_dtor("+m+"); // "+r[s].name+"\n",h.push(m+"_dtor"),v.push(r[s].destructorFunction))}return c&&(d+="var ret = retType.fromWireType(rv);\nreturn ret;\n"),d+="}\n",h.push(d),function(e,r){if(!(e instanceof Function))throw new TypeError("new_ called with constructor type "+typeof e+" which is not a function");var n=Ee(e.name||"unknownFunctionName",(function(){}));n.prototype=e.prototype;var t=new n,a=e.apply(t,r);return a instanceof Object?a:t}(Function,h).apply(null,v)}(r,a,null,o,u),n-1),[]}))},j:function(e,r,n,t,a){r=Re(r),-1===a&&(a=4294967295);var o=Ie(n),i=function(e){return e};if(0===t){var u=32-8*n;i=function(e){return e<<u>>>u}}var s=r.includes("unsigned");Me(e,{name:r,fromWireType:i,toWireType:function(e,n){if("number"!=typeof n&&"boolean"!=typeof n)throw new TypeError('Cannot convert "'+Ge(n)+'" to '+this.name);if(n<t||n>a)throw new TypeError('Passing a number "'+Ge(n)+'" from JS side to C/C++ side to an argument of type "'+r+'", which is outside the valid range ['+t+", "+a+"]!");return s?n>>>0:0|n},argPackAdvance:8,readValueFromPointer:Je(r,o,0!==t),destructorFunction:null})},h:function(e,r,n){var t=[Int8Array,Uint8Array,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array][r];function a(e){e>>=2;var r=u(),n=r[e],a=r[e+1];return new t(x,a,n)}Me(e,{name:n=Re(n),fromWireType:a,argPackAdvance:8,readValueFromPointer:a},{ignoreDuplicateRegistrations:!0})},z:function(e,r){var n="std::string"===(r=Re(r));Me(e,{name:r,fromWireType:function(e){var r,a=u()[e>>2];if(n)for(var o=e+4,i=0;i<=a;++i){var s=e+4+i;if(i==a||0==t()[s]){var c=O(o,s-o);void 0===r?r=c:(r+=String.fromCharCode(0),r+=c),o=s+1}}else{var f=new Array(a);for(i=0;i<a;++i)f[i]=String.fromCharCode(t()[e+4+i]);r=f.join("")}return Tr(e),r},toWireType:function(e,r){r instanceof ArrayBuffer&&(r=new Uint8Array(r));var a="string"==typeof r;a||r instanceof Uint8Array||r instanceof Uint8ClampedArray||r instanceof Int8Array||Le("Cannot pass non-string to std::string");var o=(n&&a?function(){return B(r)}:function(){return r.length})(),i=br(4+o+1);if(u()[i>>2]=o,n&&a)D(r,i+4,o+1);else if(a)for(var s=0;s<o;++s){var c=r.charCodeAt(s);c>255&&(Tr(i),Le("String has UTF-16 code units that do not fit in 8 bits")),t()[i+4+s]=c}else for(s=0;s<o;++s)t()[i+4+s]=r[s];return null!==e&&e.push(Tr,i),i},argPackAdvance:8,readValueFromPointer:Te,destructorFunction:function(e){Tr(e)}})},q:function(e,r,n){var t,a,i,s,c;n=Re(n),2===r?(t=U,a=G,s=N,i=function(){return o()},c=1):4===r&&(t=q,a=V,s=z,i=function(){return u()},c=2),Me(e,{name:n,fromWireType:function(e){for(var n,a=u()[e>>2],o=i(),s=e+4,f=0;f<=a;++f){var l=e+4+f*r;if(f==a||0==o[l>>c]){var d=t(s,l-s);void 0===n?n=d:(n+=String.fromCharCode(0),n+=d),s=l+r}}return Tr(e),n},toWireType:function(e,t){"string"!=typeof t&&Le("Cannot pass non-string to C++ string type "+n);var o=s(t),i=br(4+o+r);return u()[i>>2]=o>>c,a(t,i+4,o+r),null!==e&&e.push(Tr,i),i},argPackAdvance:8,readValueFromPointer:Te,destructorFunction:function(e){Tr(e)}})},M:function(e,r,n,t,a,o){we[e]={name:Re(r),rawConstructor:Ve(n,t),rawDestructor:Ve(a,o),fields:[]}},i:function(e,r,n,t,a,o,i,u,s,c){we[e].fields.push({fieldName:Re(r),getterReturnType:n,getter:Ve(t,a),getterContext:o,setterArgumentType:i,setter:Ve(u,s),setterContext:c})},da:function(e,r){Me(e,{isVoid:!0,name:r=Re(r),argPackAdvance:0,fromWireType:function(){},toWireType:function(e,r){}})},$:function(e,r){if(e==r)postMessage({cmd:"processQueuedMainThreadWork"});else if(m)postMessage({targetThread:e,cmd:"processThreadQueue"});else{var n=pe.pthreads[e],t=n&&n.worker;if(!t)return;t.postMessage({cmd:"processThreadQueue"})}return 1},o:Be,aa:function(e){return 0===e?Ue(Ke()):(e=void 0===(n=Xe[r=e])?Re(r):n,Ue(Ke()[e]));var r,n},C:function(e){e>4&&(De[e].refcount+=1)},S:function(r,n,t,a){r=function(e){return e||Le("Cannot use deleted val. handle = "+e),De[e].value}(r);var o=Ze[n];return o||(o=function(r){for(var n="",t=0;t<r;++t)n+=(0!==t?", ":"")+"arg"+t;var a="return function emval_allocator_"+r+"(constructor, argTypes, args) {\n";for(t=0;t<r;++t)a+="var argType"+t+" = requireRegisteredType(Module['HEAP32'][(argTypes >>> 2) + "+t+'], "parameter '+t+'");\nvar arg'+t+" = argType"+t+".readValueFromPointer(args);\nargs += argType"+t+"['argPackAdvance'];\n";return a+="var obj = new constructor("+n+");\nreturn __emval_register(obj);\n}\n",new Function("requireRegisteredType","Module","__emval_register",a)(Ye,e,Ue)}(n),Ze[n]=o),o(r,t,a)},g:function(){ae()},x:function(e,r,n){var a=function(e,r){var n;for($e.length=0,r>>=2;n=t()[e++];){var a=n<105;a&&1&r&&r++,$e.push(a?s()[r++>>1]:i()[r]),++r}return $e}(r,n);return se[e].apply(null,a)},X:function(){},w:function(e,r){},l:er,m:fe,p:de,d:function(e,r){return function(e,r){throw Dr(e,r||1),"longjmp"}(e,r)},O:function(e,r,n){t().copyWithin(e,r,r+n)},ga:function(){return navigator.hardwareConcurrency},Y:function(e,r,n){nr.length=r;for(var t=n>>3,a=0;a<r;a++)nr[a]=s()[t+a];return(e<0?se[-e-1]:_r[e]).apply(null,nr)},P:function(e){var r=t().length;if((e>>>=0)<=r)return!1;var n,a=2147483648;if(e>a)return!1;for(var o=1;o<=4;o*=2){var i=r*(1+.2/o);if(i=Math.min(i,e+100663296),tr(Math.min(a,((n=Math.max(e,i))%65536>0&&(n+=65536-n%65536),n))))return!0}return!1},Z:function(e,r,n){return ir(e)?ur(e,r,n):sr(e,r,n)},v:function(e){},_:function(e,r){return n=e,t=r>>2,a=i()[t+6],o={alpha:!!i()[t+0],depth:!!i()[t+1],stencil:!!i()[t+2],antialias:!!i()[t+3],premultipliedAlpha:!!i()[t+4],preserveDrawingBuffer:!!i()[t+5],powerPreference:lr[a],failIfMajorPerformanceCaveat:!!i()[t+7],majorVersion:i()[t+8],minorVersion:i()[t+9],enableExtensionsByDefault:i()[t+10],explicitSwapControl:i()[t+11],proxyContextToMainThread:i()[t+12],renderViaOffscreenBackBuffer:i()[t+13]},(u=ir(n))?o.explicitSwapControl?0:fr.createContext(u,o):0;var n,t,a,o,u},u:dr,R:pr,H:hr,Q:vr,c:function(){return T},N:function(){pe.initRuntime()},K:function(e,r){var n=Hr();try{return J.get(e)(r)}catch(e){if(Lr(n),e!==e+0&&"longjmp"!==e)throw e;Dr(1,0)}},r:function(e,r,n){var t=Hr();try{return J.get(e)(r,n)}catch(e){if(Lr(t),e!==e+0&&"longjmp"!==e)throw e;Dr(1,0)}},L:function(e,r,n,t,a,o,i,u,s,c){var f=Hr();try{return J.get(e)(r,n,t,a,o,i,u,s,c)}catch(e){if(Lr(f),e!==e+0&&"longjmp"!==e)throw e;Dr(1,0)}},J:function(e,r,n,t,a,o,i,u,s,c,f,l){var d=Hr();try{return J.get(e)(r,n,t,a,o,i,u,s,c,f,l)}catch(e){if(Lr(d),e!==e+0&&"longjmp"!==e)throw e;Dr(1,0)}},G:function(e,r,n,t,a,o,i,u){var s=Hr();try{return Ur(e,r,n,t,a,o,i,u)}catch(e){if(Lr(s),e!==e+0&&"longjmp"!==e)throw e;Dr(1,0)}},F:function(e,r,n,t,a,o){var i=Hr();try{return Gr(e,r,n,t,a,o)}catch(e){if(Lr(i),e!==e+0&&"longjmp"!==e)throw e;Dr(1,0)}},n:function(e,r){var n=Hr();try{J.get(e)(r)}catch(e){if(Lr(n),e!==e+0&&"longjmp"!==e)throw e;Dr(1,0)}},f:function(e,r,n){var t=Hr();try{J.get(e)(r,n)}catch(e){if(Lr(t),e!==e+0&&"longjmp"!==e)throw e;Dr(1,0)}},s:function(e,r,n,t){var a=Hr();try{J.get(e)(r,n,t)}catch(e){if(Lr(a),e!==e+0&&"longjmp"!==e)throw e;Dr(1,0)}},e:function(e,r,n,t,a){var o=Hr();try{J.get(e)(r,n,t,a)}catch(e){if(Lr(o),e!==e+0&&"longjmp"!==e)throw e;Dr(1,0)}},a:k||e.wasmMemory,V:function(e){var r=pe.threadExitHandlers.pop();e&&r()},W:ve,A:function(e,r,n,t){if("undefined"==typeof SharedArrayBuffer)return w("Current environment does not support SharedArrayBuffer, pthreads are not available!"),6;if(!e)return w("pthread_create called with a null thread pointer!"),28;var a=[];if(m&&0===a.length)return Er(687865856,e,r,n,t);var o=0,s=0,c=0;r&&-1!=r?(o=i()[r>>2],o+=81920,s=i()[r+8>>2],c=0!==i()[r+12>>2]):o=2097152;var f=0==s;f?s=Br(16,o):L((s-=o)>0);for(var l=br(228),d=0;d<57;++d)u()[(l>>2)+d]=0;i()[e>>2]=l,i()[l+12>>2]=l;var p=l+152;i()[p>>2]=p;var h={stackBase:s,stackSize:o,allocatedOwnStack:f,detached:c,startRoutine:n,pthread_ptr:l,arg:t,transferList:a};return m?(h.cmd="spawnThread",postMessage(h,a),0):mr(h)},ea:function(e,r){return function(e,r,n){if(!e)return w("pthread_join attempted on a null thread pointer!"),71;if(m&&Fr()==e)return w("PThread "+e+" is attempting to join to itself!"),16;if(!m&&Cr()==e)return w("Main thread "+e+" is attempting to join to itself!"),16;if(i()[e+12>>2]!==e)return w("pthread_join attempted on thread "+e+", which does not point to a valid thread, or does not exist anymore!"),71;if(Atomics.load(u(),e+64>>2))return w("Attempted to join thread "+e+", which was already detached!"),28;for(;;){var t=Atomics.load(u(),e+0>>2);if(1==t){var a=Atomics.load(u(),e+4>>2);return r&&(i()[r>>2]=a),Atomics.store(u(),e+64>>2,1),m?postMessage({cmd:"cleanupThread",thread:e}):le(e),0}0,gr(),m||Wr(),er(e+0,t,m?100:1)}}(e,r)},b:function(e){T=e},fa:function(e){var r=Date.now()/1e3|0;return e&&(i()[e>>2]=r),r}},br=(function(){var r={a:wr};function n(r,n){var t,a=r.exports;if(e.asm=a,J=e.asm.la,t=e.asm.ha,Y.unshift(t),pe.tlsInitFunctions.push(e.asm.ka),A=n,!m){var o=pe.unusedWorkers.length;pe.unusedWorkers.forEach((function(r){pe.loadWasmModuleToWorker(r,(function(){--o||function(r){if(re--,e.monitorRunDependencies&&e.monitorRunDependencies(re),0==re&&(null!==ne&&(clearInterval(ne),ne=null),te)){var n=te;te=null,n()}}()}))}))}}function t(e){n(e.instance,e.module)}function a(e){return(b||"function"!=typeof fetch?Promise.resolve().then((function(){return ue(ie)})):fetch(ie,{credentials:"same-origin"}).then((function(e){if(!e.ok)throw"failed to load wasm binary file at '"+ie+"'";return e.arrayBuffer()})).catch((function(){return ue(ie)}))).then((function(e){return WebAssembly.instantiate(e,r)})).then(e,(function(e){w("failed to asynchronously prepare wasm: "+e),ae(e)}))}if(m||(L(!m,"addRunDependency cannot be used in a pthread worker"),re++,e.monitorRunDependencies&&e.monitorRunDependencies(re)),e.instantiateWasm)try{return e.instantiateWasm(r,n)}catch(e){return w("Module.instantiateWasm callback failed with error: "+e),!1}(b||"function"!=typeof WebAssembly.instantiateStreaming||oe(ie)||"function"!=typeof fetch?a(t):fetch(ie,{credentials:"same-origin"}).then((function(e){return WebAssembly.instantiateStreaming(e,r).then(t,(function(e){return w("wasm streaming compile failed: "+e),w("falling back to ArrayBuffer instantiation"),a(t)}))}))).catch(f)}(),e.___wasm_call_ctors=function(){return(e.___wasm_call_ctors=e.asm.ha).apply(null,arguments)},e._malloc=function(){return(br=e._malloc=e.asm.ia).apply(null,arguments)}),Tr=e._free=function(){return(Tr=e._free=e.asm.ja).apply(null,arguments)},kr=(e._emscripten_tls_init=function(){return(e._emscripten_tls_init=e.asm.ka).apply(null,arguments)},e.___getTypeName=function(){return(kr=e.___getTypeName=e.asm.ma).apply(null,arguments)}),Ar=(e.___embind_register_native_and_builtin_types=function(){return(e.___embind_register_native_and_builtin_types=e.asm.na).apply(null,arguments)},e._emscripten_current_thread_process_queued_calls=function(){return(e._emscripten_current_thread_process_queued_calls=e.asm.oa).apply(null,arguments)},e._emscripten_register_main_browser_thread_id=function(){return(Ar=e._emscripten_register_main_browser_thread_id=e.asm.pa).apply(null,arguments)}),Cr=e._emscripten_main_browser_thread_id=function(){return(Cr=e._emscripten_main_browser_thread_id=e.asm.qa).apply(null,arguments)},xr=e.__emscripten_do_dispatch_to_thread=function(){return(xr=e.__emscripten_do_dispatch_to_thread=e.asm.ra).apply(null,arguments)},Er=e._emscripten_sync_run_in_main_thread_4=function(){return(Er=e._emscripten_sync_run_in_main_thread_4=e.asm.sa).apply(null,arguments)},Wr=e._emscripten_main_thread_process_queued_calls=function(){return(Wr=e._emscripten_main_thread_process_queued_calls=e.asm.ta).apply(null,arguments)},Sr=e._emscripten_run_in_main_runtime_thread_js=function(){return(Sr=e._emscripten_run_in_main_runtime_thread_js=e.asm.ua).apply(null,arguments)},Pr=e.__emscripten_call_on_thread=function(){return(Pr=e.__emscripten_call_on_thread=e.asm.va).apply(null,arguments)},jr=e.__emscripten_thread_init=function(){return(jr=e.__emscripten_thread_init=e.asm.wa).apply(null,arguments)},Ir=e._emscripten_get_global_libc=function(){return(Ir=e._emscripten_get_global_libc=e.asm.xa).apply(null,arguments)},Fr=e._pthread_self=function(){return(Fr=e._pthread_self=e.asm.ya).apply(null,arguments)},Rr=e.___pthread_tsd_run_dtors=function(){return(Rr=e.___pthread_tsd_run_dtors=e.asm.za).apply(null,arguments)},Hr=e.stackSave=function(){return(Hr=e.stackSave=e.asm.Aa).apply(null,arguments)},Lr=e.stackRestore=function(){return(Lr=e.stackRestore=e.asm.Ba).apply(null,arguments)},Mr=e.stackAlloc=function(){return(Mr=e.stackAlloc=e.asm.Ca).apply(null,arguments)},Or=e._emscripten_stack_set_limits=function(){return(Or=e._emscripten_stack_set_limits=e.asm.Da).apply(null,arguments)},Dr=e._setThrew=function(){return(Dr=e._setThrew=e.asm.Ea).apply(null,arguments)},Br=e._memalign=function(){return(Br=e._memalign=e.asm.Fa).apply(null,arguments)},Ur=(e.dynCall_jiiiiiiiii=function(){return(e.dynCall_jiiiiiiiii=e.asm.Ga).apply(null,arguments)},e.dynCall_iiiijj=function(){return(Ur=e.dynCall_iiiijj=e.asm.Ha).apply(null,arguments)}),Gr=e.dynCall_ijiii=function(){return(Gr=e.dynCall_ijiii=e.asm.Ia).apply(null,arguments)},Nr=(e.dynCall_jiji=function(){return(e.dynCall_jiji=e.asm.Ja).apply(null,arguments)},e.dynCall_jiiiiiiii=function(){return(e.dynCall_jiiiiiiii=e.asm.Ka).apply(null,arguments)},e.dynCall_jiiiiii=function(){return(e.dynCall_jiiiiii=e.asm.La).apply(null,arguments)},e.dynCall_jiiiii=function(){return(e.dynCall_jiiiii=e.asm.Ma).apply(null,arguments)},e.dynCall_iiijii=function(){return(e.dynCall_iiijii=e.asm.Na).apply(null,arguments)},e.__emscripten_allow_main_runtime_queued_calls=600232),qr=e.__emscripten_main_thread_futex=896716;function Vr(e){this.name="ExitStatus",this.message="Program terminated with exit("+e+")",this.status=e}function zr(r){if(r=r||h,!(re>0)){if(m)return c(e),ee(),void postMessage({cmd:"loaded"});!function(){if(!m){if(e.preRun)for("function"==typeof e.preRun&&(e.preRun=[e.preRun]);e.preRun.length;)r=e.preRun.shift(),K.unshift(r);var r;ce(K)}}(),re>0||(e.setStatus?(e.setStatus("Running..."),setTimeout((function(){setTimeout((function(){e.setStatus("")}),1),n()}),1)):n())}function n(){yr||(yr=!0,e.calledRun=!0,H||(ee(),c(e),e.onRuntimeInitialized&&e.onRuntimeInitialized(),function(){if(!m){if(e.postRun)for("function"==typeof e.postRun&&(e.postRun=[e.postRun]);e.postRun.length;)r=e.postRun.shift(),$.unshift(r);var r;ce($)}}()))}}if(e.PThread=pe,e.PThread=pe,e.wasmMemory=k,e.ExitStatus=Vr,te=function e(){yr||zr(),yr||(te=e)},e.run=zr,e.preInit)for("function"==typeof e.preInit&&(e.preInit=[e.preInit]);e.preInit.length>0;)e.preInit.pop()();return m&&(C=!1,pe.initWorker()),zr(),e.ready})},211:(e,r,n)=>{e.exports=n.p+"2856fa769b90a4c3db6f.wasm"}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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aUJBLElBQVUsRUFBSzFoQixFQUFNLFdBQWMsRUFBUWtFLElBQWE0RCxLQUFjNUcsRUFBb0JsQixHQUFXQSxFQUFNLHNCQUF5QkEsRUFBTSx1QkFBai9yRSxXQUFtQixJQUFHK0IsRUFBSCxDQUFpQyxHQUFHL0IsRUFBTSxRQUEyRixJQUFqRCxtQkFBbkJBLEVBQU0sVUFBd0JBLEVBQU0sUUFBWSxDQUFDQSxFQUFNLFVBQW1CQSxFQUFNLFFBQVkwRixRQUEyTXVPLEVBQXRMalUsRUFBTSxRQUFZdUosUUFBd0sxQixFQUFjaWtCLFFBQVE3WCxHQUFoRCxJQUFzQkEsRUFBMUpsTSxHQUFxQkYsSUFBc3hyRXVsQixNQUF1a0IsR0FBcjFDcHRCLEVBQU0sUUFBWXVLLEdBQVF2SyxFQUFNLFFBQVl1SyxHQUFRdkssRUFBTSxXQUFlRSxFQUFXRixFQUFNLFdBQWVxTyxHQUF1Sm5HLEdBQXNCLFNBQVNtbEIsSUFBZ0IzTCxJQUFVdUwsS0FBVXZMLEtBQVV4WixHQUFzQm1sQixJQUFpbEJydEIsRUFBTSxJQUFRaXRCLEdBQXNaanRCLEVBQU0sUUFBMkYsSUFBakQsbUJBQW5CQSxFQUFNLFVBQXdCQSxFQUFNLFFBQVksQ0FBQ0EsRUFBTSxVQUFtQkEsRUFBTSxRQUFZMEYsT0FBTyxHQUFHMUYsRUFBTSxRQUFZNkwsS0FBbEI3TCxHQUdseS9FLE9BSGcwL0UrQixJQUF3QitCLEdBQWMsRUFBTXlHLEdBQVFtQixjQUFhdWhCLEtBRzEzL0VqdEIsRUFBT3N0QixTIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc3F1b29zaC1icm93c2VyLWRlbW8vLi4vY29kZWNzL2F2aWYvZW5jL2F2aWZfZW5jX210LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlxudmFyIE1vZHVsZSA9IChmdW5jdGlvbigpIHtcbiAgdmFyIF9zY3JpcHREaXIgPSBpbXBvcnQubWV0YS51cmw7XG4gIFxuICByZXR1cm4gKFxuZnVuY3Rpb24oTW9kdWxlKSB7XG4gIE1vZHVsZSA9IE1vZHVsZSB8fCB7fTtcblxuZnVuY3Rpb24gR1JPV0FCTEVfSEVBUF9JOCgpe2lmKHdhc21NZW1vcnkuYnVmZmVyIT1idWZmZXIpe3VwZGF0ZUdsb2JhbEJ1ZmZlckFuZFZpZXdzKHdhc21NZW1vcnkuYnVmZmVyKX1yZXR1cm4gSEVBUDh9ZnVuY3Rpb24gR1JPV0FCTEVfSEVBUF9VOCgpe2lmKHdhc21NZW1vcnkuYnVmZmVyIT1idWZmZXIpe3VwZGF0ZUdsb2JhbEJ1ZmZlckFuZFZpZXdzKHdhc21NZW1vcnkuYnVmZmVyKX1yZXR1cm4gSEVBUFU4fWZ1bmN0aW9uIEdST1dBQkxFX0hFQVBfSTE2KCl7aWYod2FzbU1lbW9yeS5idWZmZXIhPWJ1ZmZlcil7dXBkYXRlR2xvYmFsQnVmZmVyQW5kVmlld3Mod2FzbU1lbW9yeS5idWZmZXIpfXJldHVybiBIRUFQMTZ9ZnVuY3Rpb24gR1JPV0FCTEVfSEVBUF9VMTYoKXtpZih3YXNtTWVtb3J5LmJ1ZmZlciE9YnVmZmVyKXt1cGRhdGVHbG9iYWxCdWZmZXJBbmRWaWV3cyh3YXNtTWVtb3J5LmJ1ZmZlcil9cmV0dXJuIEhFQVBVMTZ9ZnVuY3Rpb24gR1JPV0FCTEVfSEVBUF9JMzIoKXtpZih3YXNtTWVtb3J5LmJ1ZmZlciE9YnVmZmVyKXt1cGRhdGVHbG9iYWxCdWZmZXJBbmRWaWV3cyh3YXNtTWVtb3J5LmJ1ZmZlcil9cmV0dXJuIEhFQVAzMn1mdW5jdGlvbiBHUk9XQUJMRV9IRUFQX1UzMigpe2lmKHdhc21NZW1vcnkuYnVmZmVyIT1idWZmZXIpe3VwZGF0ZUdsb2JhbEJ1ZmZlckFuZFZpZXdzKHdhc21NZW1vcnkuYnVmZmVyKX1yZXR1cm4gSEVBUFUzMn1mdW5jdGlvbiBHUk9XQUJMRV9IRUFQX0YzMigpe2lmKHdhc21NZW1vcnkuYnVmZmVyIT1idWZmZXIpe3VwZGF0ZUdsb2JhbEJ1ZmZlckFuZFZpZXdzKHdhc21NZW1vcnkuYnVmZmVyKX1yZXR1cm4gSEVBUEYzMn1mdW5jdGlvbiBHUk9XQUJMRV9IRUFQX0Y2NCgpe2lmKHdhc21NZW1vcnkuYnVmZmVyIT1idWZmZXIpe3VwZGF0ZUdsb2JhbEJ1ZmZlckFuZFZpZXdzKHdhc21NZW1vcnkuYnVmZmVyKX1yZXR1cm4gSEVBUEY2NH12YXIgTW9kdWxlPXR5cGVvZiBNb2R1bGUhPT1cInVuZGVmaW5lZFwiP01vZHVsZTp7fTt2YXIgcmVhZHlQcm9taXNlUmVzb2x2ZSxyZWFkeVByb21pc2VSZWplY3Q7TW9kdWxlW1wicmVhZHlcIl09bmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSxyZWplY3Qpe3JlYWR5UHJvbWlzZVJlc29sdmU9cmVzb2x2ZTtyZWFkeVByb21pc2VSZWplY3Q9cmVqZWN0fSk7dmFyIG1vZHVsZU92ZXJyaWRlcz17fTt2YXIga2V5O2ZvcihrZXkgaW4gTW9kdWxlKXtpZihNb2R1bGUuaGFzT3duUHJvcGVydHkoa2V5KSl7bW9kdWxlT3ZlcnJpZGVzW2tleV09TW9kdWxlW2tleV19fXZhciBhcmd1bWVudHNfPVtdO3ZhciB0aGlzUHJvZ3JhbT1cIi4vdGhpcy5wcm9ncmFtXCI7dmFyIHF1aXRfPWZ1bmN0aW9uKHN0YXR1cyx0b1Rocm93KXt0aHJvdyB0b1Rocm93fTt2YXIgRU5WSVJPTk1FTlRfSVNfV0VCPWZhbHNlO3ZhciBFTlZJUk9OTUVOVF9JU19XT1JLRVI9dHJ1ZTt2YXIgRU5WSVJPTk1FTlRfSVNfTk9ERT1mYWxzZTt2YXIgRU5WSVJPTk1FTlRfSVNfUFRIUkVBRD1Nb2R1bGVbXCJFTlZJUk9OTUVOVF9JU19QVEhSRUFEXCJdfHxmYWxzZTt2YXIgc2NyaXB0RGlyZWN0b3J5PVwiXCI7ZnVuY3Rpb24gbG9jYXRlRmlsZShwYXRoKXtpZihNb2R1bGVbXCJsb2NhdGVGaWxlXCJdKXtyZXR1cm4gTW9kdWxlW1wibG9jYXRlRmlsZVwiXShwYXRoLHNjcmlwdERpcmVjdG9yeSl9cmV0dXJuIHNjcmlwdERpcmVjdG9yeStwYXRofXZhciByZWFkXyxyZWFkQXN5bmMscmVhZEJpbmFyeSxzZXRXaW5kb3dUaXRsZTtpZihFTlZJUk9OTUVOVF9JU19XRUJ8fEVOVklST05NRU5UX0lTX1dPUktFUil7aWYoRU5WSVJPTk1FTlRfSVNfV09SS0VSKXtzY3JpcHREaXJlY3Rvcnk9c2VsZi5sb2NhdGlvbi5ocmVmfWVsc2UgaWYodHlwZW9mIGRvY3VtZW50IT09XCJ1bmRlZmluZWRcIiYmZG9jdW1lbnQuY3VycmVudFNjcmlwdCl7c2NyaXB0RGlyZWN0b3J5PWRvY3VtZW50LmN1cnJlbnRTY3JpcHQuc3JjfWlmKF9zY3JpcHREaXIpe3NjcmlwdERpcmVjdG9yeT1fc2NyaXB0RGlyfWlmKHNjcmlwdERpcmVjdG9yeS5pbmRleE9mKFwiYmxvYjpcIikhPT0wKXtzY3JpcHREaXJlY3Rvcnk9c2NyaXB0RGlyZWN0b3J5LnN1YnN0cigwLHNjcmlwdERpcmVjdG9yeS5sYXN0SW5kZXhPZihcIi9cIikrMSl9ZWxzZXtzY3JpcHREaXJlY3Rvcnk9XCJcIn17cmVhZF89ZnVuY3Rpb24odXJsKXt2YXIgeGhyPW5ldyBYTUxIdHRwUmVxdWVzdDt4aHIub3BlbihcIkdFVFwiLHVybCxmYWxzZSk7eGhyLnNlbmQobnVsbCk7cmV0dXJuIHhoci5yZXNwb25zZVRleHR9O2lmKEVOVklST05NRU5UX0lTX1dPUktFUil7cmVhZEJpbmFyeT1mdW5jdGlvbih1cmwpe3ZhciB4aHI9bmV3IFhNTEh0dHBSZXF1ZXN0O3hoci5vcGVuKFwiR0VUXCIsdXJsLGZhbHNlKTt4aHIucmVzcG9uc2VUeXBlPVwiYXJyYXlidWZmZXJcIjt4aHIuc2VuZChudWxsKTtyZXR1cm4gbmV3IFVpbnQ4QXJyYXkoeGhyLnJlc3BvbnNlKX19cmVhZEFzeW5jPWZ1bmN0aW9uKHVybCxvbmxvYWQsb25lcnJvcil7dmFyIHhocj1uZXcgWE1MSHR0cFJlcXVlc3Q7eGhyLm9wZW4oXCJHRVRcIix1cmwsdHJ1ZSk7eGhyLnJlc3BvbnNlVHlwZT1cImFycmF5YnVmZmVyXCI7eGhyLm9ubG9hZD1mdW5jdGlvbigpe2lmKHhoci5zdGF0dXM9PTIwMHx8eGhyLnN0YXR1cz09MCYmeGhyLnJlc3BvbnNlKXtvbmxvYWQoeGhyLnJlc3BvbnNlKTtyZXR1cm59b25lcnJvcigpfTt4aHIub25lcnJvcj1vbmVycm9yO3hoci5zZW5kKG51bGwpfX1zZXRXaW5kb3dUaXRsZT1mdW5jdGlvbih0aXRsZSl7ZG9jdW1lbnQudGl0bGU9dGl0bGV9fWVsc2V7fXZhciBvdXQ9TW9kdWxlW1wicHJpbnRcIl18fGNvbnNvbGUubG9nLmJpbmQoY29uc29sZSk7dmFyIGVycj1Nb2R1bGVbXCJwcmludEVyclwiXXx8Y29uc29sZS53YXJuLmJpbmQoY29uc29sZSk7Zm9yKGtleSBpbiBtb2R1bGVPdmVycmlkZXMpe2lmKG1vZHVsZU92ZXJyaWRlcy5oYXNPd25Qcm9wZXJ0eShrZXkpKXtNb2R1bGVba2V5XT1tb2R1bGVPdmVycmlkZXNba2V5XX19bW9kdWxlT3ZlcnJpZGVzPW51bGw7aWYoTW9kdWxlW1wiYXJndW1lbnRzXCJdKWFyZ3VtZW50c189TW9kdWxlW1wiYXJndW1lbnRzXCJdO2lmKE1vZHVsZVtcInRoaXNQcm9ncmFtXCJdKXRoaXNQcm9ncmFtPU1vZHVsZVtcInRoaXNQcm9ncmFtXCJdO2lmKE1vZHVsZVtcInF1aXRcIl0pcXVpdF89TW9kdWxlW1wicXVpdFwiXTtmdW5jdGlvbiB3YXJuT25jZSh0ZXh0KXtpZighd2Fybk9uY2Uuc2hvd24pd2Fybk9uY2Uuc2hvd249e307aWYoIXdhcm5PbmNlLnNob3duW3RleHRdKXt3YXJuT25jZS5zaG93blt0ZXh0XT0xO2Vycih0ZXh0KX19dmFyIHRlbXBSZXQwPTA7dmFyIHNldFRlbXBSZXQwPWZ1bmN0aW9uKHZhbHVlKXt0ZW1wUmV0MD12YWx1ZX07dmFyIGdldFRlbXBSZXQwPWZ1bmN0aW9uKCl7cmV0dXJuIHRlbXBSZXQwfTt2YXIgQXRvbWljc19sb2FkPUF0b21pY3MubG9hZDt2YXIgQXRvbWljc19zdG9yZT1BdG9taWNzLnN0b3JlO3ZhciBBdG9taWNzX2NvbXBhcmVFeGNoYW5nZT1BdG9taWNzLmNvbXBhcmVFeGNoYW5nZTt2YXIgd2FzbUJpbmFyeTtpZihNb2R1bGVbXCJ3YXNtQmluYXJ5XCJdKXdhc21CaW5hcnk9TW9kdWxlW1wid2FzbUJpbmFyeVwiXTt2YXIgbm9FeGl0UnVudGltZT1Nb2R1bGVbXCJub0V4aXRSdW50aW1lXCJdfHx0cnVlO2lmKHR5cGVvZiBXZWJBc3NlbWJseSE9PVwib2JqZWN0XCIpe2Fib3J0KFwibm8gbmF0aXZlIHdhc20gc3VwcG9ydCBkZXRlY3RlZFwiKX12YXIgd2FzbU1lbW9yeTt2YXIgd2FzbU1vZHVsZTt2YXIgQUJPUlQ9ZmFsc2U7dmFyIEVYSVRTVEFUVVM7ZnVuY3Rpb24gYXNzZXJ0KGNvbmRpdGlvbix0ZXh0KXtpZighY29uZGl0aW9uKXthYm9ydChcIkFzc2VydGlvbiBmYWlsZWQ6IFwiK3RleHQpfX1mdW5jdGlvbiBVVEY4QXJyYXlUb1N0cmluZyhoZWFwLGlkeCxtYXhCeXRlc1RvUmVhZCl7dmFyIGVuZElkeD1pZHgrbWF4Qnl0ZXNUb1JlYWQ7dmFyIHN0cj1cIlwiO3doaWxlKCEoaWR4Pj1lbmRJZHgpKXt2YXIgdTA9aGVhcFtpZHgrK107aWYoIXUwKXJldHVybiBzdHI7aWYoISh1MCYxMjgpKXtzdHIrPVN0cmluZy5mcm9tQ2hhckNvZGUodTApO2NvbnRpbnVlfXZhciB1MT1oZWFwW2lkeCsrXSY2MztpZigodTAmMjI0KT09MTkyKXtzdHIrPVN0cmluZy5mcm9tQ2hhckNvZGUoKHUwJjMxKTw8Nnx1MSk7Y29udGludWV9dmFyIHUyPWhlYXBbaWR4KytdJjYzO2lmKCh1MCYyNDApPT0yMjQpe3UwPSh1MCYxNSk8PDEyfHUxPDw2fHUyfWVsc2V7dTA9KHUwJjcpPDwxOHx1MTw8MTJ8dTI8PDZ8aGVhcFtpZHgrK10mNjN9aWYodTA8NjU1MzYpe3N0cis9U3RyaW5nLmZyb21DaGFyQ29kZSh1MCl9ZWxzZXt2YXIgY2g9dTAtNjU1MzY7c3RyKz1TdHJpbmcuZnJvbUNoYXJDb2RlKDU1Mjk2fGNoPj4xMCw1NjMyMHxjaCYxMDIzKX19cmV0dXJuIHN0cn1mdW5jdGlvbiBVVEY4VG9TdHJpbmcocHRyLG1heEJ5dGVzVG9SZWFkKXtyZXR1cm4gcHRyP1VURjhBcnJheVRvU3RyaW5nKEdST1dBQkxFX0hFQVBfVTgoKSxwdHIsbWF4Qnl0ZXNUb1JlYWQpOlwiXCJ9ZnVuY3Rpb24gc3RyaW5nVG9VVEY4QXJyYXkoc3RyLGhlYXAsb3V0SWR4LG1heEJ5dGVzVG9Xcml0ZSl7aWYoIShtYXhCeXRlc1RvV3JpdGU+MCkpcmV0dXJuIDA7dmFyIHN0YXJ0SWR4PW91dElkeDt2YXIgZW5kSWR4PW91dElkeCttYXhCeXRlc1RvV3JpdGUtMTtmb3IodmFyIGk9MDtpPHN0ci5sZW5ndGg7KytpKXt2YXIgdT1zdHIuY2hhckNvZGVBdChpKTtpZih1Pj01NTI5NiYmdTw9NTczNDMpe3ZhciB1MT1zdHIuY2hhckNvZGVBdCgrK2kpO3U9NjU1MzYrKCh1JjEwMjMpPDwxMCl8dTEmMTAyM31pZih1PD0xMjcpe2lmKG91dElkeD49ZW5kSWR4KWJyZWFrO2hlYXBbb3V0SWR4KytdPXV9ZWxzZSBpZih1PD0yMDQ3KXtpZihvdXRJZHgrMT49ZW5kSWR4KWJyZWFrO2hlYXBbb3V0SWR4KytdPTE5Mnx1Pj42O2hlYXBbb3V0SWR4KytdPTEyOHx1JjYzfWVsc2UgaWYodTw9NjU1MzUpe2lmKG91dElkeCsyPj1lbmRJZHgpYnJlYWs7aGVhcFtvdXRJZHgrK109MjI0fHU+PjEyO2hlYXBbb3V0SWR4KytdPTEyOHx1Pj42JjYzO2hlYXBbb3V0SWR4KytdPTEyOHx1JjYzfWVsc2V7aWYob3V0SWR4KzM+PWVuZElkeClicmVhaztoZWFwW291dElkeCsrXT0yNDB8dT4+MTg7aGVhcFtvdXRJZHgrK109MTI4fHU+PjEyJjYzO2hlYXBbb3V0SWR4KytdPTEyOHx1Pj42JjYzO2hlYXBbb3V0SWR4KytdPTEyOHx1JjYzfX1oZWFwW291dElkeF09MDtyZXR1cm4gb3V0SWR4LXN0YXJ0SWR4fWZ1bmN0aW9uIHN0cmluZ1RvVVRGOChzdHIsb3V0UHRyLG1heEJ5dGVzVG9Xcml0ZSl7cmV0dXJuIHN0cmluZ1RvVVRGOEFycmF5KHN0cixHUk9XQUJMRV9IRUFQX1U4KCksb3V0UHRyLG1heEJ5dGVzVG9Xcml0ZSl9ZnVuY3Rpb24gbGVuZ3RoQnl0ZXNVVEY4KHN0cil7dmFyIGxlbj0wO2Zvcih2YXIgaT0wO2k8c3RyLmxlbmd0aDsrK2kpe3ZhciB1PXN0ci5jaGFyQ29kZUF0KGkpO2lmKHU+PTU1Mjk2JiZ1PD01NzM0Myl1PTY1NTM2KygodSYxMDIzKTw8MTApfHN0ci5jaGFyQ29kZUF0KCsraSkmMTAyMztpZih1PD0xMjcpKytsZW47ZWxzZSBpZih1PD0yMDQ3KWxlbis9MjtlbHNlIGlmKHU8PTY1NTM1KWxlbis9MztlbHNlIGxlbis9NH1yZXR1cm4gbGVufWZ1bmN0aW9uIFVURjE2VG9TdHJpbmcocHRyLG1heEJ5dGVzVG9SZWFkKXt2YXIgc3RyPVwiXCI7Zm9yKHZhciBpPTA7IShpPj1tYXhCeXRlc1RvUmVhZC8yKTsrK2kpe3ZhciBjb2RlVW5pdD1HUk9XQUJMRV9IRUFQX0kxNigpW3B0citpKjI+PjFdO2lmKGNvZGVVbml0PT0wKWJyZWFrO3N0cis9U3RyaW5nLmZyb21DaGFyQ29kZShjb2RlVW5pdCl9cmV0dXJuIHN0cn1mdW5jdGlvbiBzdHJpbmdUb1VURjE2KHN0cixvdXRQdHIsbWF4Qnl0ZXNUb1dyaXRlKXtpZihtYXhCeXRlc1RvV3JpdGU9PT11bmRlZmluZWQpe21heEJ5dGVzVG9Xcml0ZT0yMTQ3NDgzNjQ3fWlmKG1heEJ5dGVzVG9Xcml0ZTwyKXJldHVybiAwO21heEJ5dGVzVG9Xcml0ZS09Mjt2YXIgc3RhcnRQdHI9b3V0UHRyO3ZhciBudW1DaGFyc1RvV3JpdGU9bWF4Qnl0ZXNUb1dyaXRlPHN0ci5sZW5ndGgqMj9tYXhCeXRlc1RvV3JpdGUvMjpzdHIubGVuZ3RoO2Zvcih2YXIgaT0wO2k8bnVtQ2hhcnNUb1dyaXRlOysraSl7dmFyIGNvZGVVbml0PXN0ci5jaGFyQ29kZUF0KGkpO0dST1dBQkxFX0hFQVBfSTE2KClbb3V0UHRyPj4xXT1jb2RlVW5pdDtvdXRQdHIrPTJ9R1JPV0FCTEVfSEVBUF9JMTYoKVtvdXRQdHI+PjFdPTA7cmV0dXJuIG91dFB0ci1zdGFydFB0cn1mdW5jdGlvbiBsZW5ndGhCeXRlc1VURjE2KHN0cil7cmV0dXJuIHN0ci5sZW5ndGgqMn1mdW5jdGlvbiBVVEYzMlRvU3RyaW5nKHB0cixtYXhCeXRlc1RvUmVhZCl7dmFyIGk9MDt2YXIgc3RyPVwiXCI7d2hpbGUoIShpPj1tYXhCeXRlc1RvUmVhZC80KSl7dmFyIHV0ZjMyPUdST1dBQkxFX0hFQVBfSTMyKClbcHRyK2kqND4+Ml07aWYodXRmMzI9PTApYnJlYWs7KytpO2lmKHV0ZjMyPj02NTUzNil7dmFyIGNoPXV0ZjMyLTY1NTM2O3N0cis9U3RyaW5nLmZyb21DaGFyQ29kZSg1NTI5NnxjaD4+MTAsNTYzMjB8Y2gmMTAyMyl9ZWxzZXtzdHIrPVN0cmluZy5mcm9tQ2hhckNvZGUodXRmMzIpfX1yZXR1cm4gc3RyfWZ1bmN0aW9uIHN0cmluZ1RvVVRGMzIoc3RyLG91dFB0cixtYXhCeXRlc1RvV3JpdGUpe2lmKG1heEJ5dGVzVG9Xcml0ZT09PXVuZGVmaW5lZCl7bWF4Qnl0ZXNUb1dyaXRlPTIxNDc0ODM2NDd9aWYobWF4Qnl0ZXNUb1dyaXRlPDQpcmV0dXJuIDA7dmFyIHN0YXJ0UHRyPW91dFB0cjt2YXIgZW5kUHRyPXN0YXJ0UHRyK21heEJ5dGVzVG9Xcml0ZS00O2Zvcih2YXIgaT0wO2k8c3RyLmxlbmd0aDsrK2kpe3ZhciBjb2RlVW5pdD1zdHIuY2hhckNvZGVBdChpKTtpZihjb2RlVW5pdD49NTUyOTYmJmNvZGVVbml0PD01NzM0Myl7dmFyIHRyYWlsU3Vycm9nYXRlPXN0ci5jaGFyQ29kZUF0KCsraSk7Y29kZVVuaXQ9NjU1MzYrKChjb2RlVW5pdCYxMDIzKTw8MTApfHRyYWlsU3Vycm9nYXRlJjEwMjN9R1JPV0FCTEVfSEVBUF9JMzIoKVtvdXRQdHI+PjJdPWNvZGVVbml0O291dFB0cis9NDtpZihvdXRQdHIrND5lbmRQdHIpYnJlYWt9R1JPV0FCTEVfSEVBUF9JMzIoKVtvdXRQdHI+PjJdPTA7cmV0dXJuIG91dFB0ci1zdGFydFB0cn1mdW5jdGlvbiBsZW5ndGhCeXRlc1VURjMyKHN0cil7dmFyIGxlbj0wO2Zvcih2YXIgaT0wO2k8c3RyLmxlbmd0aDsrK2kpe3ZhciBjb2RlVW5pdD1zdHIuY2hhckNvZGVBdChpKTtpZihjb2RlVW5pdD49NTUyOTYmJmNvZGVVbml0PD01NzM0MykrK2k7bGVuKz00fXJldHVybiBsZW59ZnVuY3Rpb24gYWxpZ25VcCh4LG11bHRpcGxlKXtpZih4JW11bHRpcGxlPjApe3grPW11bHRpcGxlLXglbXVsdGlwbGV9cmV0dXJuIHh9dmFyIGJ1ZmZlcixIRUFQOCxIRUFQVTgsSEVBUDE2LEhFQVBVMTYsSEVBUDMyLEhFQVBVMzIsSEVBUEYzMixIRUFQRjY0O2lmKEVOVklST05NRU5UX0lTX1BUSFJFQUQpe2J1ZmZlcj1Nb2R1bGVbXCJidWZmZXJcIl19ZnVuY3Rpb24gdXBkYXRlR2xvYmFsQnVmZmVyQW5kVmlld3MoYnVmKXtidWZmZXI9YnVmO01vZHVsZVtcIkhFQVA4XCJdPUhFQVA4PW5ldyBJbnQ4QXJyYXkoYnVmKTtNb2R1bGVbXCJIRUFQMTZcIl09SEVBUDE2PW5ldyBJbnQxNkFycmF5KGJ1Zik7TW9kdWxlW1wiSEVBUDMyXCJdPUhFQVAzMj1uZXcgSW50MzJBcnJheShidWYpO01vZHVsZVtcIkhFQVBVOFwiXT1IRUFQVTg9bmV3IFVpbnQ4QXJyYXkoYnVmKTtNb2R1bGVbXCJIRUFQVTE2XCJdPUhFQVBVMTY9bmV3IFVpbnQxNkFycmF5KGJ1Zik7TW9kdWxlW1wiSEVBUFUzMlwiXT1IRUFQVTMyPW5ldyBVaW50MzJBcnJheShidWYpO01vZHVsZVtcIkhFQVBGMzJcIl09SEVBUEYzMj1uZXcgRmxvYXQzMkFycmF5KGJ1Zik7TW9kdWxlW1wiSEVBUEY2NFwiXT1IRUFQRjY0PW5ldyBGbG9hdDY0QXJyYXkoYnVmKX12YXIgSU5JVElBTF9NRU1PUlk9TW9kdWxlW1wiSU5JVElBTF9NRU1PUllcIl18fDE2Nzc3MjE2O2lmKEVOVklST05NRU5UX0lTX1BUSFJFQUQpe3dhc21NZW1vcnk9TW9kdWxlW1wid2FzbU1lbW9yeVwiXTtidWZmZXI9TW9kdWxlW1wiYnVmZmVyXCJdfWVsc2V7aWYoTW9kdWxlW1wid2FzbU1lbW9yeVwiXSl7d2FzbU1lbW9yeT1Nb2R1bGVbXCJ3YXNtTWVtb3J5XCJdfWVsc2V7d2FzbU1lbW9yeT1uZXcgV2ViQXNzZW1ibHkuTWVtb3J5KHtcImluaXRpYWxcIjpJTklUSUFMX01FTU9SWS82NTUzNixcIm1heGltdW1cIjoyMTQ3NDgzNjQ4LzY1NTM2LFwic2hhcmVkXCI6dHJ1ZX0pO2lmKCEod2FzbU1lbW9yeS5idWZmZXIgaW5zdGFuY2VvZiBTaGFyZWRBcnJheUJ1ZmZlcikpe2VycihcInJlcXVlc3RlZCBhIHNoYXJlZCBXZWJBc3NlbWJseS5NZW1vcnkgYnV0IHRoZSByZXR1cm5lZCBidWZmZXIgaXMgbm90IGEgU2hhcmVkQXJyYXlCdWZmZXIsIGluZGljYXRpbmcgdGhhdCB3aGlsZSB0aGUgYnJvd3NlciBoYXMgU2hhcmVkQXJyYXlCdWZmZXIgaXQgZG9lcyBub3QgaGF2ZSBXZWJBc3NlbWJseSB0aHJlYWRzIHN1cHBvcnQgLSB5b3UgbWF5IG5lZWQgdG8gc2V0IGEgZmxhZ1wiKTtpZihFTlZJUk9OTUVOVF9JU19OT0RFKXtjb25zb2xlLmxvZyhcIihvbiBub2RlIHlvdSBtYXkgbmVlZDogLS1leHBlcmltZW50YWwtd2FzbS10aHJlYWRzIC0tZXhwZXJpbWVudGFsLXdhc20tYnVsay1tZW1vcnkgYW5kIGFsc28gdXNlIGEgcmVjZW50IHZlcnNpb24pXCIpfXRocm93IEVycm9yKFwiYmFkIG1lbW9yeVwiKX19fWlmKHdhc21NZW1vcnkpe2J1ZmZlcj13YXNtTWVtb3J5LmJ1ZmZlcn1JTklUSUFMX01FTU9SWT1idWZmZXIuYnl0ZUxlbmd0aDt1cGRhdGVHbG9iYWxCdWZmZXJBbmRWaWV3cyhidWZmZXIpO3ZhciB3YXNtVGFibGU7dmFyIF9fQVRQUkVSVU5fXz1bXTt2YXIgX19BVElOSVRfXz1bXTt2YXIgX19BVEVYSVRfXz1bXTt2YXIgX19BVFBPU1RSVU5fXz1bXTt2YXIgcnVudGltZUluaXRpYWxpemVkPWZhbHNlO3ZhciBydW50aW1lRXhpdGVkPWZhbHNlO2Z1bmN0aW9uIHByZVJ1bigpe2lmKEVOVklST05NRU5UX0lTX1BUSFJFQUQpcmV0dXJuO2lmKE1vZHVsZVtcInByZVJ1blwiXSl7aWYodHlwZW9mIE1vZHVsZVtcInByZVJ1blwiXT09XCJmdW5jdGlvblwiKU1vZHVsZVtcInByZVJ1blwiXT1bTW9kdWxlW1wicHJlUnVuXCJdXTt3aGlsZShNb2R1bGVbXCJwcmVSdW5cIl0ubGVuZ3RoKXthZGRPblByZVJ1bihNb2R1bGVbXCJwcmVSdW5cIl0uc2hpZnQoKSl9fWNhbGxSdW50aW1lQ2FsbGJhY2tzKF9fQVRQUkVSVU5fXyl9ZnVuY3Rpb24gaW5pdFJ1bnRpbWUoKXtydW50aW1lSW5pdGlhbGl6ZWQ9dHJ1ZTtpZihFTlZJUk9OTUVOVF9JU19QVEhSRUFEKXJldHVybjtjYWxsUnVudGltZUNhbGxiYWNrcyhfX0FUSU5JVF9fKX1mdW5jdGlvbiBleGl0UnVudGltZSgpe2lmKEVOVklST05NRU5UX0lTX1BUSFJFQUQpcmV0dXJuO3J1bnRpbWVFeGl0ZWQ9dHJ1ZX1mdW5jdGlvbiBwb3N0UnVuKCl7aWYoRU5WSVJPTk1FTlRfSVNfUFRIUkVBRClyZXR1cm47aWYoTW9kdWxlW1wicG9zdFJ1blwiXSl7aWYodHlwZW9mIE1vZHVsZVtcInBvc3RSdW5cIl09PVwiZnVuY3Rpb25cIilNb2R1bGVbXCJwb3N0UnVuXCJdPVtNb2R1bGVbXCJwb3N0UnVuXCJdXTt3aGlsZShNb2R1bGVbXCJwb3N0UnVuXCJdLmxlbmd0aCl7YWRkT25Qb3N0UnVuKE1vZHVsZVtcInBvc3RSdW5cIl0uc2hpZnQoKSl9fWNhbGxSdW50aW1lQ2FsbGJhY2tzKF9fQVRQT1NUUlVOX18pfWZ1bmN0aW9uIGFkZE9uUHJlUnVuKGNiKXtfX0FUUFJFUlVOX18udW5zaGlmdChjYil9ZnVuY3Rpb24gYWRkT25Jbml0KGNiKXtfX0FUSU5JVF9fLnVuc2hpZnQoY2IpfWZ1bmN0aW9uIGFkZE9uUG9zdFJ1bihjYil7X19BVFBPU1RSVU5fXy51bnNoaWZ0KGNiKX12YXIgcnVuRGVwZW5kZW5jaWVzPTA7dmFyIHJ1bkRlcGVuZGVuY3lXYXRjaGVyPW51bGw7dmFyIGRlcGVuZGVuY2llc0Z1bGZpbGxlZD1udWxsO2Z1bmN0aW9uIGFkZFJ1bkRlcGVuZGVuY3koaWQpe2Fzc2VydCghRU5WSVJPTk1FTlRfSVNfUFRIUkVBRCxcImFkZFJ1bkRlcGVuZGVuY3kgY2Fubm90IGJlIHVzZWQgaW4gYSBwdGhyZWFkIHdvcmtlclwiKTtydW5EZXBlbmRlbmNpZXMrKztpZihNb2R1bGVbXCJtb25pdG9yUnVuRGVwZW5kZW5jaWVzXCJdKXtNb2R1bGVbXCJtb25pdG9yUnVuRGVwZW5kZW5jaWVzXCJdKHJ1bkRlcGVuZGVuY2llcyl9fWZ1bmN0aW9uIHJlbW92ZVJ1bkRlcGVuZGVuY3koaWQpe3J1bkRlcGVuZGVuY2llcy0tO2lmKE1vZHVsZVtcIm1vbml0b3JSdW5EZXBlbmRlbmNpZXNcIl0pe01vZHVsZVtcIm1vbml0b3JSdW5EZXBlbmRlbmNpZXNcIl0ocnVuRGVwZW5kZW5jaWVzKX1pZihydW5EZXBlbmRlbmNpZXM9PTApe2lmKHJ1bkRlcGVuZGVuY3lXYXRjaGVyIT09bnVsbCl7Y2xlYXJJbnRlcnZhbChydW5EZXBlbmRlbmN5V2F0Y2hlcik7cnVuRGVwZW5kZW5jeVdhdGNoZXI9bnVsbH1pZihkZXBlbmRlbmNpZXNGdWxmaWxsZWQpe3ZhciBjYWxsYmFjaz1kZXBlbmRlbmNpZXNGdWxmaWxsZWQ7ZGVwZW5kZW5jaWVzRnVsZmlsbGVkPW51bGw7Y2FsbGJhY2soKX19fU1vZHVsZVtcInByZWxvYWRlZEltYWdlc1wiXT17fTtNb2R1bGVbXCJwcmVsb2FkZWRBdWRpb3NcIl09e307ZnVuY3Rpb24gYWJvcnQod2hhdCl7aWYoTW9kdWxlW1wib25BYm9ydFwiXSl7TW9kdWxlW1wib25BYm9ydFwiXSh3aGF0KX1pZihFTlZJUk9OTUVOVF9JU19QVEhSRUFEKWNvbnNvbGUuZXJyb3IoXCJQdGhyZWFkIGFib3J0aW5nIGF0IFwiKyhuZXcgRXJyb3IpLnN0YWNrKTt3aGF0Kz1cIlwiO2Vycih3aGF0KTtBQk9SVD10cnVlO0VYSVRTVEFUVVM9MTt3aGF0PVwiYWJvcnQoXCIrd2hhdCtcIikuIEJ1aWxkIHdpdGggLXMgQVNTRVJUSU9OUz0xIGZvciBtb3JlIGluZm8uXCI7dmFyIGU9bmV3IFdlYkFzc2VtYmx5LlJ1bnRpbWVFcnJvcih3aGF0KTtyZWFkeVByb21pc2VSZWplY3QoZSk7dGhyb3cgZX12YXIgZGF0YVVSSVByZWZpeD1cImRhdGE6YXBwbGljYXRpb24vb2N0ZXQtc3RyZWFtO2Jhc2U2NCxcIjtmdW5jdGlvbiBpc0RhdGFVUkkoZmlsZW5hbWUpe3JldHVybiBmaWxlbmFtZS5zdGFydHNXaXRoKGRhdGFVUklQcmVmaXgpfWlmKE1vZHVsZVtcImxvY2F0ZUZpbGVcIl0pe3ZhciB3YXNtQmluYXJ5RmlsZT1cImF2aWZfZW5jX210Lndhc21cIjtpZighaXNEYXRhVVJJKHdhc21CaW5hcnlGaWxlKSl7d2FzbUJpbmFyeUZpbGU9bG9jYXRlRmlsZSh3YXNtQmluYXJ5RmlsZSl9fWVsc2V7dmFyIHdhc21CaW5hcnlGaWxlPW5ldyBVUkwoXCJhdmlmX2VuY19tdC53YXNtXCIsaW1wb3J0Lm1ldGEudXJsKS50b1N0cmluZygpfWZ1bmN0aW9uIGdldEJpbmFyeShmaWxlKXt0cnl7aWYoZmlsZT09d2FzbUJpbmFyeUZpbGUmJndhc21CaW5hcnkpe3JldHVybiBuZXcgVWludDhBcnJheSh3YXNtQmluYXJ5KX1pZihyZWFkQmluYXJ5KXtyZXR1cm4gcmVhZEJpbmFyeShmaWxlKX1lbHNle3Rocm93XCJib3RoIGFzeW5jIGFuZCBzeW5jIGZldGNoaW5nIG9mIHRoZSB3YXNtIGZhaWxlZFwifX1jYXRjaChlcnIpe2Fib3J0KGVycil9fWZ1bmN0aW9uIGdldEJpbmFyeVByb21pc2UoKXtpZighd2FzbUJpbmFyeSYmKEVOVklST05NRU5UX0lTX1dFQnx8RU5WSVJPTk1FTlRfSVNfV09SS0VSKSl7aWYodHlwZW9mIGZldGNoPT09XCJmdW5jdGlvblwiKXtyZXR1cm4gZmV0Y2god2FzbUJpbmFyeUZpbGUse2NyZWRlbnRpYWxzOlwic2FtZS1vcmlnaW5cIn0pLnRoZW4oZnVuY3Rpb24ocmVzcG9uc2Upe2lmKCFyZXNwb25zZVtcIm9rXCJdKXt0aHJvd1wiZmFpbGVkIHRvIGxvYWQgd2FzbSBiaW5hcnkgZmlsZSBhdCAnXCIrd2FzbUJpbmFyeUZpbGUrXCInXCJ9cmV0dXJuIHJlc3BvbnNlW1wiYXJyYXlCdWZmZXJcIl0oKX0pLmNhdGNoKGZ1bmN0aW9uKCl7cmV0dXJuIGdldEJpbmFyeSh3YXNtQmluYXJ5RmlsZSl9KX19cmV0dXJuIFByb21pc2UucmVzb2x2ZSgpLnRoZW4oZnVuY3Rpb24oKXtyZXR1cm4gZ2V0QmluYXJ5KHdhc21CaW5hcnlGaWxlKX0pfWZ1bmN0aW9uIGNyZWF0ZVdhc20oKXt2YXIgaW5mbz17XCJhXCI6YXNtTGlicmFyeUFyZ307ZnVuY3Rpb24gcmVjZWl2ZUluc3RhbmNlKGluc3RhbmNlLG1vZHVsZSl7dmFyIGV4cG9ydHM9aW5zdGFuY2UuZXhwb3J0cztNb2R1bGVbXCJhc21cIl09ZXhwb3J0czt3YXNtVGFibGU9TW9kdWxlW1wiYXNtXCJdW1wibGFcIl07YWRkT25Jbml0KE1vZHVsZVtcImFzbVwiXVtcImhhXCJdKTtQVGhyZWFkLnRsc0luaXRGdW5jdGlvbnMucHVzaChNb2R1bGVbXCJhc21cIl1bXCJrYVwiXSk7d2FzbU1vZHVsZT1tb2R1bGU7aWYoIUVOVklST05NRU5UX0lTX1BUSFJFQUQpe3ZhciBudW1Xb3JrZXJzVG9Mb2FkPVBUaHJlYWQudW51c2VkV29ya2Vycy5sZW5ndGg7UFRocmVhZC51bnVzZWRXb3JrZXJzLmZvckVhY2goZnVuY3Rpb24odyl7UFRocmVhZC5sb2FkV2FzbU1vZHVsZVRvV29ya2VyKHcsZnVuY3Rpb24oKXtpZighLS1udW1Xb3JrZXJzVG9Mb2FkKXJlbW92ZVJ1bkRlcGVuZGVuY3koXCJ3YXNtLWluc3RhbnRpYXRlXCIpfSl9KX19aWYoIUVOVklST05NRU5UX0lTX1BUSFJFQUQpe2FkZFJ1bkRlcGVuZGVuY3koXCJ3YXNtLWluc3RhbnRpYXRlXCIpfWZ1bmN0aW9uIHJlY2VpdmVJbnN0YW50aWF0aW9uUmVzdWx0KHJlc3VsdCl7cmVjZWl2ZUluc3RhbmNlKHJlc3VsdFtcImluc3RhbmNlXCJdLHJlc3VsdFtcIm1vZHVsZVwiXSl9ZnVuY3Rpb24gaW5zdGFudGlhdGVBcnJheUJ1ZmZlcihyZWNlaXZlcil7cmV0dXJuIGdldEJpbmFyeVByb21pc2UoKS50aGVuKGZ1bmN0aW9uKGJpbmFyeSl7dmFyIHJlc3VsdD1XZWJBc3NlbWJseS5pbnN0YW50aWF0ZShiaW5hcnksaW5mbyk7cmV0dXJuIHJlc3VsdH0pLnRoZW4ocmVjZWl2ZXIsZnVuY3Rpb24ocmVhc29uKXtlcnIoXCJmYWlsZWQgdG8gYXN5bmNocm9ub3VzbHkgcHJlcGFyZSB3YXNtOiBcIityZWFzb24pO2Fib3J0KHJlYXNvbil9KX1mdW5jdGlvbiBpbnN0YW50aWF0ZUFzeW5jKCl7aWYoIXdhc21CaW5hcnkmJnR5cGVvZiBXZWJBc3NlbWJseS5pbnN0YW50aWF0ZVN0cmVhbWluZz09PVwiZnVuY3Rpb25cIiYmIWlzRGF0YVVSSSh3YXNtQmluYXJ5RmlsZSkmJnR5cGVvZiBmZXRjaD09PVwiZnVuY3Rpb25cIil7cmV0dXJuIGZldGNoKHdhc21CaW5hcnlGaWxlLHtjcmVkZW50aWFsczpcInNhbWUtb3JpZ2luXCJ9KS50aGVuKGZ1bmN0aW9uKHJlc3BvbnNlKXt2YXIgcmVzdWx0PVdlYkFzc2VtYmx5Lmluc3RhbnRpYXRlU3RyZWFtaW5nKHJlc3BvbnNlLGluZm8pO3JldHVybiByZXN1bHQudGhlbihyZWNlaXZlSW5zdGFudGlhdGlvblJlc3VsdCxmdW5jdGlvbihyZWFzb24pe2VycihcIndhc20gc3RyZWFtaW5nIGNvbXBpbGUgZmFpbGVkOiBcIityZWFzb24pO2VycihcImZhbGxpbmcgYmFjayB0byBBcnJheUJ1ZmZlciBpbnN0YW50aWF0aW9uXCIpO3JldHVybiBpbnN0YW50aWF0ZUFycmF5QnVmZmVyKHJlY2VpdmVJbnN0YW50aWF0aW9uUmVzdWx0KX0pfSl9ZWxzZXtyZXR1cm4gaW5zdGFudGlhdGVBcnJheUJ1ZmZlcihyZWNlaXZlSW5zdGFudGlhdGlvblJlc3VsdCl9fWlmKE1vZHVsZVtcImluc3RhbnRpYXRlV2FzbVwiXSl7dHJ5e3ZhciBleHBvcnRzPU1vZHVsZVtcImluc3RhbnRpYXRlV2FzbVwiXShpbmZvLHJlY2VpdmVJbnN0YW5jZSk7cmV0dXJuIGV4cG9ydHN9Y2F0Y2goZSl7ZXJyKFwiTW9kdWxlLmluc3RhbnRpYXRlV2FzbSBjYWxsYmFjayBmYWlsZWQgd2l0aCBlcnJvcjogXCIrZSk7cmV0dXJuIGZhbHNlfX1pbnN0YW50aWF0ZUFzeW5jKCkuY2F0Y2gocmVhZHlQcm9taXNlUmVqZWN0KTtyZXR1cm57fX12YXIgQVNNX0NPTlNUUz17NjAwNTQwOmZ1bmN0aW9uKCl7dGhyb3dcIkNhbmNlbGVkIVwifSw2MDA1NTg6ZnVuY3Rpb24oJDAsJDEpe3NldFRpbWVvdXQoZnVuY3Rpb24oKXtfX2Vtc2NyaXB0ZW5fZG9fZGlzcGF0Y2hfdG9fdGhyZWFkKCQwLCQxKX0sMCl9fTtmdW5jdGlvbiBpbml0UHRocmVhZHNKUygpe1BUaHJlYWQuaW5pdFJ1bnRpbWUoKX1mdW5jdGlvbiBjYWxsUnVudGltZUNhbGxiYWNrcyhjYWxsYmFja3Mpe3doaWxlKGNhbGxiYWNrcy5sZW5ndGg+MCl7dmFyIGNhbGxiYWNrPWNhbGxiYWNrcy5zaGlmdCgpO2lmKHR5cGVvZiBjYWxsYmFjaz09XCJmdW5jdGlvblwiKXtjYWxsYmFjayhNb2R1bGUpO2NvbnRpbnVlfXZhciBmdW5jPWNhbGxiYWNrLmZ1bmM7aWYodHlwZW9mIGZ1bmM9PT1cIm51bWJlclwiKXtpZihjYWxsYmFjay5hcmc9PT11bmRlZmluZWQpe3dhc21UYWJsZS5nZXQoZnVuYykoKX1lbHNle3dhc21UYWJsZS5nZXQoZnVuYykoY2FsbGJhY2suYXJnKX19ZWxzZXtmdW5jKGNhbGxiYWNrLmFyZz09PXVuZGVmaW5lZD9udWxsOmNhbGxiYWNrLmFyZyl9fX12YXIgRVJSTk9fQ09ERVM9e0VQRVJNOjYzLEVOT0VOVDo0NCxFU1JDSDo3MSxFSU5UUjoyNyxFSU86MjksRU5YSU86NjAsRTJCSUc6MSxFTk9FWEVDOjQ1LEVCQURGOjgsRUNISUxEOjEyLEVBR0FJTjo2LEVXT1VMREJMT0NLOjYsRU5PTUVNOjQ4LEVBQ0NFUzoyLEVGQVVMVDoyMSxFTk9UQkxLOjEwNSxFQlVTWToxMCxFRVhJU1Q6MjAsRVhERVY6NzUsRU5PREVWOjQzLEVOT1RESVI6NTQsRUlTRElSOjMxLEVJTlZBTDoyOCxFTkZJTEU6NDEsRU1GSUxFOjMzLEVOT1RUWTo1OSxFVFhUQlNZOjc0LEVGQklHOjIyLEVOT1NQQzo1MSxFU1BJUEU6NzAsRVJPRlM6NjksRU1MSU5LOjM0LEVQSVBFOjY0LEVET006MTgsRVJBTkdFOjY4LEVOT01TRzo0OSxFSURSTToyNCxFQ0hSTkc6MTA2LEVMMk5TWU5DOjE1NixFTDNITFQ6MTA3LEVMM1JTVDoxMDgsRUxOUk5HOjEwOSxFVU5BVENIOjExMCxFTk9DU0k6MTExLEVMMkhMVDoxMTIsRURFQURMSzoxNixFTk9MQ0s6NDYsRUJBREU6MTEzLEVCQURSOjExNCxFWEZVTEw6MTE1LEVOT0FOTzoxMDQsRUJBRFJRQzoxMDMsRUJBRFNMVDoxMDIsRURFQURMT0NLOjE2LEVCRk9OVDoxMDEsRU5PU1RSOjEwMCxFTk9EQVRBOjExNixFVElNRToxMTcsRU5PU1I6MTE4LEVOT05FVDoxMTksRU5PUEtHOjEyMCxFUkVNT1RFOjEyMSxFTk9MSU5LOjQ3LEVBRFY6MTIyLEVTUk1OVDoxMjMsRUNPTU06MTI0LEVQUk9UTzo2NSxFTVVMVElIT1A6MzYsRURPVERPVDoxMjUsRUJBRE1TRzo5LEVOT1RVTklROjEyNixFQkFERkQ6MTI3LEVSRU1DSEc6MTI4LEVMSUJBQ0M6MTI5LEVMSUJCQUQ6MTMwLEVMSUJTQ046MTMxLEVMSUJNQVg6MTMyLEVMSUJFWEVDOjEzMyxFTk9TWVM6NTIsRU5PVEVNUFRZOjU1LEVOQU1FVE9PTE9ORzozNyxFTE9PUDozMixFT1BOT1RTVVBQOjEzOCxFUEZOT1NVUFBPUlQ6MTM5LEVDT05OUkVTRVQ6MTUsRU5PQlVGUzo0MixFQUZOT1NVUFBPUlQ6NSxFUFJPVE9UWVBFOjY3LEVOT1RTT0NLOjU3LEVOT1BST1RPT1BUOjUwLEVTSFVURE9XTjoxNDAsRUNPTk5SRUZVU0VEOjE0LEVBRERSSU5VU0U6MyxFQ09OTkFCT1JURUQ6MTMsRU5FVFVOUkVBQ0g6NDAsRU5FVERPV046MzgsRVRJTUVET1VUOjczLEVIT1NURE9XTjoxNDIsRUhPU1RVTlJFQUNIOjIzLEVJTlBST0dSRVNTOjI2LEVBTFJFQURZOjcsRURFU1RBRERSUkVROjE3LEVNU0dTSVpFOjM1LEVQUk9UT05PU1VQUE9SVDo2NixFU09DS1ROT1NVUFBPUlQ6MTM3LEVBRERSTk9UQVZBSUw6NCxFTkVUUkVTRVQ6MzksRUlTQ09OTjozMCxFTk9UQ09OTjo1MyxFVE9PTUFOWVJFRlM6MTQxLEVVU0VSUzoxMzYsRURRVU9UOjE5LEVTVEFMRTo3MixFTk9UU1VQOjEzOCxFTk9NRURJVU06MTQ4LEVJTFNFUToyNSxFT1ZFUkZMT1c6NjEsRUNBTkNFTEVEOjExLEVOT1RSRUNPVkVSQUJMRTo1NixFT1dORVJERUFEOjYyLEVTVFJQSVBFOjEzNX07ZnVuY3Rpb24gX2Vtc2NyaXB0ZW5fZnV0ZXhfd2FrZShhZGRyLGNvdW50KXtpZihhZGRyPD0wfHxhZGRyPkdST1dBQkxFX0hFQVBfSTgoKS5sZW5ndGh8fGFkZHImMyE9MHx8Y291bnQ8MClyZXR1cm4tMjg7aWYoY291bnQ9PTApcmV0dXJuIDA7aWYoY291bnQ+PTIxNDc0ODM2NDcpY291bnQ9SW5maW5pdHk7dmFyIG1haW5UaHJlYWRXYWl0QWRkcmVzcz1BdG9taWNzLmxvYWQoR1JPV0FCTEVfSEVBUF9JMzIoKSxfX2Vtc2NyaXB0ZW5fbWFpbl90aHJlYWRfZnV0ZXg+PjIpO3ZhciBtYWluVGhyZWFkV29rZW49MDtpZihtYWluVGhyZWFkV2FpdEFkZHJlc3M9PWFkZHIpe3ZhciBsb2FkZWRBZGRyPUF0b21pY3MuY29tcGFyZUV4Y2hhbmdlKEdST1dBQkxFX0hFQVBfSTMyKCksX19lbXNjcmlwdGVuX21haW5fdGhyZWFkX2Z1dGV4Pj4yLG1haW5UaHJlYWRXYWl0QWRkcmVzcywwKTtpZihsb2FkZWRBZGRyPT1tYWluVGhyZWFkV2FpdEFkZHJlc3Mpey0tY291bnQ7bWFpblRocmVhZFdva2VuPTE7aWYoY291bnQ8PTApcmV0dXJuIDF9fXZhciByZXQ9QXRvbWljcy5ub3RpZnkoR1JPV0FCTEVfSEVBUF9JMzIoKSxhZGRyPj4yLGNvdW50KTtpZihyZXQ+PTApcmV0dXJuIHJldCttYWluVGhyZWFkV29rZW47dGhyb3dcIkF0b21pY3Mubm90aWZ5IHJldHVybmVkIGFuIHVuZXhwZWN0ZWQgdmFsdWUgXCIrcmV0fU1vZHVsZVtcIl9lbXNjcmlwdGVuX2Z1dGV4X3dha2VcIl09X2Vtc2NyaXB0ZW5fZnV0ZXhfd2FrZTtmdW5jdGlvbiBraWxsVGhyZWFkKHB0aHJlYWRfcHRyKXtpZihFTlZJUk9OTUVOVF9JU19QVEhSRUFEKXRocm93XCJJbnRlcm5hbCBFcnJvciEga2lsbFRocmVhZCgpIGNhbiBvbmx5IGV2ZXIgYmUgY2FsbGVkIGZyb20gbWFpbiBhcHBsaWNhdGlvbiB0aHJlYWQhXCI7aWYoIXB0aHJlYWRfcHRyKXRocm93XCJJbnRlcm5hbCBFcnJvciEgTnVsbCBwdGhyZWFkX3B0ciBpbiBraWxsVGhyZWFkIVwiO0dST1dBQkxFX0hFQVBfSTMyKClbcHRocmVhZF9wdHIrMTI+PjJdPTA7dmFyIHB0aHJlYWQ9UFRocmVhZC5wdGhyZWFkc1twdGhyZWFkX3B0cl07cHRocmVhZC53b3JrZXIudGVybWluYXRlKCk7UFRocmVhZC5mcmVlVGhyZWFkRGF0YShwdGhyZWFkKTtQVGhyZWFkLnJ1bm5pbmdXb3JrZXJzLnNwbGljZShQVGhyZWFkLnJ1bm5pbmdXb3JrZXJzLmluZGV4T2YocHRocmVhZC53b3JrZXIpLDEpO3B0aHJlYWQud29ya2VyLnB0aHJlYWQ9dW5kZWZpbmVkfWZ1bmN0aW9uIGNhbmNlbFRocmVhZChwdGhyZWFkX3B0cil7aWYoRU5WSVJPTk1FTlRfSVNfUFRIUkVBRCl0aHJvd1wiSW50ZXJuYWwgRXJyb3IhIGNhbmNlbFRocmVhZCgpIGNhbiBvbmx5IGV2ZXIgYmUgY2FsbGVkIGZyb20gbWFpbiBhcHBsaWNhdGlvbiB0aHJlYWQhXCI7aWYoIXB0aHJlYWRfcHRyKXRocm93XCJJbnRlcm5hbCBFcnJvciEgTnVsbCBwdGhyZWFkX3B0ciBpbiBjYW5jZWxUaHJlYWQhXCI7dmFyIHB0aHJlYWQ9UFRocmVhZC5wdGhyZWFkc1twdGhyZWFkX3B0cl07cHRocmVhZC53b3JrZXIucG9zdE1lc3NhZ2Uoe1wiY21kXCI6XCJjYW5jZWxcIn0pfWZ1bmN0aW9uIGNsZWFudXBUaHJlYWQocHRocmVhZF9wdHIpe2lmKEVOVklST05NRU5UX0lTX1BUSFJFQUQpdGhyb3dcIkludGVybmFsIEVycm9yISBjbGVhbnVwVGhyZWFkKCkgY2FuIG9ubHkgZXZlciBiZSBjYWxsZWQgZnJvbSBtYWluIGFwcGxpY2F0aW9uIHRocmVhZCFcIjtpZighcHRocmVhZF9wdHIpdGhyb3dcIkludGVybmFsIEVycm9yISBOdWxsIHB0aHJlYWRfcHRyIGluIGNsZWFudXBUaHJlYWQhXCI7dmFyIHB0aHJlYWQ9UFRocmVhZC5wdGhyZWFkc1twdGhyZWFkX3B0cl07aWYocHRocmVhZCl7R1JPV0FCTEVfSEVBUF9JMzIoKVtwdGhyZWFkX3B0cisxMj4+Ml09MDt2YXIgd29ya2VyPXB0aHJlYWQud29ya2VyO1BUaHJlYWQucmV0dXJuV29ya2VyVG9Qb29sKHdvcmtlcil9fXZhciBQVGhyZWFkPXt1bnVzZWRXb3JrZXJzOltdLHJ1bm5pbmdXb3JrZXJzOltdLHRsc0luaXRGdW5jdGlvbnM6W10saW5pdE1haW5UaHJlYWRCbG9jazpmdW5jdGlvbigpe3ZhciBwdGhyZWFkUG9vbFNpemU9bmF2aWdhdG9yLmhhcmR3YXJlQ29uY3VycmVuY3k7Zm9yKHZhciBpPTA7aTxwdGhyZWFkUG9vbFNpemU7KytpKXtQVGhyZWFkLmFsbG9jYXRlVW51c2VkV29ya2VyKCl9fSxpbml0UnVudGltZTpmdW5jdGlvbigpe3ZhciB0Yj1fbWFsbG9jKDIyOCk7Zm9yKHZhciBpPTA7aTwyMjgvNDsrK2kpR1JPV0FCTEVfSEVBUF9VMzIoKVt0Yi80K2ldPTA7R1JPV0FCTEVfSEVBUF9JMzIoKVt0YisxMj4+Ml09dGI7dmFyIGhlYWRQdHI9dGIrMTUyO0dST1dBQkxFX0hFQVBfSTMyKClbaGVhZFB0cj4+Ml09aGVhZFB0cjt2YXIgdGxzTWVtb3J5PV9tYWxsb2MoNTEyKTtmb3IodmFyIGk9MDtpPDEyODsrK2kpR1JPV0FCTEVfSEVBUF9VMzIoKVt0bHNNZW1vcnkvNCtpXT0wO0F0b21pY3Muc3RvcmUoR1JPV0FCTEVfSEVBUF9VMzIoKSx0YisxMDA+PjIsdGxzTWVtb3J5KTtBdG9taWNzLnN0b3JlKEdST1dBQkxFX0hFQVBfVTMyKCksdGIrNDA+PjIsdGIpO19fZW1zY3JpcHRlbl90aHJlYWRfaW5pdCh0YiwhRU5WSVJPTk1FTlRfSVNfV09SS0VSLDEpO19lbXNjcmlwdGVuX3JlZ2lzdGVyX21haW5fYnJvd3Nlcl90aHJlYWRfaWQodGIpfSxpbml0V29ya2VyOmZ1bmN0aW9uKCl7fSxwdGhyZWFkczp7fSx0aHJlYWRFeGl0SGFuZGxlcnM6W10scnVuRXhpdEhhbmRsZXJzOmZ1bmN0aW9uKCl7d2hpbGUoUFRocmVhZC50aHJlYWRFeGl0SGFuZGxlcnMubGVuZ3RoPjApe1BUaHJlYWQudGhyZWFkRXhpdEhhbmRsZXJzLnBvcCgpKCl9aWYoRU5WSVJPTk1FTlRfSVNfUFRIUkVBRCYmX3B0aHJlYWRfc2VsZigpKV9fX3B0aHJlYWRfdHNkX3J1bl9kdG9ycygpfSxydW5FeGl0SGFuZGxlcnNBbmREZWluaXRUaHJlYWQ6ZnVuY3Rpb24odGIsZXhpdENvZGUpe0F0b21pY3Muc3RvcmUoR1JPV0FCTEVfSEVBUF9VMzIoKSx0Yis1Nj4+MiwxKTtBdG9taWNzLnN0b3JlKEdST1dBQkxFX0hFQVBfVTMyKCksdGIrNjA+PjIsMCk7UFRocmVhZC5ydW5FeGl0SGFuZGxlcnMoKTtBdG9taWNzLnN0b3JlKEdST1dBQkxFX0hFQVBfVTMyKCksdGIrND4+MixleGl0Q29kZSk7QXRvbWljcy5zdG9yZShHUk9XQUJMRV9IRUFQX1UzMigpLHRiKzA+PjIsMSk7X2Vtc2NyaXB0ZW5fZnV0ZXhfd2FrZSh0YiswLDIxNDc0ODM2NDcpO19fZW1zY3JpcHRlbl90aHJlYWRfaW5pdCgwLDAsMCl9LHNldEV4aXRTdGF0dXM6ZnVuY3Rpb24oc3RhdHVzKXtFWElUU1RBVFVTPXN0YXR1c30sdGhyZWFkRXhpdDpmdW5jdGlvbihleGl0Q29kZSl7dmFyIHRiPV9wdGhyZWFkX3NlbGYoKTtpZih0Yil7UFRocmVhZC5ydW5FeGl0SGFuZGxlcnNBbmREZWluaXRUaHJlYWQodGIsZXhpdENvZGUpO2lmKEVOVklST05NRU5UX0lTX1BUSFJFQUQpe3Bvc3RNZXNzYWdlKHtcImNtZFwiOlwiZXhpdFwifSl9fX0sdGhyZWFkQ2FuY2VsOmZ1bmN0aW9uKCl7UFRocmVhZC5ydW5FeGl0SGFuZGxlcnNBbmREZWluaXRUaHJlYWQoX3B0aHJlYWRfc2VsZigpLC0xKTtwb3N0TWVzc2FnZSh7XCJjbWRcIjpcImNhbmNlbERvbmVcIn0pfSx0ZXJtaW5hdGVBbGxUaHJlYWRzOmZ1bmN0aW9uKCl7Zm9yKHZhciB0IGluIFBUaHJlYWQucHRocmVhZHMpe3ZhciBwdGhyZWFkPVBUaHJlYWQucHRocmVhZHNbdF07aWYocHRocmVhZCYmcHRocmVhZC53b3JrZXIpe1BUaHJlYWQucmV0dXJuV29ya2VyVG9Qb29sKHB0aHJlYWQud29ya2VyKX19UFRocmVhZC5wdGhyZWFkcz17fTtmb3IodmFyIGk9MDtpPFBUaHJlYWQudW51c2VkV29ya2Vycy5sZW5ndGg7KytpKXt2YXIgd29ya2VyPVBUaHJlYWQudW51c2VkV29ya2Vyc1tpXTt3b3JrZXIudGVybWluYXRlKCl9UFRocmVhZC51bnVzZWRXb3JrZXJzPVtdO2Zvcih2YXIgaT0wO2k8UFRocmVhZC5ydW5uaW5nV29ya2Vycy5sZW5ndGg7KytpKXt2YXIgd29ya2VyPVBUaHJlYWQucnVubmluZ1dvcmtlcnNbaV07dmFyIHB0aHJlYWQ9d29ya2VyLnB0aHJlYWQ7UFRocmVhZC5mcmVlVGhyZWFkRGF0YShwdGhyZWFkKTt3b3JrZXIudGVybWluYXRlKCl9UFRocmVhZC5ydW5uaW5nV29ya2Vycz1bXX0sZnJlZVRocmVhZERhdGE6ZnVuY3Rpb24ocHRocmVhZCl7aWYoIXB0aHJlYWQpcmV0dXJuO2lmKHB0aHJlYWQudGhyZWFkSW5mb1N0cnVjdCl7dmFyIHRsc01lbW9yeT1HUk9XQUJMRV9IRUFQX0kzMigpW3B0aHJlYWQudGhyZWFkSW5mb1N0cnVjdCsxMDA+PjJdO0dST1dBQkxFX0hFQVBfSTMyKClbcHRocmVhZC50aHJlYWRJbmZvU3RydWN0KzEwMD4+Ml09MDtfZnJlZSh0bHNNZW1vcnkpO19mcmVlKHB0aHJlYWQudGhyZWFkSW5mb1N0cnVjdCl9cHRocmVhZC50aHJlYWRJbmZvU3RydWN0PTA7aWYocHRocmVhZC5hbGxvY2F0ZWRPd25TdGFjayYmcHRocmVhZC5zdGFja0Jhc2UpX2ZyZWUocHRocmVhZC5zdGFja0Jhc2UpO3B0aHJlYWQuc3RhY2tCYXNlPTA7aWYocHRocmVhZC53b3JrZXIpcHRocmVhZC53b3JrZXIucHRocmVhZD1udWxsfSxyZXR1cm5Xb3JrZXJUb1Bvb2w6ZnVuY3Rpb24od29ya2VyKXtQVGhyZWFkLnJ1bldpdGhvdXRNYWluVGhyZWFkUXVldWVkQ2FsbHMoZnVuY3Rpb24oKXtkZWxldGUgUFRocmVhZC5wdGhyZWFkc1t3b3JrZXIucHRocmVhZC50aHJlYWRJbmZvU3RydWN0XTtQVGhyZWFkLnVudXNlZFdvcmtlcnMucHVzaCh3b3JrZXIpO1BUaHJlYWQucnVubmluZ1dvcmtlcnMuc3BsaWNlKFBUaHJlYWQucnVubmluZ1dvcmtlcnMuaW5kZXhPZih3b3JrZXIpLDEpO1BUaHJlYWQuZnJlZVRocmVhZERhdGEod29ya2VyLnB0aHJlYWQpO3dvcmtlci5wdGhyZWFkPXVuZGVmaW5lZH0pfSxydW5XaXRob3V0TWFpblRocmVhZFF1ZXVlZENhbGxzOmZ1bmN0aW9uKGZ1bmMpe0dST1dBQkxFX0hFQVBfSTMyKClbX19lbXNjcmlwdGVuX2FsbG93X21haW5fcnVudGltZV9xdWV1ZWRfY2FsbHM+PjJdPTA7dHJ5e2Z1bmMoKX1maW5hbGx5e0dST1dBQkxFX0hFQVBfSTMyKClbX19lbXNjcmlwdGVuX2FsbG93X21haW5fcnVudGltZV9xdWV1ZWRfY2FsbHM+PjJdPTF9fSxyZWNlaXZlT2JqZWN0VHJhbnNmZXI6ZnVuY3Rpb24oZGF0YSl7fSx0aHJlYWRJbml0OmZ1bmN0aW9uKCl7Zm9yKHZhciBpIGluIFBUaHJlYWQudGxzSW5pdEZ1bmN0aW9ucyl7UFRocmVhZC50bHNJbml0RnVuY3Rpb25zW2ldKCl9fSxsb2FkV2FzbU1vZHVsZVRvV29ya2VyOmZ1bmN0aW9uKHdvcmtlcixvbkZpbmlzaGVkTG9hZGluZyl7d29ya2VyLm9ubWVzc2FnZT1mdW5jdGlvbihlKXt2YXIgZD1lW1wiZGF0YVwiXTt2YXIgY21kPWRbXCJjbWRcIl07aWYod29ya2VyLnB0aHJlYWQpUFRocmVhZC5jdXJyZW50UHJveGllZE9wZXJhdGlvbkNhbGxlclRocmVhZD13b3JrZXIucHRocmVhZC50aHJlYWRJbmZvU3RydWN0O2lmKGRbXCJ0YXJnZXRUaHJlYWRcIl0mJmRbXCJ0YXJnZXRUaHJlYWRcIl0hPV9wdGhyZWFkX3NlbGYoKSl7dmFyIHRocmVhZD1QVGhyZWFkLnB0aHJlYWRzW2QudGFyZ2V0VGhyZWFkXTtpZih0aHJlYWQpe3RocmVhZC53b3JrZXIucG9zdE1lc3NhZ2UoZS5kYXRhLGRbXCJ0cmFuc2Zlckxpc3RcIl0pfWVsc2V7Y29uc29sZS5lcnJvcignSW50ZXJuYWwgZXJyb3IhIFdvcmtlciBzZW50IGEgbWVzc2FnZSBcIicrY21kKydcIiB0byB0YXJnZXQgcHRocmVhZCAnK2RbXCJ0YXJnZXRUaHJlYWRcIl0rXCIsIGJ1dCB0aGF0IHRocmVhZCBubyBsb25nZXIgZXhpc3RzIVwiKX1QVGhyZWFkLmN1cnJlbnRQcm94aWVkT3BlcmF0aW9uQ2FsbGVyVGhyZWFkPXVuZGVmaW5lZDtyZXR1cm59aWYoY21kPT09XCJwcm9jZXNzUXVldWVkTWFpblRocmVhZFdvcmtcIil7X2Vtc2NyaXB0ZW5fbWFpbl90aHJlYWRfcHJvY2Vzc19xdWV1ZWRfY2FsbHMoKX1lbHNlIGlmKGNtZD09PVwic3Bhd25UaHJlYWRcIil7c3Bhd25UaHJlYWQoZS5kYXRhKX1lbHNlIGlmKGNtZD09PVwiY2xlYW51cFRocmVhZFwiKXtjbGVhbnVwVGhyZWFkKGRbXCJ0aHJlYWRcIl0pfWVsc2UgaWYoY21kPT09XCJraWxsVGhyZWFkXCIpe2tpbGxUaHJlYWQoZFtcInRocmVhZFwiXSl9ZWxzZSBpZihjbWQ9PT1cImNhbmNlbFRocmVhZFwiKXtjYW5jZWxUaHJlYWQoZFtcInRocmVhZFwiXSl9ZWxzZSBpZihjbWQ9PT1cImxvYWRlZFwiKXt3b3JrZXIubG9hZGVkPXRydWU7aWYob25GaW5pc2hlZExvYWRpbmcpb25GaW5pc2hlZExvYWRpbmcod29ya2VyKTtpZih3b3JrZXIucnVuUHRocmVhZCl7d29ya2VyLnJ1blB0aHJlYWQoKTtkZWxldGUgd29ya2VyLnJ1blB0aHJlYWR9fWVsc2UgaWYoY21kPT09XCJwcmludFwiKXtvdXQoXCJUaHJlYWQgXCIrZFtcInRocmVhZElkXCJdK1wiOiBcIitkW1widGV4dFwiXSl9ZWxzZSBpZihjbWQ9PT1cInByaW50RXJyXCIpe2VycihcIlRocmVhZCBcIitkW1widGhyZWFkSWRcIl0rXCI6IFwiK2RbXCJ0ZXh0XCJdKX1lbHNlIGlmKGNtZD09PVwiYWxlcnRcIil7YWxlcnQoXCJUaHJlYWQgXCIrZFtcInRocmVhZElkXCJdK1wiOiBcIitkW1widGV4dFwiXSl9ZWxzZSBpZihjbWQ9PT1cImV4aXRcIil7dmFyIGRldGFjaGVkPXdvcmtlci5wdGhyZWFkJiZBdG9taWNzLmxvYWQoR1JPV0FCTEVfSEVBUF9VMzIoKSx3b3JrZXIucHRocmVhZC50aHJlYWRJbmZvU3RydWN0KzY0Pj4yKTtpZihkZXRhY2hlZCl7UFRocmVhZC5yZXR1cm5Xb3JrZXJUb1Bvb2wod29ya2VyKX19ZWxzZSBpZihjbWQ9PT1cImV4aXRQcm9jZXNzXCIpe3RyeXtleGl0KGRbXCJyZXR1cm5Db2RlXCJdKX1jYXRjaChlKXtpZihlIGluc3RhbmNlb2YgRXhpdFN0YXR1cylyZXR1cm47dGhyb3cgZX19ZWxzZSBpZihjbWQ9PT1cImNhbmNlbERvbmVcIil7UFRocmVhZC5yZXR1cm5Xb3JrZXJUb1Bvb2wod29ya2VyKX1lbHNlIGlmKGNtZD09PVwib2JqZWN0VHJhbnNmZXJcIil7UFRocmVhZC5yZWNlaXZlT2JqZWN0VHJhbnNmZXIoZS5kYXRhKX1lbHNlIGlmKGUuZGF0YS50YXJnZXQ9PT1cInNldGltbWVkaWF0ZVwiKXt3b3JrZXIucG9zdE1lc3NhZ2UoZS5kYXRhKX1lbHNle2VycihcIndvcmtlciBzZW50IGFuIHVua25vd24gY29tbWFuZCBcIitjbWQpfVBUaHJlYWQuY3VycmVudFByb3hpZWRPcGVyYXRpb25DYWxsZXJUaHJlYWQ9dW5kZWZpbmVkfTt3b3JrZXIub25lcnJvcj1mdW5jdGlvbihlKXtlcnIoXCJwdGhyZWFkIHNlbnQgYW4gZXJyb3IhIFwiK2UuZmlsZW5hbWUrXCI6XCIrZS5saW5lbm8rXCI6IFwiK2UubWVzc2FnZSl9O3dvcmtlci5wb3N0TWVzc2FnZSh7XCJjbWRcIjpcImxvYWRcIixcInVybE9yQmxvYlwiOk1vZHVsZVtcIm1haW5TY3JpcHRVcmxPckJsb2JcIl0sXCJ3YXNtTWVtb3J5XCI6d2FzbU1lbW9yeSxcIndhc21Nb2R1bGVcIjp3YXNtTW9kdWxlfSl9LGFsbG9jYXRlVW51c2VkV29ya2VyOmZ1bmN0aW9uKCl7aWYoIU1vZHVsZVtcImxvY2F0ZUZpbGVcIl0pe1BUaHJlYWQudW51c2VkV29ya2Vycy5wdXNoKG5ldyBXb3JrZXIobmV3IFVSTChcImF2aWZfZW5jX210Lndvcmtlci5qc1wiLGltcG9ydC5tZXRhLnVybCkpKTtyZXR1cm59dmFyIHB0aHJlYWRNYWluSnM9bG9jYXRlRmlsZShcImF2aWZfZW5jX210Lndvcmtlci5qc1wiKTtQVGhyZWFkLnVudXNlZFdvcmtlcnMucHVzaChuZXcgV29ya2VyKHB0aHJlYWRNYWluSnMpKX0sZ2V0TmV3V29ya2VyOmZ1bmN0aW9uKCl7aWYoUFRocmVhZC51bnVzZWRXb3JrZXJzLmxlbmd0aD09MCl7UFRocmVhZC5hbGxvY2F0ZVVudXNlZFdvcmtlcigpO1BUaHJlYWQubG9hZFdhc21Nb2R1bGVUb1dvcmtlcihQVGhyZWFkLnVudXNlZFdvcmtlcnNbMF0pfXJldHVybiBQVGhyZWFkLnVudXNlZFdvcmtlcnMucG9wKCl9LGJ1c3lTcGluV2FpdDpmdW5jdGlvbihtc2Vjcyl7dmFyIHQ9cGVyZm9ybWFuY2Uubm93KCkrbXNlY3M7d2hpbGUocGVyZm9ybWFuY2Uubm93KCk8dCl7fX19O2Z1bmN0aW9uIGVzdGFibGlzaFN0YWNrU3BhY2Uoc3RhY2tUb3Asc3RhY2tNYXgpe19lbXNjcmlwdGVuX3N0YWNrX3NldF9saW1pdHMoc3RhY2tUb3Asc3RhY2tNYXgpO3N0YWNrUmVzdG9yZShzdGFja1RvcCl9TW9kdWxlW1wiZXN0YWJsaXNoU3RhY2tTcGFjZVwiXT1lc3RhYmxpc2hTdGFja1NwYWNlO2Z1bmN0aW9uIGludm9rZUVudHJ5UG9pbnQocHRyLGFyZyl7cmV0dXJuIHdhc21UYWJsZS5nZXQocHRyKShhcmcpfU1vZHVsZVtcImludm9rZUVudHJ5UG9pbnRcIl09aW52b2tlRW50cnlQb2ludDt2YXIgcnVudGltZUtlZXBhbGl2ZUNvdW50ZXI9MDtmdW5jdGlvbiBrZWVwUnVudGltZUFsaXZlKCl7cmV0dXJuIG5vRXhpdFJ1bnRpbWV8fHJ1bnRpbWVLZWVwYWxpdmVDb3VudGVyPjB9TW9kdWxlW1wia2VlcFJ1bnRpbWVBbGl2ZVwiXT1rZWVwUnVudGltZUFsaXZlO2Z1bmN0aW9uIF9fX2Fzc2VydF9mYWlsKGNvbmRpdGlvbixmaWxlbmFtZSxsaW5lLGZ1bmMpe2Fib3J0KFwiQXNzZXJ0aW9uIGZhaWxlZDogXCIrVVRGOFRvU3RyaW5nKGNvbmRpdGlvbikrXCIsIGF0OiBcIitbZmlsZW5hbWU/VVRGOFRvU3RyaW5nKGZpbGVuYW1lKTpcInVua25vd24gZmlsZW5hbWVcIixsaW5lLGZ1bmM/VVRGOFRvU3RyaW5nKGZ1bmMpOlwidW5rbm93biBmdW5jdGlvblwiXSl9dmFyIF9lbXNjcmlwdGVuX2dldF9ub3c7aWYoRU5WSVJPTk1FTlRfSVNfUFRIUkVBRCl7X2Vtc2NyaXB0ZW5fZ2V0X25vdz1mdW5jdGlvbigpe3JldHVybiBwZXJmb3JtYW5jZS5ub3coKS1Nb2R1bGVbXCJfX3BlcmZvcm1hbmNlX25vd19jbG9ja19kcmlmdFwiXX19ZWxzZSBfZW1zY3JpcHRlbl9nZXRfbm93PWZ1bmN0aW9uKCl7cmV0dXJuIHBlcmZvcm1hbmNlLm5vdygpfTtmdW5jdGlvbiBfcHRocmVhZF9jbGVhbnVwX3B1c2gocm91dGluZSxhcmcpe1BUaHJlYWQudGhyZWFkRXhpdEhhbmRsZXJzLnB1c2goZnVuY3Rpb24oKXt3YXNtVGFibGUuZ2V0KHJvdXRpbmUpKGFyZyl9KX1mdW5jdGlvbiBfX19jeGFfdGhyZWFkX2F0ZXhpdChhMCxhMSl7cmV0dXJuIF9wdGhyZWFkX2NsZWFudXBfcHVzaChhMCxhMSl9dmFyIFNZU0NBTExTPXttYXBwaW5nczp7fSxidWZmZXJzOltudWxsLFtdLFtdXSxwcmludENoYXI6ZnVuY3Rpb24oc3RyZWFtLGN1cnIpe3ZhciBidWZmZXI9U1lTQ0FMTFMuYnVmZmVyc1tzdHJlYW1dO2lmKGN1cnI9PT0wfHxjdXJyPT09MTApeyhzdHJlYW09PT0xP291dDplcnIpKFVURjhBcnJheVRvU3RyaW5nKGJ1ZmZlciwwKSk7YnVmZmVyLmxlbmd0aD0wfWVsc2V7YnVmZmVyLnB1c2goY3Vycil9fSx2YXJhcmdzOnVuZGVmaW5lZCxnZXQ6ZnVuY3Rpb24oKXtTWVNDQUxMUy52YXJhcmdzKz00O3ZhciByZXQ9R1JPV0FCTEVfSEVBUF9JMzIoKVtTWVNDQUxMUy52YXJhcmdzLTQ+PjJdO3JldHVybiByZXR9LGdldFN0cjpmdW5jdGlvbihwdHIpe3ZhciByZXQ9VVRGOFRvU3RyaW5nKHB0cik7cmV0dXJuIHJldH0sZ2V0NjQ6ZnVuY3Rpb24obG93LGhpZ2gpe3JldHVybiBsb3d9fTtmdW5jdGlvbiBfX19zeXNfZmNudGw2NChmZCxjbWQsdmFyYXJncyl7aWYoRU5WSVJPTk1FTlRfSVNfUFRIUkVBRClyZXR1cm4gX2Vtc2NyaXB0ZW5fcHJveHlfdG9fbWFpbl90aHJlYWRfanMoMSwxLGZkLGNtZCx2YXJhcmdzKTtTWVNDQUxMUy52YXJhcmdzPXZhcmFyZ3M7cmV0dXJuIDB9ZnVuY3Rpb24gX19fc3lzX2lvY3RsKGZkLG9wLHZhcmFyZ3Mpe2lmKEVOVklST05NRU5UX0lTX1BUSFJFQUQpcmV0dXJuIF9lbXNjcmlwdGVuX3Byb3h5X3RvX21haW5fdGhyZWFkX2pzKDIsMSxmZCxvcCx2YXJhcmdzKTtTWVNDQUxMUy52YXJhcmdzPXZhcmFyZ3M7cmV0dXJuIDB9ZnVuY3Rpb24gX19fc3lzX29wZW4ocGF0aCxmbGFncyx2YXJhcmdzKXtpZihFTlZJUk9OTUVOVF9JU19QVEhSRUFEKXJldHVybiBfZW1zY3JpcHRlbl9wcm94eV90b19tYWluX3RocmVhZF9qcygzLDEscGF0aCxmbGFncyx2YXJhcmdzKTtTWVNDQUxMUy52YXJhcmdzPXZhcmFyZ3N9dmFyIHN0cnVjdFJlZ2lzdHJhdGlvbnM9e307ZnVuY3Rpb24gcnVuRGVzdHJ1Y3RvcnMoZGVzdHJ1Y3RvcnMpe3doaWxlKGRlc3RydWN0b3JzLmxlbmd0aCl7dmFyIHB0cj1kZXN0cnVjdG9ycy5wb3AoKTt2YXIgZGVsPWRlc3RydWN0b3JzLnBvcCgpO2RlbChwdHIpfX1mdW5jdGlvbiBzaW1wbGVSZWFkVmFsdWVGcm9tUG9pbnRlcihwb2ludGVyKXtyZXR1cm4gdGhpc1tcImZyb21XaXJlVHlwZVwiXShHUk9XQUJMRV9IRUFQX1UzMigpW3BvaW50ZXI+PjJdKX12YXIgYXdhaXRpbmdEZXBlbmRlbmNpZXM9e307dmFyIHJlZ2lzdGVyZWRUeXBlcz17fTt2YXIgdHlwZURlcGVuZGVuY2llcz17fTt2YXIgY2hhcl8wPTQ4O3ZhciBjaGFyXzk9NTc7ZnVuY3Rpb24gbWFrZUxlZ2FsRnVuY3Rpb25OYW1lKG5hbWUpe2lmKHVuZGVmaW5lZD09PW5hbWUpe3JldHVyblwiX3Vua25vd25cIn1uYW1lPW5hbWUucmVwbGFjZSgvW15hLXpBLVowLTlfXS9nLFwiJFwiKTt2YXIgZj1uYW1lLmNoYXJDb2RlQXQoMCk7aWYoZj49Y2hhcl8wJiZmPD1jaGFyXzkpe3JldHVyblwiX1wiK25hbWV9ZWxzZXtyZXR1cm4gbmFtZX19ZnVuY3Rpb24gY3JlYXRlTmFtZWRGdW5jdGlvbihuYW1lLGJvZHkpe25hbWU9bWFrZUxlZ2FsRnVuY3Rpb25OYW1lKG5hbWUpO3JldHVybiBuZXcgRnVuY3Rpb24oXCJib2R5XCIsXCJyZXR1cm4gZnVuY3Rpb24gXCIrbmFtZStcIigpIHtcXG5cIisnICAgIFwidXNlIHN0cmljdFwiOycrXCIgICAgcmV0dXJuIGJvZHkuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcXG5cIitcIn07XFxuXCIpKGJvZHkpfWZ1bmN0aW9uIGV4dGVuZEVycm9yKGJhc2VFcnJvclR5cGUsZXJyb3JOYW1lKXt2YXIgZXJyb3JDbGFzcz1jcmVhdGVOYW1lZEZ1bmN0aW9uKGVycm9yTmFtZSxmdW5jdGlvbihtZXNzYWdlKXt0aGlzLm5hbWU9ZXJyb3JOYW1lO3RoaXMubWVzc2FnZT1tZXNzYWdlO3ZhciBzdGFjaz1uZXcgRXJyb3IobWVzc2FnZSkuc3RhY2s7aWYoc3RhY2shPT11bmRlZmluZWQpe3RoaXMuc3RhY2s9dGhpcy50b1N0cmluZygpK1wiXFxuXCIrc3RhY2sucmVwbGFjZSgvXkVycm9yKDpbXlxcbl0qKT9cXG4vLFwiXCIpfX0pO2Vycm9yQ2xhc3MucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoYmFzZUVycm9yVHlwZS5wcm90b3R5cGUpO2Vycm9yQ2xhc3MucHJvdG90eXBlLmNvbnN0cnVjdG9yPWVycm9yQ2xhc3M7ZXJyb3JDbGFzcy5wcm90b3R5cGUudG9TdHJpbmc9ZnVuY3Rpb24oKXtpZih0aGlzLm1lc3NhZ2U9PT11bmRlZmluZWQpe3JldHVybiB0aGlzLm5hbWV9ZWxzZXtyZXR1cm4gdGhpcy5uYW1lK1wiOiBcIit0aGlzLm1lc3NhZ2V9fTtyZXR1cm4gZXJyb3JDbGFzc312YXIgSW50ZXJuYWxFcnJvcj11bmRlZmluZWQ7ZnVuY3Rpb24gdGhyb3dJbnRlcm5hbEVycm9yKG1lc3NhZ2Upe3Rocm93IG5ldyBJbnRlcm5hbEVycm9yKG1lc3NhZ2UpfWZ1bmN0aW9uIHdoZW5EZXBlbmRlbnRUeXBlc0FyZVJlc29sdmVkKG15VHlwZXMsZGVwZW5kZW50VHlwZXMsZ2V0VHlwZUNvbnZlcnRlcnMpe215VHlwZXMuZm9yRWFjaChmdW5jdGlvbih0eXBlKXt0eXBlRGVwZW5kZW5jaWVzW3R5cGVdPWRlcGVuZGVudFR5cGVzfSk7ZnVuY3Rpb24gb25Db21wbGV0ZSh0eXBlQ29udmVydGVycyl7dmFyIG15VHlwZUNvbnZlcnRlcnM9Z2V0VHlwZUNvbnZlcnRlcnModHlwZUNvbnZlcnRlcnMpO2lmKG15VHlwZUNvbnZlcnRlcnMubGVuZ3RoIT09bXlUeXBlcy5sZW5ndGgpe3Rocm93SW50ZXJuYWxFcnJvcihcIk1pc21hdGNoZWQgdHlwZSBjb252ZXJ0ZXIgY291bnRcIil9Zm9yKHZhciBpPTA7aTxteVR5cGVzLmxlbmd0aDsrK2kpe3JlZ2lzdGVyVHlwZShteVR5cGVzW2ldLG15VHlwZUNvbnZlcnRlcnNbaV0pfX12YXIgdHlwZUNvbnZlcnRlcnM9bmV3IEFycmF5KGRlcGVuZGVudFR5cGVzLmxlbmd0aCk7dmFyIHVucmVnaXN0ZXJlZFR5cGVzPVtdO3ZhciByZWdpc3RlcmVkPTA7ZGVwZW5kZW50VHlwZXMuZm9yRWFjaChmdW5jdGlvbihkdCxpKXtpZihyZWdpc3RlcmVkVHlwZXMuaGFzT3duUHJvcGVydHkoZHQpKXt0eXBlQ29udmVydGVyc1tpXT1yZWdpc3RlcmVkVHlwZXNbZHRdfWVsc2V7dW5yZWdpc3RlcmVkVHlwZXMucHVzaChkdCk7aWYoIWF3YWl0aW5nRGVwZW5kZW5jaWVzLmhhc093blByb3BlcnR5KGR0KSl7YXdhaXRpbmdEZXBlbmRlbmNpZXNbZHRdPVtdfWF3YWl0aW5nRGVwZW5kZW5jaWVzW2R0XS5wdXNoKGZ1bmN0aW9uKCl7dHlwZUNvbnZlcnRlcnNbaV09cmVnaXN0ZXJlZFR5cGVzW2R0XTsrK3JlZ2lzdGVyZWQ7aWYocmVnaXN0ZXJlZD09PXVucmVnaXN0ZXJlZFR5cGVzLmxlbmd0aCl7b25Db21wbGV0ZSh0eXBlQ29udmVydGVycyl9fSl9fSk7aWYoMD09PXVucmVnaXN0ZXJlZFR5cGVzLmxlbmd0aCl7b25Db21wbGV0ZSh0eXBlQ29udmVydGVycyl9fWZ1bmN0aW9uIF9fZW1iaW5kX2ZpbmFsaXplX3ZhbHVlX29iamVjdChzdHJ1Y3RUeXBlKXt2YXIgcmVnPXN0cnVjdFJlZ2lzdHJhdGlvbnNbc3RydWN0VHlwZV07ZGVsZXRlIHN0cnVjdFJlZ2lzdHJhdGlvbnNbc3RydWN0VHlwZV07dmFyIHJhd0NvbnN0cnVjdG9yPXJlZy5yYXdDb25zdHJ1Y3Rvcjt2YXIgcmF3RGVzdHJ1Y3Rvcj1yZWcucmF3RGVzdHJ1Y3Rvcjt2YXIgZmllbGRSZWNvcmRzPXJlZy5maWVsZHM7dmFyIGZpZWxkVHlwZXM9ZmllbGRSZWNvcmRzLm1hcChmdW5jdGlvbihmaWVsZCl7cmV0dXJuIGZpZWxkLmdldHRlclJldHVyblR5cGV9KS5jb25jYXQoZmllbGRSZWNvcmRzLm1hcChmdW5jdGlvbihmaWVsZCl7cmV0dXJuIGZpZWxkLnNldHRlckFyZ3VtZW50VHlwZX0pKTt3aGVuRGVwZW5kZW50VHlwZXNBcmVSZXNvbHZlZChbc3RydWN0VHlwZV0sZmllbGRUeXBlcyxmdW5jdGlvbihmaWVsZFR5cGVzKXt2YXIgZmllbGRzPXt9O2ZpZWxkUmVjb3Jkcy5mb3JFYWNoKGZ1bmN0aW9uKGZpZWxkLGkpe3ZhciBmaWVsZE5hbWU9ZmllbGQuZmllbGROYW1lO3ZhciBnZXR0ZXJSZXR1cm5UeXBlPWZpZWxkVHlwZXNbaV07dmFyIGdldHRlcj1maWVsZC5nZXR0ZXI7dmFyIGdldHRlckNvbnRleHQ9ZmllbGQuZ2V0dGVyQ29udGV4dDt2YXIgc2V0dGVyQXJndW1lbnRUeXBlPWZpZWxkVHlwZXNbaStmaWVsZFJlY29yZHMubGVuZ3RoXTt2YXIgc2V0dGVyPWZpZWxkLnNldHRlcjt2YXIgc2V0dGVyQ29udGV4dD1maWVsZC5zZXR0ZXJDb250ZXh0O2ZpZWxkc1tmaWVsZE5hbWVdPXtyZWFkOmZ1bmN0aW9uKHB0cil7cmV0dXJuIGdldHRlclJldHVyblR5cGVbXCJmcm9tV2lyZVR5cGVcIl0oZ2V0dGVyKGdldHRlckNvbnRleHQscHRyKSl9LHdyaXRlOmZ1bmN0aW9uKHB0cixvKXt2YXIgZGVzdHJ1Y3RvcnM9W107c2V0dGVyKHNldHRlckNvbnRleHQscHRyLHNldHRlckFyZ3VtZW50VHlwZVtcInRvV2lyZVR5cGVcIl0oZGVzdHJ1Y3RvcnMsbykpO3J1bkRlc3RydWN0b3JzKGRlc3RydWN0b3JzKX19fSk7cmV0dXJuW3tuYW1lOnJlZy5uYW1lLFwiZnJvbVdpcmVUeXBlXCI6ZnVuY3Rpb24ocHRyKXt2YXIgcnY9e307Zm9yKHZhciBpIGluIGZpZWxkcyl7cnZbaV09ZmllbGRzW2ldLnJlYWQocHRyKX1yYXdEZXN0cnVjdG9yKHB0cik7cmV0dXJuIHJ2fSxcInRvV2lyZVR5cGVcIjpmdW5jdGlvbihkZXN0cnVjdG9ycyxvKXtmb3IodmFyIGZpZWxkTmFtZSBpbiBmaWVsZHMpe2lmKCEoZmllbGROYW1lIGluIG8pKXt0aHJvdyBuZXcgVHlwZUVycm9yKCdNaXNzaW5nIGZpZWxkOiAgXCInK2ZpZWxkTmFtZSsnXCInKX19dmFyIHB0cj1yYXdDb25zdHJ1Y3RvcigpO2ZvcihmaWVsZE5hbWUgaW4gZmllbGRzKXtmaWVsZHNbZmllbGROYW1lXS53cml0ZShwdHIsb1tmaWVsZE5hbWVdKX1pZihkZXN0cnVjdG9ycyE9PW51bGwpe2Rlc3RydWN0b3JzLnB1c2gocmF3RGVzdHJ1Y3RvcixwdHIpfXJldHVybiBwdHJ9LFwiYXJnUGFja0FkdmFuY2VcIjo4LFwicmVhZFZhbHVlRnJvbVBvaW50ZXJcIjpzaW1wbGVSZWFkVmFsdWVGcm9tUG9pbnRlcixkZXN0cnVjdG9yRnVuY3Rpb246cmF3RGVzdHJ1Y3Rvcn1dfSl9ZnVuY3Rpb24gX19lbWJpbmRfcmVnaXN0ZXJfYmlnaW50KHByaW1pdGl2ZVR5cGUsbmFtZSxzaXplLG1pblJhbmdlLG1heFJhbmdlKXt9ZnVuY3Rpb24gZ2V0U2hpZnRGcm9tU2l6ZShzaXplKXtzd2l0Y2goc2l6ZSl7Y2FzZSAxOnJldHVybiAwO2Nhc2UgMjpyZXR1cm4gMTtjYXNlIDQ6cmV0dXJuIDI7Y2FzZSA4OnJldHVybiAzO2RlZmF1bHQ6dGhyb3cgbmV3IFR5cGVFcnJvcihcIlVua25vd24gdHlwZSBzaXplOiBcIitzaXplKX19ZnVuY3Rpb24gZW1iaW5kX2luaXRfY2hhckNvZGVzKCl7dmFyIGNvZGVzPW5ldyBBcnJheSgyNTYpO2Zvcih2YXIgaT0wO2k8MjU2OysraSl7Y29kZXNbaV09U3RyaW5nLmZyb21DaGFyQ29kZShpKX1lbWJpbmRfY2hhckNvZGVzPWNvZGVzfXZhciBlbWJpbmRfY2hhckNvZGVzPXVuZGVmaW5lZDtmdW5jdGlvbiByZWFkTGF0aW4xU3RyaW5nKHB0cil7dmFyIHJldD1cIlwiO3ZhciBjPXB0cjt3aGlsZShHUk9XQUJMRV9IRUFQX1U4KClbY10pe3JldCs9ZW1iaW5kX2NoYXJDb2Rlc1tHUk9XQUJMRV9IRUFQX1U4KClbYysrXV19cmV0dXJuIHJldH12YXIgQmluZGluZ0Vycm9yPXVuZGVmaW5lZDtmdW5jdGlvbiB0aHJvd0JpbmRpbmdFcnJvcihtZXNzYWdlKXt0aHJvdyBuZXcgQmluZGluZ0Vycm9yKG1lc3NhZ2UpfWZ1bmN0aW9uIHJlZ2lzdGVyVHlwZShyYXdUeXBlLHJlZ2lzdGVyZWRJbnN0YW5jZSxvcHRpb25zKXtvcHRpb25zPW9wdGlvbnN8fHt9O2lmKCEoXCJhcmdQYWNrQWR2YW5jZVwiaW4gcmVnaXN0ZXJlZEluc3RhbmNlKSl7dGhyb3cgbmV3IFR5cGVFcnJvcihcInJlZ2lzdGVyVHlwZSByZWdpc3RlcmVkSW5zdGFuY2UgcmVxdWlyZXMgYXJnUGFja0FkdmFuY2VcIil9dmFyIG5hbWU9cmVnaXN0ZXJlZEluc3RhbmNlLm5hbWU7aWYoIXJhd1R5cGUpe3Rocm93QmluZGluZ0Vycm9yKCd0eXBlIFwiJytuYW1lKydcIiBtdXN0IGhhdmUgYSBwb3NpdGl2ZSBpbnRlZ2VyIHR5cGVpZCBwb2ludGVyJyl9aWYocmVnaXN0ZXJlZFR5cGVzLmhhc093blByb3BlcnR5KHJhd1R5cGUpKXtpZihvcHRpb25zLmlnbm9yZUR1cGxpY2F0ZVJlZ2lzdHJhdGlvbnMpe3JldHVybn1lbHNle3Rocm93QmluZGluZ0Vycm9yKFwiQ2Fubm90IHJlZ2lzdGVyIHR5cGUgJ1wiK25hbWUrXCInIHR3aWNlXCIpfX1yZWdpc3RlcmVkVHlwZXNbcmF3VHlwZV09cmVnaXN0ZXJlZEluc3RhbmNlO2RlbGV0ZSB0eXBlRGVwZW5kZW5jaWVzW3Jhd1R5cGVdO2lmKGF3YWl0aW5nRGVwZW5kZW5jaWVzLmhhc093blByb3BlcnR5KHJhd1R5cGUpKXt2YXIgY2FsbGJhY2tzPWF3YWl0aW5nRGVwZW5kZW5jaWVzW3Jhd1R5cGVdO2RlbGV0ZSBhd2FpdGluZ0RlcGVuZGVuY2llc1tyYXdUeXBlXTtjYWxsYmFja3MuZm9yRWFjaChmdW5jdGlvbihjYil7Y2IoKX0pfX1mdW5jdGlvbiBfX2VtYmluZF9yZWdpc3Rlcl9ib29sKHJhd1R5cGUsbmFtZSxzaXplLHRydWVWYWx1ZSxmYWxzZVZhbHVlKXt2YXIgc2hpZnQ9Z2V0U2hpZnRGcm9tU2l6ZShzaXplKTtuYW1lPXJlYWRMYXRpbjFTdHJpbmcobmFtZSk7cmVnaXN0ZXJUeXBlKHJhd1R5cGUse25hbWU6bmFtZSxcImZyb21XaXJlVHlwZVwiOmZ1bmN0aW9uKHd0KXtyZXR1cm4hIXd0fSxcInRvV2lyZVR5cGVcIjpmdW5jdGlvbihkZXN0cnVjdG9ycyxvKXtyZXR1cm4gbz90cnVlVmFsdWU6ZmFsc2VWYWx1ZX0sXCJhcmdQYWNrQWR2YW5jZVwiOjgsXCJyZWFkVmFsdWVGcm9tUG9pbnRlclwiOmZ1bmN0aW9uKHBvaW50ZXIpe3ZhciBoZWFwO2lmKHNpemU9PT0xKXtoZWFwPUdST1dBQkxFX0hFQVBfSTgoKX1lbHNlIGlmKHNpemU9PT0yKXtoZWFwPUdST1dBQkxFX0hFQVBfSTE2KCl9ZWxzZSBpZihzaXplPT09NCl7aGVhcD1HUk9XQUJMRV9IRUFQX0kzMigpfWVsc2V7dGhyb3cgbmV3IFR5cGVFcnJvcihcIlVua25vd24gYm9vbGVhbiB0eXBlIHNpemU6IFwiK25hbWUpfXJldHVybiB0aGlzW1wiZnJvbVdpcmVUeXBlXCJdKGhlYXBbcG9pbnRlcj4+c2hpZnRdKX0sZGVzdHJ1Y3RvckZ1bmN0aW9uOm51bGx9KX12YXIgZW12YWxfZnJlZV9saXN0PVtdO3ZhciBlbXZhbF9oYW5kbGVfYXJyYXk9W3t9LHt2YWx1ZTp1bmRlZmluZWR9LHt2YWx1ZTpudWxsfSx7dmFsdWU6dHJ1ZX0se3ZhbHVlOmZhbHNlfV07ZnVuY3Rpb24gX19lbXZhbF9kZWNyZWYoaGFuZGxlKXtpZihoYW5kbGU+NCYmMD09PS0tZW12YWxfaGFuZGxlX2FycmF5W2hhbmRsZV0ucmVmY291bnQpe2VtdmFsX2hhbmRsZV9hcnJheVtoYW5kbGVdPXVuZGVmaW5lZDtlbXZhbF9mcmVlX2xpc3QucHVzaChoYW5kbGUpfX1mdW5jdGlvbiBjb3VudF9lbXZhbF9oYW5kbGVzKCl7dmFyIGNvdW50PTA7Zm9yKHZhciBpPTU7aTxlbXZhbF9oYW5kbGVfYXJyYXkubGVuZ3RoOysraSl7aWYoZW12YWxfaGFuZGxlX2FycmF5W2ldIT09dW5kZWZpbmVkKXsrK2NvdW50fX1yZXR1cm4gY291bnR9ZnVuY3Rpb24gZ2V0X2ZpcnN0X2VtdmFsKCl7Zm9yKHZhciBpPTU7aTxlbXZhbF9oYW5kbGVfYXJyYXkubGVuZ3RoOysraSl7aWYoZW12YWxfaGFuZGxlX2FycmF5W2ldIT09dW5kZWZpbmVkKXtyZXR1cm4gZW12YWxfaGFuZGxlX2FycmF5W2ldfX1yZXR1cm4gbnVsbH1mdW5jdGlvbiBpbml0X2VtdmFsKCl7TW9kdWxlW1wiY291bnRfZW12YWxfaGFuZGxlc1wiXT1jb3VudF9lbXZhbF9oYW5kbGVzO01vZHVsZVtcImdldF9maXJzdF9lbXZhbFwiXT1nZXRfZmlyc3RfZW12YWx9ZnVuY3Rpb24gX19lbXZhbF9yZWdpc3Rlcih2YWx1ZSl7c3dpdGNoKHZhbHVlKXtjYXNlIHVuZGVmaW5lZDp7cmV0dXJuIDF9Y2FzZSBudWxsOntyZXR1cm4gMn1jYXNlIHRydWU6e3JldHVybiAzfWNhc2UgZmFsc2U6e3JldHVybiA0fWRlZmF1bHQ6e3ZhciBoYW5kbGU9ZW12YWxfZnJlZV9saXN0Lmxlbmd0aD9lbXZhbF9mcmVlX2xpc3QucG9wKCk6ZW12YWxfaGFuZGxlX2FycmF5Lmxlbmd0aDtlbXZhbF9oYW5kbGVfYXJyYXlbaGFuZGxlXT17cmVmY291bnQ6MSx2YWx1ZTp2YWx1ZX07cmV0dXJuIGhhbmRsZX19fWZ1bmN0aW9uIF9fZW1iaW5kX3JlZ2lzdGVyX2VtdmFsKHJhd1R5cGUsbmFtZSl7bmFtZT1yZWFkTGF0aW4xU3RyaW5nKG5hbWUpO3JlZ2lzdGVyVHlwZShyYXdUeXBlLHtuYW1lOm5hbWUsXCJmcm9tV2lyZVR5cGVcIjpmdW5jdGlvbihoYW5kbGUpe3ZhciBydj1lbXZhbF9oYW5kbGVfYXJyYXlbaGFuZGxlXS52YWx1ZTtfX2VtdmFsX2RlY3JlZihoYW5kbGUpO3JldHVybiBydn0sXCJ0b1dpcmVUeXBlXCI6ZnVuY3Rpb24oZGVzdHJ1Y3RvcnMsdmFsdWUpe3JldHVybiBfX2VtdmFsX3JlZ2lzdGVyKHZhbHVlKX0sXCJhcmdQYWNrQWR2YW5jZVwiOjgsXCJyZWFkVmFsdWVGcm9tUG9pbnRlclwiOnNpbXBsZVJlYWRWYWx1ZUZyb21Qb2ludGVyLGRlc3RydWN0b3JGdW5jdGlvbjpudWxsfSl9ZnVuY3Rpb24gX2VtYmluZF9yZXByKHYpe2lmKHY9PT1udWxsKXtyZXR1cm5cIm51bGxcIn12YXIgdD10eXBlb2YgdjtpZih0PT09XCJvYmplY3RcInx8dD09PVwiYXJyYXlcInx8dD09PVwiZnVuY3Rpb25cIil7cmV0dXJuIHYudG9TdHJpbmcoKX1lbHNle3JldHVyblwiXCIrdn19ZnVuY3Rpb24gZmxvYXRSZWFkVmFsdWVGcm9tUG9pbnRlcihuYW1lLHNoaWZ0KXtzd2l0Y2goc2hpZnQpe2Nhc2UgMjpyZXR1cm4gZnVuY3Rpb24ocG9pbnRlcil7cmV0dXJuIHRoaXNbXCJmcm9tV2lyZVR5cGVcIl0oR1JPV0FCTEVfSEVBUF9GMzIoKVtwb2ludGVyPj4yXSl9O2Nhc2UgMzpyZXR1cm4gZnVuY3Rpb24ocG9pbnRlcil7cmV0dXJuIHRoaXNbXCJmcm9tV2lyZVR5cGVcIl0oR1JPV0FCTEVfSEVBUF9GNjQoKVtwb2ludGVyPj4zXSl9O2RlZmF1bHQ6dGhyb3cgbmV3IFR5cGVFcnJvcihcIlVua25vd24gZmxvYXQgdHlwZTogXCIrbmFtZSl9fWZ1bmN0aW9uIF9fZW1iaW5kX3JlZ2lzdGVyX2Zsb2F0KHJhd1R5cGUsbmFtZSxzaXplKXt2YXIgc2hpZnQ9Z2V0U2hpZnRGcm9tU2l6ZShzaXplKTtuYW1lPXJlYWRMYXRpbjFTdHJpbmcobmFtZSk7cmVnaXN0ZXJUeXBlKHJhd1R5cGUse25hbWU6bmFtZSxcImZyb21XaXJlVHlwZVwiOmZ1bmN0aW9uKHZhbHVlKXtyZXR1cm4gdmFsdWV9LFwidG9XaXJlVHlwZVwiOmZ1bmN0aW9uKGRlc3RydWN0b3JzLHZhbHVlKXtpZih0eXBlb2YgdmFsdWUhPT1cIm51bWJlclwiJiZ0eXBlb2YgdmFsdWUhPT1cImJvb2xlYW5cIil7dGhyb3cgbmV3IFR5cGVFcnJvcignQ2Fubm90IGNvbnZlcnQgXCInK19lbWJpbmRfcmVwcih2YWx1ZSkrJ1wiIHRvICcrdGhpcy5uYW1lKX1yZXR1cm4gdmFsdWV9LFwiYXJnUGFja0FkdmFuY2VcIjo4LFwicmVhZFZhbHVlRnJvbVBvaW50ZXJcIjpmbG9hdFJlYWRWYWx1ZUZyb21Qb2ludGVyKG5hbWUsc2hpZnQpLGRlc3RydWN0b3JGdW5jdGlvbjpudWxsfSl9ZnVuY3Rpb24gbmV3Xyhjb25zdHJ1Y3Rvcixhcmd1bWVudExpc3Qpe2lmKCEoY29uc3RydWN0b3IgaW5zdGFuY2VvZiBGdW5jdGlvbikpe3Rocm93IG5ldyBUeXBlRXJyb3IoXCJuZXdfIGNhbGxlZCB3aXRoIGNvbnN0cnVjdG9yIHR5cGUgXCIrdHlwZW9mIGNvbnN0cnVjdG9yK1wiIHdoaWNoIGlzIG5vdCBhIGZ1bmN0aW9uXCIpfXZhciBkdW1teT1jcmVhdGVOYW1lZEZ1bmN0aW9uKGNvbnN0cnVjdG9yLm5hbWV8fFwidW5rbm93bkZ1bmN0aW9uTmFtZVwiLGZ1bmN0aW9uKCl7fSk7ZHVtbXkucHJvdG90eXBlPWNvbnN0cnVjdG9yLnByb3RvdHlwZTt2YXIgb2JqPW5ldyBkdW1teTt2YXIgcj1jb25zdHJ1Y3Rvci5hcHBseShvYmosYXJndW1lbnRMaXN0KTtyZXR1cm4gciBpbnN0YW5jZW9mIE9iamVjdD9yOm9ian1mdW5jdGlvbiBjcmFmdEludm9rZXJGdW5jdGlvbihodW1hbk5hbWUsYXJnVHlwZXMsY2xhc3NUeXBlLGNwcEludm9rZXJGdW5jLGNwcFRhcmdldEZ1bmMpe3ZhciBhcmdDb3VudD1hcmdUeXBlcy5sZW5ndGg7aWYoYXJnQ291bnQ8Mil7dGhyb3dCaW5kaW5nRXJyb3IoXCJhcmdUeXBlcyBhcnJheSBzaXplIG1pc21hdGNoISBNdXN0IGF0IGxlYXN0IGdldCByZXR1cm4gdmFsdWUgYW5kICd0aGlzJyB0eXBlcyFcIil9dmFyIGlzQ2xhc3NNZXRob2RGdW5jPWFyZ1R5cGVzWzFdIT09bnVsbCYmY2xhc3NUeXBlIT09bnVsbDt2YXIgbmVlZHNEZXN0cnVjdG9yU3RhY2s9ZmFsc2U7Zm9yKHZhciBpPTE7aTxhcmdUeXBlcy5sZW5ndGg7KytpKXtpZihhcmdUeXBlc1tpXSE9PW51bGwmJmFyZ1R5cGVzW2ldLmRlc3RydWN0b3JGdW5jdGlvbj09PXVuZGVmaW5lZCl7bmVlZHNEZXN0cnVjdG9yU3RhY2s9dHJ1ZTticmVha319dmFyIHJldHVybnM9YXJnVHlwZXNbMF0ubmFtZSE9PVwidm9pZFwiO3ZhciBhcmdzTGlzdD1cIlwiO3ZhciBhcmdzTGlzdFdpcmVkPVwiXCI7Zm9yKHZhciBpPTA7aTxhcmdDb3VudC0yOysraSl7YXJnc0xpc3QrPShpIT09MD9cIiwgXCI6XCJcIikrXCJhcmdcIitpO2FyZ3NMaXN0V2lyZWQrPShpIT09MD9cIiwgXCI6XCJcIikrXCJhcmdcIitpK1wiV2lyZWRcIn12YXIgaW52b2tlckZuQm9keT1cInJldHVybiBmdW5jdGlvbiBcIittYWtlTGVnYWxGdW5jdGlvbk5hbWUoaHVtYW5OYW1lKStcIihcIithcmdzTGlzdCtcIikge1xcblwiK1wiaWYgKGFyZ3VtZW50cy5sZW5ndGggIT09IFwiKyhhcmdDb3VudC0yKStcIikge1xcblwiK1widGhyb3dCaW5kaW5nRXJyb3IoJ2Z1bmN0aW9uIFwiK2h1bWFuTmFtZStcIiBjYWxsZWQgd2l0aCAnICsgYXJndW1lbnRzLmxlbmd0aCArICcgYXJndW1lbnRzLCBleHBlY3RlZCBcIisoYXJnQ291bnQtMikrXCIgYXJncyEnKTtcXG5cIitcIn1cXG5cIjtpZihuZWVkc0Rlc3RydWN0b3JTdGFjayl7aW52b2tlckZuQm9keSs9XCJ2YXIgZGVzdHJ1Y3RvcnMgPSBbXTtcXG5cIn12YXIgZHRvclN0YWNrPW5lZWRzRGVzdHJ1Y3RvclN0YWNrP1wiZGVzdHJ1Y3RvcnNcIjpcIm51bGxcIjt2YXIgYXJnczE9W1widGhyb3dCaW5kaW5nRXJyb3JcIixcImludm9rZXJcIixcImZuXCIsXCJydW5EZXN0cnVjdG9yc1wiLFwicmV0VHlwZVwiLFwiY2xhc3NQYXJhbVwiXTt2YXIgYXJnczI9W3Rocm93QmluZGluZ0Vycm9yLGNwcEludm9rZXJGdW5jLGNwcFRhcmdldEZ1bmMscnVuRGVzdHJ1Y3RvcnMsYXJnVHlwZXNbMF0sYXJnVHlwZXNbMV1dO2lmKGlzQ2xhc3NNZXRob2RGdW5jKXtpbnZva2VyRm5Cb2R5Kz1cInZhciB0aGlzV2lyZWQgPSBjbGFzc1BhcmFtLnRvV2lyZVR5cGUoXCIrZHRvclN0YWNrK1wiLCB0aGlzKTtcXG5cIn1mb3IodmFyIGk9MDtpPGFyZ0NvdW50LTI7KytpKXtpbnZva2VyRm5Cb2R5Kz1cInZhciBhcmdcIitpK1wiV2lyZWQgPSBhcmdUeXBlXCIraStcIi50b1dpcmVUeXBlKFwiK2R0b3JTdGFjaytcIiwgYXJnXCIraStcIik7IC8vIFwiK2FyZ1R5cGVzW2krMl0ubmFtZStcIlxcblwiO2FyZ3MxLnB1c2goXCJhcmdUeXBlXCIraSk7YXJnczIucHVzaChhcmdUeXBlc1tpKzJdKX1pZihpc0NsYXNzTWV0aG9kRnVuYyl7YXJnc0xpc3RXaXJlZD1cInRoaXNXaXJlZFwiKyhhcmdzTGlzdFdpcmVkLmxlbmd0aD4wP1wiLCBcIjpcIlwiKSthcmdzTGlzdFdpcmVkfWludm9rZXJGbkJvZHkrPShyZXR1cm5zP1widmFyIHJ2ID0gXCI6XCJcIikrXCJpbnZva2VyKGZuXCIrKGFyZ3NMaXN0V2lyZWQubGVuZ3RoPjA/XCIsIFwiOlwiXCIpK2FyZ3NMaXN0V2lyZWQrXCIpO1xcblwiO2lmKG5lZWRzRGVzdHJ1Y3RvclN0YWNrKXtpbnZva2VyRm5Cb2R5Kz1cInJ1bkRlc3RydWN0b3JzKGRlc3RydWN0b3JzKTtcXG5cIn1lbHNle2Zvcih2YXIgaT1pc0NsYXNzTWV0aG9kRnVuYz8xOjI7aTxhcmdUeXBlcy5sZW5ndGg7KytpKXt2YXIgcGFyYW1OYW1lPWk9PT0xP1widGhpc1dpcmVkXCI6XCJhcmdcIisoaS0yKStcIldpcmVkXCI7aWYoYXJnVHlwZXNbaV0uZGVzdHJ1Y3RvckZ1bmN0aW9uIT09bnVsbCl7aW52b2tlckZuQm9keSs9cGFyYW1OYW1lK1wiX2R0b3IoXCIrcGFyYW1OYW1lK1wiKTsgLy8gXCIrYXJnVHlwZXNbaV0ubmFtZStcIlxcblwiO2FyZ3MxLnB1c2gocGFyYW1OYW1lK1wiX2R0b3JcIik7YXJnczIucHVzaChhcmdUeXBlc1tpXS5kZXN0cnVjdG9yRnVuY3Rpb24pfX19aWYocmV0dXJucyl7aW52b2tlckZuQm9keSs9XCJ2YXIgcmV0ID0gcmV0VHlwZS5mcm9tV2lyZVR5cGUocnYpO1xcblwiK1wicmV0dXJuIHJldDtcXG5cIn1lbHNle31pbnZva2VyRm5Cb2R5Kz1cIn1cXG5cIjthcmdzMS5wdXNoKGludm9rZXJGbkJvZHkpO3ZhciBpbnZva2VyRnVuY3Rpb249bmV3XyhGdW5jdGlvbixhcmdzMSkuYXBwbHkobnVsbCxhcmdzMik7cmV0dXJuIGludm9rZXJGdW5jdGlvbn1mdW5jdGlvbiBlbnN1cmVPdmVybG9hZFRhYmxlKHByb3RvLG1ldGhvZE5hbWUsaHVtYW5OYW1lKXtpZih1bmRlZmluZWQ9PT1wcm90b1ttZXRob2ROYW1lXS5vdmVybG9hZFRhYmxlKXt2YXIgcHJldkZ1bmM9cHJvdG9bbWV0aG9kTmFtZV07cHJvdG9bbWV0aG9kTmFtZV09ZnVuY3Rpb24oKXtpZighcHJvdG9bbWV0aG9kTmFtZV0ub3ZlcmxvYWRUYWJsZS5oYXNPd25Qcm9wZXJ0eShhcmd1bWVudHMubGVuZ3RoKSl7dGhyb3dCaW5kaW5nRXJyb3IoXCJGdW5jdGlvbiAnXCIraHVtYW5OYW1lK1wiJyBjYWxsZWQgd2l0aCBhbiBpbnZhbGlkIG51bWJlciBvZiBhcmd1bWVudHMgKFwiK2FyZ3VtZW50cy5sZW5ndGgrXCIpIC0gZXhwZWN0cyBvbmUgb2YgKFwiK3Byb3RvW21ldGhvZE5hbWVdLm92ZXJsb2FkVGFibGUrXCIpIVwiKX1yZXR1cm4gcHJvdG9bbWV0aG9kTmFtZV0ub3ZlcmxvYWRUYWJsZVthcmd1bWVudHMubGVuZ3RoXS5hcHBseSh0aGlzLGFyZ3VtZW50cyl9O3Byb3RvW21ldGhvZE5hbWVdLm92ZXJsb2FkVGFibGU9W107cHJvdG9bbWV0aG9kTmFtZV0ub3ZlcmxvYWRUYWJsZVtwcmV2RnVuYy5hcmdDb3VudF09cHJldkZ1bmN9fWZ1bmN0aW9uIGV4cG9zZVB1YmxpY1N5bWJvbChuYW1lLHZhbHVlLG51bUFyZ3VtZW50cyl7aWYoTW9kdWxlLmhhc093blByb3BlcnR5KG5hbWUpKXtpZih1bmRlZmluZWQ9PT1udW1Bcmd1bWVudHN8fHVuZGVmaW5lZCE9PU1vZHVsZVtuYW1lXS5vdmVybG9hZFRhYmxlJiZ1bmRlZmluZWQhPT1Nb2R1bGVbbmFtZV0ub3ZlcmxvYWRUYWJsZVtudW1Bcmd1bWVudHNdKXt0aHJvd0JpbmRpbmdFcnJvcihcIkNhbm5vdCByZWdpc3RlciBwdWJsaWMgbmFtZSAnXCIrbmFtZStcIicgdHdpY2VcIil9ZW5zdXJlT3ZlcmxvYWRUYWJsZShNb2R1bGUsbmFtZSxuYW1lKTtpZihNb2R1bGUuaGFzT3duUHJvcGVydHkobnVtQXJndW1lbnRzKSl7dGhyb3dCaW5kaW5nRXJyb3IoXCJDYW5ub3QgcmVnaXN0ZXIgbXVsdGlwbGUgb3ZlcmxvYWRzIG9mIGEgZnVuY3Rpb24gd2l0aCB0aGUgc2FtZSBudW1iZXIgb2YgYXJndW1lbnRzIChcIitudW1Bcmd1bWVudHMrXCIpIVwiKX1Nb2R1bGVbbmFtZV0ub3ZlcmxvYWRUYWJsZVtudW1Bcmd1bWVudHNdPXZhbHVlfWVsc2V7TW9kdWxlW25hbWVdPXZhbHVlO2lmKHVuZGVmaW5lZCE9PW51bUFyZ3VtZW50cyl7TW9kdWxlW25hbWVdLm51bUFyZ3VtZW50cz1udW1Bcmd1bWVudHN9fX1mdW5jdGlvbiBoZWFwMzJWZWN0b3JUb0FycmF5KGNvdW50LGZpcnN0RWxlbWVudCl7dmFyIGFycmF5PVtdO2Zvcih2YXIgaT0wO2k8Y291bnQ7aSsrKXthcnJheS5wdXNoKEdST1dBQkxFX0hFQVBfSTMyKClbKGZpcnN0RWxlbWVudD4+MikraV0pfXJldHVybiBhcnJheX1mdW5jdGlvbiByZXBsYWNlUHVibGljU3ltYm9sKG5hbWUsdmFsdWUsbnVtQXJndW1lbnRzKXtpZighTW9kdWxlLmhhc093blByb3BlcnR5KG5hbWUpKXt0aHJvd0ludGVybmFsRXJyb3IoXCJSZXBsYWNpbmcgbm9uZXhpc3RhbnQgcHVibGljIHN5bWJvbFwiKX1pZih1bmRlZmluZWQhPT1Nb2R1bGVbbmFtZV0ub3ZlcmxvYWRUYWJsZSYmdW5kZWZpbmVkIT09bnVtQXJndW1lbnRzKXtNb2R1bGVbbmFtZV0ub3ZlcmxvYWRUYWJsZVtudW1Bcmd1bWVudHNdPXZhbHVlfWVsc2V7TW9kdWxlW25hbWVdPXZhbHVlO01vZHVsZVtuYW1lXS5hcmdDb3VudD1udW1Bcmd1bWVudHN9fWZ1bmN0aW9uIGR5bkNhbGxMZWdhY3koc2lnLHB0cixhcmdzKXt2YXIgZj1Nb2R1bGVbXCJkeW5DYWxsX1wiK3NpZ107cmV0dXJuIGFyZ3MmJmFyZ3MubGVuZ3RoP2YuYXBwbHkobnVsbCxbcHRyXS5jb25jYXQoYXJncykpOmYuY2FsbChudWxsLHB0cil9ZnVuY3Rpb24gZHluQ2FsbChzaWcscHRyLGFyZ3Mpe2lmKHNpZy5pbmNsdWRlcyhcImpcIikpe3JldHVybiBkeW5DYWxsTGVnYWN5KHNpZyxwdHIsYXJncyl9cmV0dXJuIHdhc21UYWJsZS5nZXQocHRyKS5hcHBseShudWxsLGFyZ3MpfWZ1bmN0aW9uIGdldER5bkNhbGxlcihzaWcscHRyKXt2YXIgYXJnQ2FjaGU9W107cmV0dXJuIGZ1bmN0aW9uKCl7YXJnQ2FjaGUubGVuZ3RoPWFyZ3VtZW50cy5sZW5ndGg7Zm9yKHZhciBpPTA7aTxhcmd1bWVudHMubGVuZ3RoO2krKyl7YXJnQ2FjaGVbaV09YXJndW1lbnRzW2ldfXJldHVybiBkeW5DYWxsKHNpZyxwdHIsYXJnQ2FjaGUpfX1mdW5jdGlvbiBlbWJpbmRfX3JlcXVpcmVGdW5jdGlvbihzaWduYXR1cmUscmF3RnVuY3Rpb24pe3NpZ25hdHVyZT1yZWFkTGF0aW4xU3RyaW5nKHNpZ25hdHVyZSk7ZnVuY3Rpb24gbWFrZUR5bkNhbGxlcigpe2lmKHNpZ25hdHVyZS5pbmNsdWRlcyhcImpcIikpe3JldHVybiBnZXREeW5DYWxsZXIoc2lnbmF0dXJlLHJhd0Z1bmN0aW9uKX1yZXR1cm4gd2FzbVRhYmxlLmdldChyYXdGdW5jdGlvbil9dmFyIGZwPW1ha2VEeW5DYWxsZXIoKTtpZih0eXBlb2YgZnAhPT1cImZ1bmN0aW9uXCIpe3Rocm93QmluZGluZ0Vycm9yKFwidW5rbm93biBmdW5jdGlvbiBwb2ludGVyIHdpdGggc2lnbmF0dXJlIFwiK3NpZ25hdHVyZStcIjogXCIrcmF3RnVuY3Rpb24pfXJldHVybiBmcH12YXIgVW5ib3VuZFR5cGVFcnJvcj11bmRlZmluZWQ7ZnVuY3Rpb24gZ2V0VHlwZU5hbWUodHlwZSl7dmFyIHB0cj1fX19nZXRUeXBlTmFtZSh0eXBlKTt2YXIgcnY9cmVhZExhdGluMVN0cmluZyhwdHIpO19mcmVlKHB0cik7cmV0dXJuIHJ2fWZ1bmN0aW9uIHRocm93VW5ib3VuZFR5cGVFcnJvcihtZXNzYWdlLHR5cGVzKXt2YXIgdW5ib3VuZFR5cGVzPVtdO3ZhciBzZWVuPXt9O2Z1bmN0aW9uIHZpc2l0KHR5cGUpe2lmKHNlZW5bdHlwZV0pe3JldHVybn1pZihyZWdpc3RlcmVkVHlwZXNbdHlwZV0pe3JldHVybn1pZih0eXBlRGVwZW5kZW5jaWVzW3R5cGVdKXt0eXBlRGVwZW5kZW5jaWVzW3R5cGVdLmZvckVhY2godmlzaXQpO3JldHVybn11bmJvdW5kVHlwZXMucHVzaCh0eXBlKTtzZWVuW3R5cGVdPXRydWV9dHlwZXMuZm9yRWFjaCh2aXNpdCk7dGhyb3cgbmV3IFVuYm91bmRUeXBlRXJyb3IobWVzc2FnZStcIjogXCIrdW5ib3VuZFR5cGVzLm1hcChnZXRUeXBlTmFtZSkuam9pbihbXCIsIFwiXSkpfWZ1bmN0aW9uIF9fZW1iaW5kX3JlZ2lzdGVyX2Z1bmN0aW9uKG5hbWUsYXJnQ291bnQscmF3QXJnVHlwZXNBZGRyLHNpZ25hdHVyZSxyYXdJbnZva2VyLGZuKXt2YXIgYXJnVHlwZXM9aGVhcDMyVmVjdG9yVG9BcnJheShhcmdDb3VudCxyYXdBcmdUeXBlc0FkZHIpO25hbWU9cmVhZExhdGluMVN0cmluZyhuYW1lKTtyYXdJbnZva2VyPWVtYmluZF9fcmVxdWlyZUZ1bmN0aW9uKHNpZ25hdHVyZSxyYXdJbnZva2VyKTtleHBvc2VQdWJsaWNTeW1ib2wobmFtZSxmdW5jdGlvbigpe3Rocm93VW5ib3VuZFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIFwiK25hbWUrXCIgZHVlIHRvIHVuYm91bmQgdHlwZXNcIixhcmdUeXBlcyl9LGFyZ0NvdW50LTEpO3doZW5EZXBlbmRlbnRUeXBlc0FyZVJlc29sdmVkKFtdLGFyZ1R5cGVzLGZ1bmN0aW9uKGFyZ1R5cGVzKXt2YXIgaW52b2tlckFyZ3NBcnJheT1bYXJnVHlwZXNbMF0sbnVsbF0uY29uY2F0KGFyZ1R5cGVzLnNsaWNlKDEpKTtyZXBsYWNlUHVibGljU3ltYm9sKG5hbWUsY3JhZnRJbnZva2VyRnVuY3Rpb24obmFtZSxpbnZva2VyQXJnc0FycmF5LG51bGwscmF3SW52b2tlcixmbiksYXJnQ291bnQtMSk7cmV0dXJuW119KX1mdW5jdGlvbiBpbnRlZ2VyUmVhZFZhbHVlRnJvbVBvaW50ZXIobmFtZSxzaGlmdCxzaWduZWQpe3N3aXRjaChzaGlmdCl7Y2FzZSAwOnJldHVybiBzaWduZWQ/ZnVuY3Rpb24gcmVhZFM4RnJvbVBvaW50ZXIocG9pbnRlcil7cmV0dXJuIEdST1dBQkxFX0hFQVBfSTgoKVtwb2ludGVyXX06ZnVuY3Rpb24gcmVhZFU4RnJvbVBvaW50ZXIocG9pbnRlcil7cmV0dXJuIEdST1dBQkxFX0hFQVBfVTgoKVtwb2ludGVyXX07Y2FzZSAxOnJldHVybiBzaWduZWQ/ZnVuY3Rpb24gcmVhZFMxNkZyb21Qb2ludGVyKHBvaW50ZXIpe3JldHVybiBHUk9XQUJMRV9IRUFQX0kxNigpW3BvaW50ZXI+PjFdfTpmdW5jdGlvbiByZWFkVTE2RnJvbVBvaW50ZXIocG9pbnRlcil7cmV0dXJuIEdST1dBQkxFX0hFQVBfVTE2KClbcG9pbnRlcj4+MV19O2Nhc2UgMjpyZXR1cm4gc2lnbmVkP2Z1bmN0aW9uIHJlYWRTMzJGcm9tUG9pbnRlcihwb2ludGVyKXtyZXR1cm4gR1JPV0FCTEVfSEVBUF9JMzIoKVtwb2ludGVyPj4yXX06ZnVuY3Rpb24gcmVhZFUzMkZyb21Qb2ludGVyKHBvaW50ZXIpe3JldHVybiBHUk9XQUJMRV9IRUFQX1UzMigpW3BvaW50ZXI+PjJdfTtkZWZhdWx0OnRocm93IG5ldyBUeXBlRXJyb3IoXCJVbmtub3duIGludGVnZXIgdHlwZTogXCIrbmFtZSl9fWZ1bmN0aW9uIF9fZW1iaW5kX3JlZ2lzdGVyX2ludGVnZXIocHJpbWl0aXZlVHlwZSxuYW1lLHNpemUsbWluUmFuZ2UsbWF4UmFuZ2Upe25hbWU9cmVhZExhdGluMVN0cmluZyhuYW1lKTtpZihtYXhSYW5nZT09PS0xKXttYXhSYW5nZT00Mjk0OTY3Mjk1fXZhciBzaGlmdD1nZXRTaGlmdEZyb21TaXplKHNpemUpO3ZhciBmcm9tV2lyZVR5cGU9ZnVuY3Rpb24odmFsdWUpe3JldHVybiB2YWx1ZX07aWYobWluUmFuZ2U9PT0wKXt2YXIgYml0c2hpZnQ9MzItOCpzaXplO2Zyb21XaXJlVHlwZT1mdW5jdGlvbih2YWx1ZSl7cmV0dXJuIHZhbHVlPDxiaXRzaGlmdD4+PmJpdHNoaWZ0fX12YXIgaXNVbnNpZ25lZFR5cGU9bmFtZS5pbmNsdWRlcyhcInVuc2lnbmVkXCIpO3JlZ2lzdGVyVHlwZShwcmltaXRpdmVUeXBlLHtuYW1lOm5hbWUsXCJmcm9tV2lyZVR5cGVcIjpmcm9tV2lyZVR5cGUsXCJ0b1dpcmVUeXBlXCI6ZnVuY3Rpb24oZGVzdHJ1Y3RvcnMsdmFsdWUpe2lmKHR5cGVvZiB2YWx1ZSE9PVwibnVtYmVyXCImJnR5cGVvZiB2YWx1ZSE9PVwiYm9vbGVhblwiKXt0aHJvdyBuZXcgVHlwZUVycm9yKCdDYW5ub3QgY29udmVydCBcIicrX2VtYmluZF9yZXByKHZhbHVlKSsnXCIgdG8gJyt0aGlzLm5hbWUpfWlmKHZhbHVlPG1pblJhbmdlfHx2YWx1ZT5tYXhSYW5nZSl7dGhyb3cgbmV3IFR5cGVFcnJvcignUGFzc2luZyBhIG51bWJlciBcIicrX2VtYmluZF9yZXByKHZhbHVlKSsnXCIgZnJvbSBKUyBzaWRlIHRvIEMvQysrIHNpZGUgdG8gYW4gYXJndW1lbnQgb2YgdHlwZSBcIicrbmFtZSsnXCIsIHdoaWNoIGlzIG91dHNpZGUgdGhlIHZhbGlkIHJhbmdlIFsnK21pblJhbmdlK1wiLCBcIittYXhSYW5nZStcIl0hXCIpfXJldHVybiBpc1Vuc2lnbmVkVHlwZT92YWx1ZT4+PjA6dmFsdWV8MH0sXCJhcmdQYWNrQWR2YW5jZVwiOjgsXCJyZWFkVmFsdWVGcm9tUG9pbnRlclwiOmludGVnZXJSZWFkVmFsdWVGcm9tUG9pbnRlcihuYW1lLHNoaWZ0LG1pblJhbmdlIT09MCksZGVzdHJ1Y3RvckZ1bmN0aW9uOm51bGx9KX1mdW5jdGlvbiBfX2VtYmluZF9yZWdpc3Rlcl9tZW1vcnlfdmlldyhyYXdUeXBlLGRhdGFUeXBlSW5kZXgsbmFtZSl7dmFyIHR5cGVNYXBwaW5nPVtJbnQ4QXJyYXksVWludDhBcnJheSxJbnQxNkFycmF5LFVpbnQxNkFycmF5LEludDMyQXJyYXksVWludDMyQXJyYXksRmxvYXQzMkFycmF5LEZsb2F0NjRBcnJheV07dmFyIFRBPXR5cGVNYXBwaW5nW2RhdGFUeXBlSW5kZXhdO2Z1bmN0aW9uIGRlY29kZU1lbW9yeVZpZXcoaGFuZGxlKXtoYW5kbGU9aGFuZGxlPj4yO3ZhciBoZWFwPUdST1dBQkxFX0hFQVBfVTMyKCk7dmFyIHNpemU9aGVhcFtoYW5kbGVdO3ZhciBkYXRhPWhlYXBbaGFuZGxlKzFdO3JldHVybiBuZXcgVEEoYnVmZmVyLGRhdGEsc2l6ZSl9bmFtZT1yZWFkTGF0aW4xU3RyaW5nKG5hbWUpO3JlZ2lzdGVyVHlwZShyYXdUeXBlLHtuYW1lOm5hbWUsXCJmcm9tV2lyZVR5cGVcIjpkZWNvZGVNZW1vcnlWaWV3LFwiYXJnUGFja0FkdmFuY2VcIjo4LFwicmVhZFZhbHVlRnJvbVBvaW50ZXJcIjpkZWNvZGVNZW1vcnlWaWV3fSx7aWdub3JlRHVwbGljYXRlUmVnaXN0cmF0aW9uczp0cnVlfSl9ZnVuY3Rpb24gX19lbWJpbmRfcmVnaXN0ZXJfc3RkX3N0cmluZyhyYXdUeXBlLG5hbWUpe25hbWU9cmVhZExhdGluMVN0cmluZyhuYW1lKTt2YXIgc3RkU3RyaW5nSXNVVEY4PW5hbWU9PT1cInN0ZDo6c3RyaW5nXCI7cmVnaXN0ZXJUeXBlKHJhd1R5cGUse25hbWU6bmFtZSxcImZyb21XaXJlVHlwZVwiOmZ1bmN0aW9uKHZhbHVlKXt2YXIgbGVuZ3RoPUdST1dBQkxFX0hFQVBfVTMyKClbdmFsdWU+PjJdO3ZhciBzdHI7aWYoc3RkU3RyaW5nSXNVVEY4KXt2YXIgZGVjb2RlU3RhcnRQdHI9dmFsdWUrNDtmb3IodmFyIGk9MDtpPD1sZW5ndGg7KytpKXt2YXIgY3VycmVudEJ5dGVQdHI9dmFsdWUrNCtpO2lmKGk9PWxlbmd0aHx8R1JPV0FCTEVfSEVBUF9VOCgpW2N1cnJlbnRCeXRlUHRyXT09MCl7dmFyIG1heFJlYWQ9Y3VycmVudEJ5dGVQdHItZGVjb2RlU3RhcnRQdHI7dmFyIHN0cmluZ1NlZ21lbnQ9VVRGOFRvU3RyaW5nKGRlY29kZVN0YXJ0UHRyLG1heFJlYWQpO2lmKHN0cj09PXVuZGVmaW5lZCl7c3RyPXN0cmluZ1NlZ21lbnR9ZWxzZXtzdHIrPVN0cmluZy5mcm9tQ2hhckNvZGUoMCk7c3RyKz1zdHJpbmdTZWdtZW50fWRlY29kZVN0YXJ0UHRyPWN1cnJlbnRCeXRlUHRyKzF9fX1lbHNle3ZhciBhPW5ldyBBcnJheShsZW5ndGgpO2Zvcih2YXIgaT0wO2k8bGVuZ3RoOysraSl7YVtpXT1TdHJpbmcuZnJvbUNoYXJDb2RlKEdST1dBQkxFX0hFQVBfVTgoKVt2YWx1ZSs0K2ldKX1zdHI9YS5qb2luKFwiXCIpfV9mcmVlKHZhbHVlKTtyZXR1cm4gc3RyfSxcInRvV2lyZVR5cGVcIjpmdW5jdGlvbihkZXN0cnVjdG9ycyx2YWx1ZSl7aWYodmFsdWUgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcil7dmFsdWU9bmV3IFVpbnQ4QXJyYXkodmFsdWUpfXZhciBnZXRMZW5ndGg7dmFyIHZhbHVlSXNPZlR5cGVTdHJpbmc9dHlwZW9mIHZhbHVlPT09XCJzdHJpbmdcIjtpZighKHZhbHVlSXNPZlR5cGVTdHJpbmd8fHZhbHVlIGluc3RhbmNlb2YgVWludDhBcnJheXx8dmFsdWUgaW5zdGFuY2VvZiBVaW50OENsYW1wZWRBcnJheXx8dmFsdWUgaW5zdGFuY2VvZiBJbnQ4QXJyYXkpKXt0aHJvd0JpbmRpbmdFcnJvcihcIkNhbm5vdCBwYXNzIG5vbi1zdHJpbmcgdG8gc3RkOjpzdHJpbmdcIil9aWYoc3RkU3RyaW5nSXNVVEY4JiZ2YWx1ZUlzT2ZUeXBlU3RyaW5nKXtnZXRMZW5ndGg9ZnVuY3Rpb24oKXtyZXR1cm4gbGVuZ3RoQnl0ZXNVVEY4KHZhbHVlKX19ZWxzZXtnZXRMZW5ndGg9ZnVuY3Rpb24oKXtyZXR1cm4gdmFsdWUubGVuZ3RofX12YXIgbGVuZ3RoPWdldExlbmd0aCgpO3ZhciBwdHI9X21hbGxvYyg0K2xlbmd0aCsxKTtHUk9XQUJMRV9IRUFQX1UzMigpW3B0cj4+Ml09bGVuZ3RoO2lmKHN0ZFN0cmluZ0lzVVRGOCYmdmFsdWVJc09mVHlwZVN0cmluZyl7c3RyaW5nVG9VVEY4KHZhbHVlLHB0cis0LGxlbmd0aCsxKX1lbHNle2lmKHZhbHVlSXNPZlR5cGVTdHJpbmcpe2Zvcih2YXIgaT0wO2k8bGVuZ3RoOysraSl7dmFyIGNoYXJDb2RlPXZhbHVlLmNoYXJDb2RlQXQoaSk7aWYoY2hhckNvZGU+MjU1KXtfZnJlZShwdHIpO3Rocm93QmluZGluZ0Vycm9yKFwiU3RyaW5nIGhhcyBVVEYtMTYgY29kZSB1bml0cyB0aGF0IGRvIG5vdCBmaXQgaW4gOCBiaXRzXCIpfUdST1dBQkxFX0hFQVBfVTgoKVtwdHIrNCtpXT1jaGFyQ29kZX19ZWxzZXtmb3IodmFyIGk9MDtpPGxlbmd0aDsrK2kpe0dST1dBQkxFX0hFQVBfVTgoKVtwdHIrNCtpXT12YWx1ZVtpXX19fWlmKGRlc3RydWN0b3JzIT09bnVsbCl7ZGVzdHJ1Y3RvcnMucHVzaChfZnJlZSxwdHIpfXJldHVybiBwdHJ9LFwiYXJnUGFja0FkdmFuY2VcIjo4LFwicmVhZFZhbHVlRnJvbVBvaW50ZXJcIjpzaW1wbGVSZWFkVmFsdWVGcm9tUG9pbnRlcixkZXN0cnVjdG9yRnVuY3Rpb246ZnVuY3Rpb24ocHRyKXtfZnJlZShwdHIpfX0pfWZ1bmN0aW9uIF9fZW1iaW5kX3JlZ2lzdGVyX3N0ZF93c3RyaW5nKHJhd1R5cGUsY2hhclNpemUsbmFtZSl7bmFtZT1yZWFkTGF0aW4xU3RyaW5nKG5hbWUpO3ZhciBkZWNvZGVTdHJpbmcsZW5jb2RlU3RyaW5nLGdldEhlYXAsbGVuZ3RoQnl0ZXNVVEYsc2hpZnQ7aWYoY2hhclNpemU9PT0yKXtkZWNvZGVTdHJpbmc9VVRGMTZUb1N0cmluZztlbmNvZGVTdHJpbmc9c3RyaW5nVG9VVEYxNjtsZW5ndGhCeXRlc1VURj1sZW5ndGhCeXRlc1VURjE2O2dldEhlYXA9ZnVuY3Rpb24oKXtyZXR1cm4gR1JPV0FCTEVfSEVBUF9VMTYoKX07c2hpZnQ9MX1lbHNlIGlmKGNoYXJTaXplPT09NCl7ZGVjb2RlU3RyaW5nPVVURjMyVG9TdHJpbmc7ZW5jb2RlU3RyaW5nPXN0cmluZ1RvVVRGMzI7bGVuZ3RoQnl0ZXNVVEY9bGVuZ3RoQnl0ZXNVVEYzMjtnZXRIZWFwPWZ1bmN0aW9uKCl7cmV0dXJuIEdST1dBQkxFX0hFQVBfVTMyKCl9O3NoaWZ0PTJ9cmVnaXN0ZXJUeXBlKHJhd1R5cGUse25hbWU6bmFtZSxcImZyb21XaXJlVHlwZVwiOmZ1bmN0aW9uKHZhbHVlKXt2YXIgbGVuZ3RoPUdST1dBQkxFX0hFQVBfVTMyKClbdmFsdWU+PjJdO3ZhciBIRUFQPWdldEhlYXAoKTt2YXIgc3RyO3ZhciBkZWNvZGVTdGFydFB0cj12YWx1ZSs0O2Zvcih2YXIgaT0wO2k8PWxlbmd0aDsrK2kpe3ZhciBjdXJyZW50Qnl0ZVB0cj12YWx1ZSs0K2kqY2hhclNpemU7aWYoaT09bGVuZ3RofHxIRUFQW2N1cnJlbnRCeXRlUHRyPj5zaGlmdF09PTApe3ZhciBtYXhSZWFkQnl0ZXM9Y3VycmVudEJ5dGVQdHItZGVjb2RlU3RhcnRQdHI7dmFyIHN0cmluZ1NlZ21lbnQ9ZGVjb2RlU3RyaW5nKGRlY29kZVN0YXJ0UHRyLG1heFJlYWRCeXRlcyk7aWYoc3RyPT09dW5kZWZpbmVkKXtzdHI9c3RyaW5nU2VnbWVudH1lbHNle3N0cis9U3RyaW5nLmZyb21DaGFyQ29kZSgwKTtzdHIrPXN0cmluZ1NlZ21lbnR9ZGVjb2RlU3RhcnRQdHI9Y3VycmVudEJ5dGVQdHIrY2hhclNpemV9fV9mcmVlKHZhbHVlKTtyZXR1cm4gc3RyfSxcInRvV2lyZVR5cGVcIjpmdW5jdGlvbihkZXN0cnVjdG9ycyx2YWx1ZSl7aWYoISh0eXBlb2YgdmFsdWU9PT1cInN0cmluZ1wiKSl7dGhyb3dCaW5kaW5nRXJyb3IoXCJDYW5ub3QgcGFzcyBub24tc3RyaW5nIHRvIEMrKyBzdHJpbmcgdHlwZSBcIituYW1lKX12YXIgbGVuZ3RoPWxlbmd0aEJ5dGVzVVRGKHZhbHVlKTt2YXIgcHRyPV9tYWxsb2MoNCtsZW5ndGgrY2hhclNpemUpO0dST1dBQkxFX0hFQVBfVTMyKClbcHRyPj4yXT1sZW5ndGg+PnNoaWZ0O2VuY29kZVN0cmluZyh2YWx1ZSxwdHIrNCxsZW5ndGgrY2hhclNpemUpO2lmKGRlc3RydWN0b3JzIT09bnVsbCl7ZGVzdHJ1Y3RvcnMucHVzaChfZnJlZSxwdHIpfXJldHVybiBwdHJ9LFwiYXJnUGFja0FkdmFuY2VcIjo4LFwicmVhZFZhbHVlRnJvbVBvaW50ZXJcIjpzaW1wbGVSZWFkVmFsdWVGcm9tUG9pbnRlcixkZXN0cnVjdG9yRnVuY3Rpb246ZnVuY3Rpb24ocHRyKXtfZnJlZShwdHIpfX0pfWZ1bmN0aW9uIF9fZW1iaW5kX3JlZ2lzdGVyX3ZhbHVlX29iamVjdChyYXdUeXBlLG5hbWUsY29uc3RydWN0b3JTaWduYXR1cmUscmF3Q29uc3RydWN0b3IsZGVzdHJ1Y3RvclNpZ25hdHVyZSxyYXdEZXN0cnVjdG9yKXtzdHJ1Y3RSZWdpc3RyYXRpb25zW3Jhd1R5cGVdPXtuYW1lOnJlYWRMYXRpbjFTdHJpbmcobmFtZSkscmF3Q29uc3RydWN0b3I6ZW1iaW5kX19yZXF1aXJlRnVuY3Rpb24oY29uc3RydWN0b3JTaWduYXR1cmUscmF3Q29uc3RydWN0b3IpLHJhd0Rlc3RydWN0b3I6ZW1iaW5kX19yZXF1aXJlRnVuY3Rpb24oZGVzdHJ1Y3RvclNpZ25hdHVyZSxyYXdEZXN0cnVjdG9yKSxmaWVsZHM6W119fWZ1bmN0aW9uIF9fZW1iaW5kX3JlZ2lzdGVyX3ZhbHVlX29iamVjdF9maWVsZChzdHJ1Y3RUeXBlLGZpZWxkTmFtZSxnZXR0ZXJSZXR1cm5UeXBlLGdldHRlclNpZ25hdHVyZSxnZXR0ZXIsZ2V0dGVyQ29udGV4dCxzZXR0ZXJBcmd1bWVudFR5cGUsc2V0dGVyU2lnbmF0dXJlLHNldHRlcixzZXR0ZXJDb250ZXh0KXtzdHJ1Y3RSZWdpc3RyYXRpb25zW3N0cnVjdFR5cGVdLmZpZWxkcy5wdXNoKHtmaWVsZE5hbWU6cmVhZExhdGluMVN0cmluZyhmaWVsZE5hbWUpLGdldHRlclJldHVyblR5cGU6Z2V0dGVyUmV0dXJuVHlwZSxnZXR0ZXI6ZW1iaW5kX19yZXF1aXJlRnVuY3Rpb24oZ2V0dGVyU2lnbmF0dXJlLGdldHRlciksZ2V0dGVyQ29udGV4dDpnZXR0ZXJDb250ZXh0LHNldHRlckFyZ3VtZW50VHlwZTpzZXR0ZXJBcmd1bWVudFR5cGUsc2V0dGVyOmVtYmluZF9fcmVxdWlyZUZ1bmN0aW9uKHNldHRlclNpZ25hdHVyZSxzZXR0ZXIpLHNldHRlckNvbnRleHQ6c2V0dGVyQ29udGV4dH0pfWZ1bmN0aW9uIF9fZW1iaW5kX3JlZ2lzdGVyX3ZvaWQocmF3VHlwZSxuYW1lKXtuYW1lPXJlYWRMYXRpbjFTdHJpbmcobmFtZSk7cmVnaXN0ZXJUeXBlKHJhd1R5cGUse2lzVm9pZDp0cnVlLG5hbWU6bmFtZSxcImFyZ1BhY2tBZHZhbmNlXCI6MCxcImZyb21XaXJlVHlwZVwiOmZ1bmN0aW9uKCl7cmV0dXJuIHVuZGVmaW5lZH0sXCJ0b1dpcmVUeXBlXCI6ZnVuY3Rpb24oZGVzdHJ1Y3RvcnMsbyl7cmV0dXJuIHVuZGVmaW5lZH19KX1mdW5jdGlvbiBfX2Vtc2NyaXB0ZW5fbm90aWZ5X3RocmVhZF9xdWV1ZSh0YXJnZXRUaHJlYWRJZCxtYWluVGhyZWFkSWQpe2lmKHRhcmdldFRocmVhZElkPT1tYWluVGhyZWFkSWQpe3Bvc3RNZXNzYWdlKHtcImNtZFwiOlwicHJvY2Vzc1F1ZXVlZE1haW5UaHJlYWRXb3JrXCJ9KX1lbHNlIGlmKEVOVklST05NRU5UX0lTX1BUSFJFQUQpe3Bvc3RNZXNzYWdlKHtcInRhcmdldFRocmVhZFwiOnRhcmdldFRocmVhZElkLFwiY21kXCI6XCJwcm9jZXNzVGhyZWFkUXVldWVcIn0pfWVsc2V7dmFyIHB0aHJlYWQ9UFRocmVhZC5wdGhyZWFkc1t0YXJnZXRUaHJlYWRJZF07dmFyIHdvcmtlcj1wdGhyZWFkJiZwdGhyZWFkLndvcmtlcjtpZighd29ya2VyKXtyZXR1cm59d29ya2VyLnBvc3RNZXNzYWdlKHtcImNtZFwiOlwicHJvY2Vzc1RocmVhZFF1ZXVlXCJ9KX1yZXR1cm4gMX12YXIgZW12YWxfc3ltYm9scz17fTtmdW5jdGlvbiBnZXRTdHJpbmdPclN5bWJvbChhZGRyZXNzKXt2YXIgc3ltYm9sPWVtdmFsX3N5bWJvbHNbYWRkcmVzc107aWYoc3ltYm9sPT09dW5kZWZpbmVkKXtyZXR1cm4gcmVhZExhdGluMVN0cmluZyhhZGRyZXNzKX1lbHNle3JldHVybiBzeW1ib2x9fWZ1bmN0aW9uIGVtdmFsX2dldF9nbG9iYWwoKXtpZih0eXBlb2YgZ2xvYmFsVGhpcz09PVwib2JqZWN0XCIpe3JldHVybiBnbG9iYWxUaGlzfXJldHVybiBmdW5jdGlvbigpe3JldHVybiBGdW5jdGlvbn0oKShcInJldHVybiB0aGlzXCIpKCl9ZnVuY3Rpb24gX19lbXZhbF9nZXRfZ2xvYmFsKG5hbWUpe2lmKG5hbWU9PT0wKXtyZXR1cm4gX19lbXZhbF9yZWdpc3RlcihlbXZhbF9nZXRfZ2xvYmFsKCkpfWVsc2V7bmFtZT1nZXRTdHJpbmdPclN5bWJvbChuYW1lKTtyZXR1cm4gX19lbXZhbF9yZWdpc3RlcihlbXZhbF9nZXRfZ2xvYmFsKClbbmFtZV0pfX1mdW5jdGlvbiBfX2VtdmFsX2luY3JlZihoYW5kbGUpe2lmKGhhbmRsZT40KXtlbXZhbF9oYW5kbGVfYXJyYXlbaGFuZGxlXS5yZWZjb3VudCs9MX19ZnVuY3Rpb24gcmVxdWlyZVJlZ2lzdGVyZWRUeXBlKHJhd1R5cGUsaHVtYW5OYW1lKXt2YXIgaW1wbD1yZWdpc3RlcmVkVHlwZXNbcmF3VHlwZV07aWYodW5kZWZpbmVkPT09aW1wbCl7dGhyb3dCaW5kaW5nRXJyb3IoaHVtYW5OYW1lK1wiIGhhcyB1bmtub3duIHR5cGUgXCIrZ2V0VHlwZU5hbWUocmF3VHlwZSkpfXJldHVybiBpbXBsfWZ1bmN0aW9uIGNyYWZ0RW12YWxBbGxvY2F0b3IoYXJnQ291bnQpe3ZhciBhcmdzTGlzdD1cIlwiO2Zvcih2YXIgaT0wO2k8YXJnQ291bnQ7KytpKXthcmdzTGlzdCs9KGkhPT0wP1wiLCBcIjpcIlwiKStcImFyZ1wiK2l9dmFyIGZ1bmN0aW9uQm9keT1cInJldHVybiBmdW5jdGlvbiBlbXZhbF9hbGxvY2F0b3JfXCIrYXJnQ291bnQrXCIoY29uc3RydWN0b3IsIGFyZ1R5cGVzLCBhcmdzKSB7XFxuXCI7Zm9yKHZhciBpPTA7aTxhcmdDb3VudDsrK2kpe2Z1bmN0aW9uQm9keSs9XCJ2YXIgYXJnVHlwZVwiK2krXCIgPSByZXF1aXJlUmVnaXN0ZXJlZFR5cGUoTW9kdWxlWydIRUFQMzInXVsoYXJnVHlwZXMgPj4+IDIpICsgXCIraSsnXSwgXCJwYXJhbWV0ZXIgJytpKydcIik7XFxuJytcInZhciBhcmdcIitpK1wiID0gYXJnVHlwZVwiK2krXCIucmVhZFZhbHVlRnJvbVBvaW50ZXIoYXJncyk7XFxuXCIrXCJhcmdzICs9IGFyZ1R5cGVcIitpK1wiWydhcmdQYWNrQWR2YW5jZSddO1xcblwifWZ1bmN0aW9uQm9keSs9XCJ2YXIgb2JqID0gbmV3IGNvbnN0cnVjdG9yKFwiK2FyZ3NMaXN0K1wiKTtcXG5cIitcInJldHVybiBfX2VtdmFsX3JlZ2lzdGVyKG9iaik7XFxuXCIrXCJ9XFxuXCI7cmV0dXJuIG5ldyBGdW5jdGlvbihcInJlcXVpcmVSZWdpc3RlcmVkVHlwZVwiLFwiTW9kdWxlXCIsXCJfX2VtdmFsX3JlZ2lzdGVyXCIsZnVuY3Rpb25Cb2R5KShyZXF1aXJlUmVnaXN0ZXJlZFR5cGUsTW9kdWxlLF9fZW12YWxfcmVnaXN0ZXIpfXZhciBlbXZhbF9uZXdlcnM9e307ZnVuY3Rpb24gcmVxdWlyZUhhbmRsZShoYW5kbGUpe2lmKCFoYW5kbGUpe3Rocm93QmluZGluZ0Vycm9yKFwiQ2Fubm90IHVzZSBkZWxldGVkIHZhbC4gaGFuZGxlID0gXCIraGFuZGxlKX1yZXR1cm4gZW12YWxfaGFuZGxlX2FycmF5W2hhbmRsZV0udmFsdWV9ZnVuY3Rpb24gX19lbXZhbF9uZXcoaGFuZGxlLGFyZ0NvdW50LGFyZ1R5cGVzLGFyZ3Mpe2hhbmRsZT1yZXF1aXJlSGFuZGxlKGhhbmRsZSk7dmFyIG5ld2VyPWVtdmFsX25ld2Vyc1thcmdDb3VudF07aWYoIW5ld2VyKXtuZXdlcj1jcmFmdEVtdmFsQWxsb2NhdG9yKGFyZ0NvdW50KTtlbXZhbF9uZXdlcnNbYXJnQ291bnRdPW5ld2VyfXJldHVybiBuZXdlcihoYW5kbGUsYXJnVHlwZXMsYXJncyl9ZnVuY3Rpb24gX2Fib3J0KCl7YWJvcnQoKX12YXIgcmVhZEFzbUNvbnN0QXJnc0FycmF5PVtdO2Z1bmN0aW9uIHJlYWRBc21Db25zdEFyZ3Moc2lnUHRyLGJ1Zil7cmVhZEFzbUNvbnN0QXJnc0FycmF5Lmxlbmd0aD0wO3ZhciBjaDtidWY+Pj0yO3doaWxlKGNoPUdST1dBQkxFX0hFQVBfVTgoKVtzaWdQdHIrK10pe3ZhciBkb3VibGU9Y2g8MTA1O2lmKGRvdWJsZSYmYnVmJjEpYnVmKys7cmVhZEFzbUNvbnN0QXJnc0FycmF5LnB1c2goZG91YmxlP0dST1dBQkxFX0hFQVBfRjY0KClbYnVmKys+PjFdOkdST1dBQkxFX0hFQVBfSTMyKClbYnVmXSk7KytidWZ9cmV0dXJuIHJlYWRBc21Db25zdEFyZ3NBcnJheX1mdW5jdGlvbiBfZW1zY3JpcHRlbl9hc21fY29uc3RfaW50KGNvZGUsc2lnUHRyLGFyZ2J1Zil7dmFyIGFyZ3M9cmVhZEFzbUNvbnN0QXJncyhzaWdQdHIsYXJnYnVmKTtyZXR1cm4gQVNNX0NPTlNUU1tjb2RlXS5hcHBseShudWxsLGFyZ3MpfWZ1bmN0aW9uIF9lbXNjcmlwdGVuX2NoZWNrX2Jsb2NraW5nX2FsbG93ZWQoKXtpZihFTlZJUk9OTUVOVF9JU19XT1JLRVIpcmV0dXJuO3dhcm5PbmNlKFwiQmxvY2tpbmcgb24gdGhlIG1haW4gdGhyZWFkIGlzIHZlcnkgZGFuZ2Vyb3VzLCBzZWUgaHR0cHM6Ly9lbXNjcmlwdGVuLm9yZy9kb2NzL3BvcnRpbmcvcHRocmVhZHMuaHRtbCNibG9ja2luZy1vbi10aGUtbWFpbi1icm93c2VyLXRocmVhZFwiKX1mdW5jdGlvbiBfZW1zY3JpcHRlbl9jb25kaXRpb25hbF9zZXRfY3VycmVudF90aHJlYWRfc3RhdHVzKGV4cGVjdGVkU3RhdHVzLG5ld1N0YXR1cyl7fWZ1bmN0aW9uIF9lbXNjcmlwdGVuX2Z1dGV4X3dhaXQoYWRkcix2YWwsdGltZW91dCl7aWYoYWRkcjw9MHx8YWRkcj5HUk9XQUJMRV9IRUFQX0k4KCkubGVuZ3RofHxhZGRyJjMhPTApcmV0dXJuLTI4O2lmKCFFTlZJUk9OTUVOVF9JU19XRUIpe3ZhciByZXQ9QXRvbWljcy53YWl0KEdST1dBQkxFX0hFQVBfSTMyKCksYWRkcj4+Mix2YWwsdGltZW91dCk7aWYocmV0PT09XCJ0aW1lZC1vdXRcIilyZXR1cm4tNzM7aWYocmV0PT09XCJub3QtZXF1YWxcIilyZXR1cm4tNjtpZihyZXQ9PT1cIm9rXCIpcmV0dXJuIDA7dGhyb3dcIkF0b21pY3Mud2FpdCByZXR1cm5lZCBhbiB1bmV4cGVjdGVkIHZhbHVlIFwiK3JldH1lbHNle2lmKEF0b21pY3MubG9hZChHUk9XQUJMRV9IRUFQX0kzMigpLGFkZHI+PjIpIT12YWwpe3JldHVybi02fXZhciB0Tm93PXBlcmZvcm1hbmNlLm5vdygpO3ZhciB0RW5kPXROb3crdGltZW91dDt2YXIgbGFzdEFkZHI9QXRvbWljcy5leGNoYW5nZShHUk9XQUJMRV9IRUFQX0kzMigpLF9fZW1zY3JpcHRlbl9tYWluX3RocmVhZF9mdXRleD4+MixhZGRyKTt3aGlsZSgxKXt0Tm93PXBlcmZvcm1hbmNlLm5vdygpO2lmKHROb3c+dEVuZCl7bGFzdEFkZHI9QXRvbWljcy5leGNoYW5nZShHUk9XQUJMRV9IRUFQX0kzMigpLF9fZW1zY3JpcHRlbl9tYWluX3RocmVhZF9mdXRleD4+MiwwKTtyZXR1cm4tNzN9bGFzdEFkZHI9QXRvbWljcy5leGNoYW5nZShHUk9XQUJMRV9IRUFQX0kzMigpLF9fZW1zY3JpcHRlbl9tYWluX3RocmVhZF9mdXRleD4+MiwwKTtpZihsYXN0QWRkcj09MCl7YnJlYWt9X2Vtc2NyaXB0ZW5fbWFpbl90aHJlYWRfcHJvY2Vzc19xdWV1ZWRfY2FsbHMoKTtpZihBdG9taWNzLmxvYWQoR1JPV0FCTEVfSEVBUF9JMzIoKSxhZGRyPj4yKSE9dmFsKXtyZXR1cm4tNn1sYXN0QWRkcj1BdG9taWNzLmV4Y2hhbmdlKEdST1dBQkxFX0hFQVBfSTMyKCksX19lbXNjcmlwdGVuX21haW5fdGhyZWFkX2Z1dGV4Pj4yLGFkZHIpfXJldHVybiAwfX1mdW5jdGlvbiBfbG9uZ2ptcChlbnYsdmFsdWUpe19zZXRUaHJldyhlbnYsdmFsdWV8fDEpO3Rocm93XCJsb25nam1wXCJ9ZnVuY3Rpb24gX2Vtc2NyaXB0ZW5fbG9uZ2ptcChhMCxhMSl7cmV0dXJuIF9sb25nam1wKGEwLGExKX1mdW5jdGlvbiBfZW1zY3JpcHRlbl9tZW1jcHlfYmlnKGRlc3Qsc3JjLG51bSl7R1JPV0FCTEVfSEVBUF9VOCgpLmNvcHlXaXRoaW4oZGVzdCxzcmMsc3JjK251bSl9ZnVuY3Rpb24gX2Vtc2NyaXB0ZW5fbnVtX2xvZ2ljYWxfY29yZXMoKXtyZXR1cm4gbmF2aWdhdG9yW1wiaGFyZHdhcmVDb25jdXJyZW5jeVwiXX1mdW5jdGlvbiBfZW1zY3JpcHRlbl9wcm94eV90b19tYWluX3RocmVhZF9qcyhpbmRleCxzeW5jKXt2YXIgbnVtQ2FsbEFyZ3M9YXJndW1lbnRzLmxlbmd0aC0yO3ZhciBzdGFjaz1zdGFja1NhdmUoKTt2YXIgc2VyaWFsaXplZE51bUNhbGxBcmdzPW51bUNhbGxBcmdzO3ZhciBhcmdzPXN0YWNrQWxsb2Moc2VyaWFsaXplZE51bUNhbGxBcmdzKjgpO3ZhciBiPWFyZ3M+PjM7Zm9yKHZhciBpPTA7aTxudW1DYWxsQXJncztpKyspe3ZhciBhcmc9YXJndW1lbnRzWzIraV07R1JPV0FCTEVfSEVBUF9GNjQoKVtiK2ldPWFyZ312YXIgcmV0PV9lbXNjcmlwdGVuX3J1bl9pbl9tYWluX3J1bnRpbWVfdGhyZWFkX2pzKGluZGV4LHNlcmlhbGl6ZWROdW1DYWxsQXJncyxhcmdzLHN5bmMpO3N0YWNrUmVzdG9yZShzdGFjayk7cmV0dXJuIHJldH12YXIgX2Vtc2NyaXB0ZW5fcmVjZWl2ZV9vbl9tYWluX3RocmVhZF9qc19jYWxsQXJncz1bXTtmdW5jdGlvbiBfZW1zY3JpcHRlbl9yZWNlaXZlX29uX21haW5fdGhyZWFkX2pzKGluZGV4LG51bUNhbGxBcmdzLGFyZ3Mpe19lbXNjcmlwdGVuX3JlY2VpdmVfb25fbWFpbl90aHJlYWRfanNfY2FsbEFyZ3MubGVuZ3RoPW51bUNhbGxBcmdzO3ZhciBiPWFyZ3M+PjM7Zm9yKHZhciBpPTA7aTxudW1DYWxsQXJncztpKyspe19lbXNjcmlwdGVuX3JlY2VpdmVfb25fbWFpbl90aHJlYWRfanNfY2FsbEFyZ3NbaV09R1JPV0FCTEVfSEVBUF9GNjQoKVtiK2ldfXZhciBpc0VtQXNtQ29uc3Q9aW5kZXg8MDt2YXIgZnVuYz0haXNFbUFzbUNvbnN0P3Byb3hpZWRGdW5jdGlvblRhYmxlW2luZGV4XTpBU01fQ09OU1RTWy1pbmRleC0xXTtyZXR1cm4gZnVuYy5hcHBseShudWxsLF9lbXNjcmlwdGVuX3JlY2VpdmVfb25fbWFpbl90aHJlYWRfanNfY2FsbEFyZ3MpfWZ1bmN0aW9uIGVtc2NyaXB0ZW5fcmVhbGxvY19idWZmZXIoc2l6ZSl7dHJ5e3dhc21NZW1vcnkuZ3JvdyhzaXplLWJ1ZmZlci5ieXRlTGVuZ3RoKzY1NTM1Pj4+MTYpO3VwZGF0ZUdsb2JhbEJ1ZmZlckFuZFZpZXdzKHdhc21NZW1vcnkuYnVmZmVyKTtyZXR1cm4gMX1jYXRjaChlKXt9fWZ1bmN0aW9uIF9lbXNjcmlwdGVuX3Jlc2l6ZV9oZWFwKHJlcXVlc3RlZFNpemUpe3ZhciBvbGRTaXplPUdST1dBQkxFX0hFQVBfVTgoKS5sZW5ndGg7cmVxdWVzdGVkU2l6ZT1yZXF1ZXN0ZWRTaXplPj4+MDtpZihyZXF1ZXN0ZWRTaXplPD1vbGRTaXplKXtyZXR1cm4gZmFsc2V9dmFyIG1heEhlYXBTaXplPTIxNDc0ODM2NDg7aWYocmVxdWVzdGVkU2l6ZT5tYXhIZWFwU2l6ZSl7cmV0dXJuIGZhbHNlfWZvcih2YXIgY3V0RG93bj0xO2N1dERvd248PTQ7Y3V0RG93bio9Mil7dmFyIG92ZXJHcm93bkhlYXBTaXplPW9sZFNpemUqKDErLjIvY3V0RG93bik7b3Zlckdyb3duSGVhcFNpemU9TWF0aC5taW4ob3Zlckdyb3duSGVhcFNpemUscmVxdWVzdGVkU2l6ZSsxMDA2NjMyOTYpO3ZhciBuZXdTaXplPU1hdGgubWluKG1heEhlYXBTaXplLGFsaWduVXAoTWF0aC5tYXgocmVxdWVzdGVkU2l6ZSxvdmVyR3Jvd25IZWFwU2l6ZSksNjU1MzYpKTt2YXIgcmVwbGFjZW1lbnQ9ZW1zY3JpcHRlbl9yZWFsbG9jX2J1ZmZlcihuZXdTaXplKTtpZihyZXBsYWNlbWVudCl7cmV0dXJuIHRydWV9fXJldHVybiBmYWxzZX12YXIgSlNFdmVudHM9e2luRXZlbnRIYW5kbGVyOjAscmVtb3ZlQWxsRXZlbnRMaXN0ZW5lcnM6ZnVuY3Rpb24oKXtmb3IodmFyIGk9SlNFdmVudHMuZXZlbnRIYW5kbGVycy5sZW5ndGgtMTtpPj0wOy0taSl7SlNFdmVudHMuX3JlbW92ZUhhbmRsZXIoaSl9SlNFdmVudHMuZXZlbnRIYW5kbGVycz1bXTtKU0V2ZW50cy5kZWZlcnJlZENhbGxzPVtdfSxyZWdpc3RlclJlbW92ZUV2ZW50TGlzdGVuZXJzOmZ1bmN0aW9uKCl7aWYoIUpTRXZlbnRzLnJlbW92ZUV2ZW50TGlzdGVuZXJzUmVnaXN0ZXJlZCl7X19BVEVYSVRfXy5wdXNoKEpTRXZlbnRzLnJlbW92ZUFsbEV2ZW50TGlzdGVuZXJzKTtKU0V2ZW50cy5yZW1vdmVFdmVudExpc3RlbmVyc1JlZ2lzdGVyZWQ9dHJ1ZX19LGRlZmVycmVkQ2FsbHM6W10sZGVmZXJDYWxsOmZ1bmN0aW9uKHRhcmdldEZ1bmN0aW9uLHByZWNlZGVuY2UsYXJnc0xpc3Qpe2Z1bmN0aW9uIGFycmF5c0hhdmVFcXVhbENvbnRlbnQoYXJyQSxhcnJCKXtpZihhcnJBLmxlbmd0aCE9YXJyQi5sZW5ndGgpcmV0dXJuIGZhbHNlO2Zvcih2YXIgaSBpbiBhcnJBKXtpZihhcnJBW2ldIT1hcnJCW2ldKXJldHVybiBmYWxzZX1yZXR1cm4gdHJ1ZX1mb3IodmFyIGkgaW4gSlNFdmVudHMuZGVmZXJyZWRDYWxscyl7dmFyIGNhbGw9SlNFdmVudHMuZGVmZXJyZWRDYWxsc1tpXTtpZihjYWxsLnRhcmdldEZ1bmN0aW9uPT10YXJnZXRGdW5jdGlvbiYmYXJyYXlzSGF2ZUVxdWFsQ29udGVudChjYWxsLmFyZ3NMaXN0LGFyZ3NMaXN0KSl7cmV0dXJufX1KU0V2ZW50cy5kZWZlcnJlZENhbGxzLnB1c2goe3RhcmdldEZ1bmN0aW9uOnRhcmdldEZ1bmN0aW9uLHByZWNlZGVuY2U6cHJlY2VkZW5jZSxhcmdzTGlzdDphcmdzTGlzdH0pO0pTRXZlbnRzLmRlZmVycmVkQ2FsbHMuc29ydChmdW5jdGlvbih4LHkpe3JldHVybiB4LnByZWNlZGVuY2U8eS5wcmVjZWRlbmNlfSl9LHJlbW92ZURlZmVycmVkQ2FsbHM6ZnVuY3Rpb24odGFyZ2V0RnVuY3Rpb24pe2Zvcih2YXIgaT0wO2k8SlNFdmVudHMuZGVmZXJyZWRDYWxscy5sZW5ndGg7KytpKXtpZihKU0V2ZW50cy5kZWZlcnJlZENhbGxzW2ldLnRhcmdldEZ1bmN0aW9uPT10YXJnZXRGdW5jdGlvbil7SlNFdmVudHMuZGVmZXJyZWRDYWxscy5zcGxpY2UoaSwxKTstLWl9fX0sY2FuUGVyZm9ybUV2ZW50SGFuZGxlclJlcXVlc3RzOmZ1bmN0aW9uKCl7cmV0dXJuIEpTRXZlbnRzLmluRXZlbnRIYW5kbGVyJiZKU0V2ZW50cy5jdXJyZW50RXZlbnRIYW5kbGVyLmFsbG93c0RlZmVycmVkQ2FsbHN9LHJ1bkRlZmVycmVkQ2FsbHM6ZnVuY3Rpb24oKXtpZighSlNFdmVudHMuY2FuUGVyZm9ybUV2ZW50SGFuZGxlclJlcXVlc3RzKCkpe3JldHVybn1mb3IodmFyIGk9MDtpPEpTRXZlbnRzLmRlZmVycmVkQ2FsbHMubGVuZ3RoOysraSl7dmFyIGNhbGw9SlNFdmVudHMuZGVmZXJyZWRDYWxsc1tpXTtKU0V2ZW50cy5kZWZlcnJlZENhbGxzLnNwbGljZShpLDEpOy0taTtjYWxsLnRhcmdldEZ1bmN0aW9uLmFwcGx5KG51bGwsY2FsbC5hcmdzTGlzdCl9fSxldmVudEhhbmRsZXJzOltdLHJlbW92ZUFsbEhhbmRsZXJzT25UYXJnZXQ6ZnVuY3Rpb24odGFyZ2V0LGV2ZW50VHlwZVN0cmluZyl7Zm9yKHZhciBpPTA7aTxKU0V2ZW50cy5ldmVudEhhbmRsZXJzLmxlbmd0aDsrK2kpe2lmKEpTRXZlbnRzLmV2ZW50SGFuZGxlcnNbaV0udGFyZ2V0PT10YXJnZXQmJighZXZlbnRUeXBlU3RyaW5nfHxldmVudFR5cGVTdHJpbmc9PUpTRXZlbnRzLmV2ZW50SGFuZGxlcnNbaV0uZXZlbnRUeXBlU3RyaW5nKSl7SlNFdmVudHMuX3JlbW92ZUhhbmRsZXIoaS0tKX19fSxfcmVtb3ZlSGFuZGxlcjpmdW5jdGlvbihpKXt2YXIgaD1KU0V2ZW50cy5ldmVudEhhbmRsZXJzW2ldO2gudGFyZ2V0LnJlbW92ZUV2ZW50TGlzdGVuZXIoaC5ldmVudFR5cGVTdHJpbmcsaC5ldmVudExpc3RlbmVyRnVuYyxoLnVzZUNhcHR1cmUpO0pTRXZlbnRzLmV2ZW50SGFuZGxlcnMuc3BsaWNlKGksMSl9LHJlZ2lzdGVyT3JSZW1vdmVIYW5kbGVyOmZ1bmN0aW9uKGV2ZW50SGFuZGxlcil7dmFyIGpzRXZlbnRIYW5kbGVyPWZ1bmN0aW9uIGpzRXZlbnRIYW5kbGVyKGV2ZW50KXsrK0pTRXZlbnRzLmluRXZlbnRIYW5kbGVyO0pTRXZlbnRzLmN1cnJlbnRFdmVudEhhbmRsZXI9ZXZlbnRIYW5kbGVyO0pTRXZlbnRzLnJ1bkRlZmVycmVkQ2FsbHMoKTtldmVudEhhbmRsZXIuaGFuZGxlckZ1bmMoZXZlbnQpO0pTRXZlbnRzLnJ1bkRlZmVycmVkQ2FsbHMoKTstLUpTRXZlbnRzLmluRXZlbnRIYW5kbGVyfTtpZihldmVudEhhbmRsZXIuY2FsbGJhY2tmdW5jKXtldmVudEhhbmRsZXIuZXZlbnRMaXN0ZW5lckZ1bmM9anNFdmVudEhhbmRsZXI7ZXZlbnRIYW5kbGVyLnRhcmdldC5hZGRFdmVudExpc3RlbmVyKGV2ZW50SGFuZGxlci5ldmVudFR5cGVTdHJpbmcsanNFdmVudEhhbmRsZXIsZXZlbnRIYW5kbGVyLnVzZUNhcHR1cmUpO0pTRXZlbnRzLmV2ZW50SGFuZGxlcnMucHVzaChldmVudEhhbmRsZXIpO0pTRXZlbnRzLnJlZ2lzdGVyUmVtb3ZlRXZlbnRMaXN0ZW5lcnMoKX1lbHNle2Zvcih2YXIgaT0wO2k8SlNFdmVudHMuZXZlbnRIYW5kbGVycy5sZW5ndGg7KytpKXtpZihKU0V2ZW50cy5ldmVudEhhbmRsZXJzW2ldLnRhcmdldD09ZXZlbnRIYW5kbGVyLnRhcmdldCYmSlNFdmVudHMuZXZlbnRIYW5kbGVyc1tpXS5ldmVudFR5cGVTdHJpbmc9PWV2ZW50SGFuZGxlci5ldmVudFR5cGVTdHJpbmcpe0pTRXZlbnRzLl9yZW1vdmVIYW5kbGVyKGktLSl9fX19LHF1ZXVlRXZlbnRIYW5kbGVyT25UaHJlYWRfaWlpaTpmdW5jdGlvbih0YXJnZXRUaHJlYWQsZXZlbnRIYW5kbGVyRnVuYyxldmVudFR5cGVJZCxldmVudERhdGEsdXNlckRhdGEpe3ZhciBzdGFja1RvcD1zdGFja1NhdmUoKTt2YXIgdmFyYXJncz1zdGFja0FsbG9jKDEyKTtHUk9XQUJMRV9IRUFQX0kzMigpW3ZhcmFyZ3M+PjJdPWV2ZW50VHlwZUlkO0dST1dBQkxFX0hFQVBfSTMyKClbdmFyYXJncys0Pj4yXT1ldmVudERhdGE7R1JPV0FCTEVfSEVBUF9JMzIoKVt2YXJhcmdzKzg+PjJdPXVzZXJEYXRhO19fZW1zY3JpcHRlbl9jYWxsX29uX3RocmVhZCgwLHRhcmdldFRocmVhZCw2Mzc1MzQyMDgsZXZlbnRIYW5kbGVyRnVuYyxldmVudERhdGEsdmFyYXJncyk7c3RhY2tSZXN0b3JlKHN0YWNrVG9wKX0sZ2V0VGFyZ2V0VGhyZWFkRm9yRXZlbnRDYWxsYmFjazpmdW5jdGlvbih0YXJnZXRUaHJlYWQpe3N3aXRjaCh0YXJnZXRUaHJlYWQpe2Nhc2UgMTpyZXR1cm4gMDtjYXNlIDI6cmV0dXJuIFBUaHJlYWQuY3VycmVudFByb3hpZWRPcGVyYXRpb25DYWxsZXJUaHJlYWQ7ZGVmYXVsdDpyZXR1cm4gdGFyZ2V0VGhyZWFkfX0sZ2V0Tm9kZU5hbWVGb3JUYXJnZXQ6ZnVuY3Rpb24odGFyZ2V0KXtpZighdGFyZ2V0KXJldHVyblwiXCI7aWYodGFyZ2V0PT13aW5kb3cpcmV0dXJuXCIjd2luZG93XCI7aWYodGFyZ2V0PT1zY3JlZW4pcmV0dXJuXCIjc2NyZWVuXCI7cmV0dXJuIHRhcmdldCYmdGFyZ2V0Lm5vZGVOYW1lP3RhcmdldC5ub2RlTmFtZTpcIlwifSxmdWxsc2NyZWVuRW5hYmxlZDpmdW5jdGlvbigpe3JldHVybiBkb2N1bWVudC5mdWxsc2NyZWVuRW5hYmxlZHx8ZG9jdW1lbnQud2Via2l0RnVsbHNjcmVlbkVuYWJsZWR9fTtmdW5jdGlvbiBzdHJpbmdUb05ld1VURjgoanNTdHJpbmcpe3ZhciBsZW5ndGg9bGVuZ3RoQnl0ZXNVVEY4KGpzU3RyaW5nKSsxO3ZhciBjU3RyaW5nPV9tYWxsb2MobGVuZ3RoKTtzdHJpbmdUb1VURjgoanNTdHJpbmcsY1N0cmluZyxsZW5ndGgpO3JldHVybiBjU3RyaW5nfWZ1bmN0aW9uIF9lbXNjcmlwdGVuX3NldF9vZmZzY3JlZW5jYW52YXNfc2l6ZV9vbl90YXJnZXRfdGhyZWFkX2pzKHRhcmdldFRocmVhZCx0YXJnZXRDYW52YXMsd2lkdGgsaGVpZ2h0KXt2YXIgc3RhY2tUb3A9c3RhY2tTYXZlKCk7dmFyIHZhcmFyZ3M9c3RhY2tBbGxvYygxMik7dmFyIHRhcmdldENhbnZhc1B0cj0wO2lmKHRhcmdldENhbnZhcyl7dGFyZ2V0Q2FudmFzUHRyPXN0cmluZ1RvTmV3VVRGOCh0YXJnZXRDYW52YXMpfUdST1dBQkxFX0hFQVBfSTMyKClbdmFyYXJncz4+Ml09dGFyZ2V0Q2FudmFzUHRyO0dST1dBQkxFX0hFQVBfSTMyKClbdmFyYXJncys0Pj4yXT13aWR0aDtHUk9XQUJMRV9IRUFQX0kzMigpW3ZhcmFyZ3MrOD4+Ml09aGVpZ2h0O19fZW1zY3JpcHRlbl9jYWxsX29uX3RocmVhZCgwLHRhcmdldFRocmVhZCw2NTc0NTcxNTIsMCx0YXJnZXRDYW52YXNQdHIsdmFyYXJncyk7c3RhY2tSZXN0b3JlKHN0YWNrVG9wKX1mdW5jdGlvbiBfZW1zY3JpcHRlbl9zZXRfb2Zmc2NyZWVuY2FudmFzX3NpemVfb25fdGFyZ2V0X3RocmVhZCh0YXJnZXRUaHJlYWQsdGFyZ2V0Q2FudmFzLHdpZHRoLGhlaWdodCl7dGFyZ2V0Q2FudmFzPXRhcmdldENhbnZhcz9VVEY4VG9TdHJpbmcodGFyZ2V0Q2FudmFzKTpcIlwiO19lbXNjcmlwdGVuX3NldF9vZmZzY3JlZW5jYW52YXNfc2l6ZV9vbl90YXJnZXRfdGhyZWFkX2pzKHRhcmdldFRocmVhZCx0YXJnZXRDYW52YXMsd2lkdGgsaGVpZ2h0KX1mdW5jdGlvbiBtYXliZUNTdHJpbmdUb0pzU3RyaW5nKGNTdHJpbmcpe3JldHVybiBjU3RyaW5nPjI/VVRGOFRvU3RyaW5nKGNTdHJpbmcpOmNTdHJpbmd9dmFyIHNwZWNpYWxIVE1MVGFyZ2V0cz1bMCx0eXBlb2YgZG9jdW1lbnQhPT1cInVuZGVmaW5lZFwiP2RvY3VtZW50OjAsdHlwZW9mIHdpbmRvdyE9PVwidW5kZWZpbmVkXCI/d2luZG93OjBdO2Z1bmN0aW9uIGZpbmRFdmVudFRhcmdldCh0YXJnZXQpe3RhcmdldD1tYXliZUNTdHJpbmdUb0pzU3RyaW5nKHRhcmdldCk7dmFyIGRvbUVsZW1lbnQ9c3BlY2lhbEhUTUxUYXJnZXRzW3RhcmdldF18fCh0eXBlb2YgZG9jdW1lbnQhPT1cInVuZGVmaW5lZFwiP2RvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGFyZ2V0KTp1bmRlZmluZWQpO3JldHVybiBkb21FbGVtZW50fWZ1bmN0aW9uIGZpbmRDYW52YXNFdmVudFRhcmdldCh0YXJnZXQpe3JldHVybiBmaW5kRXZlbnRUYXJnZXQodGFyZ2V0KX1mdW5jdGlvbiBfZW1zY3JpcHRlbl9zZXRfY2FudmFzX2VsZW1lbnRfc2l6ZV9jYWxsaW5nX3RocmVhZCh0YXJnZXQsd2lkdGgsaGVpZ2h0KXt2YXIgY2FudmFzPWZpbmRDYW52YXNFdmVudFRhcmdldCh0YXJnZXQpO2lmKCFjYW52YXMpcmV0dXJuLTQ7aWYoY2FudmFzLmNhbnZhc1NoYXJlZFB0cil7R1JPV0FCTEVfSEVBUF9JMzIoKVtjYW52YXMuY2FudmFzU2hhcmVkUHRyPj4yXT13aWR0aDtHUk9XQUJMRV9IRUFQX0kzMigpW2NhbnZhcy5jYW52YXNTaGFyZWRQdHIrND4+Ml09aGVpZ2h0fWlmKGNhbnZhcy5vZmZzY3JlZW5DYW52YXN8fCFjYW52YXMuY29udHJvbFRyYW5zZmVycmVkT2Zmc2NyZWVuKXtpZihjYW52YXMub2Zmc2NyZWVuQ2FudmFzKWNhbnZhcz1jYW52YXMub2Zmc2NyZWVuQ2FudmFzO3ZhciBhdXRvUmVzaXplVmlld3BvcnQ9ZmFsc2U7aWYoY2FudmFzLkdMY3R4T2JqZWN0JiZjYW52YXMuR0xjdHhPYmplY3QuR0xjdHgpe3ZhciBwcmV2Vmlld3BvcnQ9Y2FudmFzLkdMY3R4T2JqZWN0LkdMY3R4LmdldFBhcmFtZXRlcigyOTc4KTthdXRvUmVzaXplVmlld3BvcnQ9cHJldlZpZXdwb3J0WzBdPT09MCYmcHJldlZpZXdwb3J0WzFdPT09MCYmcHJldlZpZXdwb3J0WzJdPT09Y2FudmFzLndpZHRoJiZwcmV2Vmlld3BvcnRbM109PT1jYW52YXMuaGVpZ2h0fWNhbnZhcy53aWR0aD13aWR0aDtjYW52YXMuaGVpZ2h0PWhlaWdodDtpZihhdXRvUmVzaXplVmlld3BvcnQpe2NhbnZhcy5HTGN0eE9iamVjdC5HTGN0eC52aWV3cG9ydCgwLDAsd2lkdGgsaGVpZ2h0KX19ZWxzZSBpZihjYW52YXMuY2FudmFzU2hhcmVkUHRyKXt2YXIgdGFyZ2V0VGhyZWFkPUdST1dBQkxFX0hFQVBfSTMyKClbY2FudmFzLmNhbnZhc1NoYXJlZFB0cis4Pj4yXTtfZW1zY3JpcHRlbl9zZXRfb2Zmc2NyZWVuY2FudmFzX3NpemVfb25fdGFyZ2V0X3RocmVhZCh0YXJnZXRUaHJlYWQsdGFyZ2V0LHdpZHRoLGhlaWdodCk7cmV0dXJuIDF9ZWxzZXtyZXR1cm4tNH1yZXR1cm4gMH1mdW5jdGlvbiBfZW1zY3JpcHRlbl9zZXRfY2FudmFzX2VsZW1lbnRfc2l6ZV9tYWluX3RocmVhZCh0YXJnZXQsd2lkdGgsaGVpZ2h0KXtpZihFTlZJUk9OTUVOVF9JU19QVEhSRUFEKXJldHVybiBfZW1zY3JpcHRlbl9wcm94eV90b19tYWluX3RocmVhZF9qcyg0LDEsdGFyZ2V0LHdpZHRoLGhlaWdodCk7cmV0dXJuIF9lbXNjcmlwdGVuX3NldF9jYW52YXNfZWxlbWVudF9zaXplX2NhbGxpbmdfdGhyZWFkKHRhcmdldCx3aWR0aCxoZWlnaHQpfWZ1bmN0aW9uIF9lbXNjcmlwdGVuX3NldF9jYW52YXNfZWxlbWVudF9zaXplKHRhcmdldCx3aWR0aCxoZWlnaHQpe3ZhciBjYW52YXM9ZmluZENhbnZhc0V2ZW50VGFyZ2V0KHRhcmdldCk7aWYoY2FudmFzKXtyZXR1cm4gX2Vtc2NyaXB0ZW5fc2V0X2NhbnZhc19lbGVtZW50X3NpemVfY2FsbGluZ190aHJlYWQodGFyZ2V0LHdpZHRoLGhlaWdodCl9ZWxzZXtyZXR1cm4gX2Vtc2NyaXB0ZW5fc2V0X2NhbnZhc19lbGVtZW50X3NpemVfbWFpbl90aHJlYWQodGFyZ2V0LHdpZHRoLGhlaWdodCl9fWZ1bmN0aW9uIF9lbXNjcmlwdGVuX3NldF9jdXJyZW50X3RocmVhZF9zdGF0dXMobmV3U3RhdHVzKXt9ZnVuY3Rpb24gX193ZWJnbF9lbmFibGVfQU5HTEVfaW5zdGFuY2VkX2FycmF5cyhjdHgpe3ZhciBleHQ9Y3R4LmdldEV4dGVuc2lvbihcIkFOR0xFX2luc3RhbmNlZF9hcnJheXNcIik7aWYoZXh0KXtjdHhbXCJ2ZXJ0ZXhBdHRyaWJEaXZpc29yXCJdPWZ1bmN0aW9uKGluZGV4LGRpdmlzb3Ipe2V4dFtcInZlcnRleEF0dHJpYkRpdmlzb3JBTkdMRVwiXShpbmRleCxkaXZpc29yKX07Y3R4W1wiZHJhd0FycmF5c0luc3RhbmNlZFwiXT1mdW5jdGlvbihtb2RlLGZpcnN0LGNvdW50LHByaW1jb3VudCl7ZXh0W1wiZHJhd0FycmF5c0luc3RhbmNlZEFOR0xFXCJdKG1vZGUsZmlyc3QsY291bnQscHJpbWNvdW50KX07Y3R4W1wiZHJhd0VsZW1lbnRzSW5zdGFuY2VkXCJdPWZ1bmN0aW9uKG1vZGUsY291bnQsdHlwZSxpbmRpY2VzLHByaW1jb3VudCl7ZXh0W1wiZHJhd0VsZW1lbnRzSW5zdGFuY2VkQU5HTEVcIl0obW9kZSxjb3VudCx0eXBlLGluZGljZXMscHJpbWNvdW50KX07cmV0dXJuIDF9fWZ1bmN0aW9uIF9fd2ViZ2xfZW5hYmxlX09FU192ZXJ0ZXhfYXJyYXlfb2JqZWN0KGN0eCl7dmFyIGV4dD1jdHguZ2V0RXh0ZW5zaW9uKFwiT0VTX3ZlcnRleF9hcnJheV9vYmplY3RcIik7aWYoZXh0KXtjdHhbXCJjcmVhdGVWZXJ0ZXhBcnJheVwiXT1mdW5jdGlvbigpe3JldHVybiBleHRbXCJjcmVhdGVWZXJ0ZXhBcnJheU9FU1wiXSgpfTtjdHhbXCJkZWxldGVWZXJ0ZXhBcnJheVwiXT1mdW5jdGlvbih2YW8pe2V4dFtcImRlbGV0ZVZlcnRleEFycmF5T0VTXCJdKHZhbyl9O2N0eFtcImJpbmRWZXJ0ZXhBcnJheVwiXT1mdW5jdGlvbih2YW8pe2V4dFtcImJpbmRWZXJ0ZXhBcnJheU9FU1wiXSh2YW8pfTtjdHhbXCJpc1ZlcnRleEFycmF5XCJdPWZ1bmN0aW9uKHZhbyl7cmV0dXJuIGV4dFtcImlzVmVydGV4QXJyYXlPRVNcIl0odmFvKX07cmV0dXJuIDF9fWZ1bmN0aW9uIF9fd2ViZ2xfZW5hYmxlX1dFQkdMX2RyYXdfYnVmZmVycyhjdHgpe3ZhciBleHQ9Y3R4LmdldEV4dGVuc2lvbihcIldFQkdMX2RyYXdfYnVmZmVyc1wiKTtpZihleHQpe2N0eFtcImRyYXdCdWZmZXJzXCJdPWZ1bmN0aW9uKG4sYnVmcyl7ZXh0W1wiZHJhd0J1ZmZlcnNXRUJHTFwiXShuLGJ1ZnMpfTtyZXR1cm4gMX19ZnVuY3Rpb24gX193ZWJnbF9lbmFibGVfV0VCR0xfbXVsdGlfZHJhdyhjdHgpe3JldHVybiEhKGN0eC5tdWx0aURyYXdXZWJnbD1jdHguZ2V0RXh0ZW5zaW9uKFwiV0VCR0xfbXVsdGlfZHJhd1wiKSl9dmFyIEdMPXtjb3VudGVyOjEsYnVmZmVyczpbXSxwcm9ncmFtczpbXSxmcmFtZWJ1ZmZlcnM6W10scmVuZGVyYnVmZmVyczpbXSx0ZXh0dXJlczpbXSxzaGFkZXJzOltdLHZhb3M6W10sY29udGV4dHM6e30sb2Zmc2NyZWVuQ2FudmFzZXM6e30scXVlcmllczpbXSxzdHJpbmdDYWNoZTp7fSx1bnBhY2tBbGlnbm1lbnQ6NCxyZWNvcmRFcnJvcjpmdW5jdGlvbiByZWNvcmRFcnJvcihlcnJvckNvZGUpe2lmKCFHTC5sYXN0RXJyb3Ipe0dMLmxhc3RFcnJvcj1lcnJvckNvZGV9fSxnZXROZXdJZDpmdW5jdGlvbih0YWJsZSl7dmFyIHJldD1HTC5jb3VudGVyKys7Zm9yKHZhciBpPXRhYmxlLmxlbmd0aDtpPHJldDtpKyspe3RhYmxlW2ldPW51bGx9cmV0dXJuIHJldH0sZ2V0U291cmNlOmZ1bmN0aW9uKHNoYWRlcixjb3VudCxzdHJpbmcsbGVuZ3RoKXt2YXIgc291cmNlPVwiXCI7Zm9yKHZhciBpPTA7aTxjb3VudDsrK2kpe3ZhciBsZW49bGVuZ3RoP0dST1dBQkxFX0hFQVBfSTMyKClbbGVuZ3RoK2kqND4+Ml06LTE7c291cmNlKz1VVEY4VG9TdHJpbmcoR1JPV0FCTEVfSEVBUF9JMzIoKVtzdHJpbmcraSo0Pj4yXSxsZW48MD91bmRlZmluZWQ6bGVuKX1yZXR1cm4gc291cmNlfSxjcmVhdGVDb250ZXh0OmZ1bmN0aW9uKGNhbnZhcyx3ZWJHTENvbnRleHRBdHRyaWJ1dGVzKXtpZighY2FudmFzLmdldENvbnRleHRTYWZhcmlXZWJHTDJGaXhlZCl7Y2FudmFzLmdldENvbnRleHRTYWZhcmlXZWJHTDJGaXhlZD1jYW52YXMuZ2V0Q29udGV4dDtjYW52YXMuZ2V0Q29udGV4dD1mdW5jdGlvbih2ZXIsYXR0cnMpe3ZhciBnbD1jYW52YXMuZ2V0Q29udGV4dFNhZmFyaVdlYkdMMkZpeGVkKHZlcixhdHRycyk7cmV0dXJuIHZlcj09XCJ3ZWJnbFwiPT1nbCBpbnN0YW5jZW9mIFdlYkdMUmVuZGVyaW5nQ29udGV4dD9nbDpudWxsfX12YXIgY3R4PWNhbnZhcy5nZXRDb250ZXh0KFwid2ViZ2xcIix3ZWJHTENvbnRleHRBdHRyaWJ1dGVzKTtpZighY3R4KXJldHVybiAwO3ZhciBoYW5kbGU9R0wucmVnaXN0ZXJDb250ZXh0KGN0eCx3ZWJHTENvbnRleHRBdHRyaWJ1dGVzKTtyZXR1cm4gaGFuZGxlfSxyZWdpc3RlckNvbnRleHQ6ZnVuY3Rpb24oY3R4LHdlYkdMQ29udGV4dEF0dHJpYnV0ZXMpe3ZhciBoYW5kbGU9X21hbGxvYyg4KTtHUk9XQUJMRV9IRUFQX0kzMigpW2hhbmRsZSs0Pj4yXT1fcHRocmVhZF9zZWxmKCk7dmFyIGNvbnRleHQ9e2hhbmRsZTpoYW5kbGUsYXR0cmlidXRlczp3ZWJHTENvbnRleHRBdHRyaWJ1dGVzLHZlcnNpb246d2ViR0xDb250ZXh0QXR0cmlidXRlcy5tYWpvclZlcnNpb24sR0xjdHg6Y3R4fTtpZihjdHguY2FudmFzKWN0eC5jYW52YXMuR0xjdHhPYmplY3Q9Y29udGV4dDtHTC5jb250ZXh0c1toYW5kbGVdPWNvbnRleHQ7aWYodHlwZW9mIHdlYkdMQ29udGV4dEF0dHJpYnV0ZXMuZW5hYmxlRXh0ZW5zaW9uc0J5RGVmYXVsdD09PVwidW5kZWZpbmVkXCJ8fHdlYkdMQ29udGV4dEF0dHJpYnV0ZXMuZW5hYmxlRXh0ZW5zaW9uc0J5RGVmYXVsdCl7R0wuaW5pdEV4dGVuc2lvbnMoY29udGV4dCl9cmV0dXJuIGhhbmRsZX0sbWFrZUNvbnRleHRDdXJyZW50OmZ1bmN0aW9uKGNvbnRleHRIYW5kbGUpe0dMLmN1cnJlbnRDb250ZXh0PUdMLmNvbnRleHRzW2NvbnRleHRIYW5kbGVdO01vZHVsZS5jdHg9R0xjdHg9R0wuY3VycmVudENvbnRleHQmJkdMLmN1cnJlbnRDb250ZXh0LkdMY3R4O3JldHVybiEoY29udGV4dEhhbmRsZSYmIUdMY3R4KX0sZ2V0Q29udGV4dDpmdW5jdGlvbihjb250ZXh0SGFuZGxlKXtyZXR1cm4gR0wuY29udGV4dHNbY29udGV4dEhhbmRsZV19LGRlbGV0ZUNvbnRleHQ6ZnVuY3Rpb24oY29udGV4dEhhbmRsZSl7aWYoR0wuY3VycmVudENvbnRleHQ9PT1HTC5jb250ZXh0c1tjb250ZXh0SGFuZGxlXSlHTC5jdXJyZW50Q29udGV4dD1udWxsO2lmKHR5cGVvZiBKU0V2ZW50cz09PVwib2JqZWN0XCIpSlNFdmVudHMucmVtb3ZlQWxsSGFuZGxlcnNPblRhcmdldChHTC5jb250ZXh0c1tjb250ZXh0SGFuZGxlXS5HTGN0eC5jYW52YXMpO2lmKEdMLmNvbnRleHRzW2NvbnRleHRIYW5kbGVdJiZHTC5jb250ZXh0c1tjb250ZXh0SGFuZGxlXS5HTGN0eC5jYW52YXMpR0wuY29udGV4dHNbY29udGV4dEhhbmRsZV0uR0xjdHguY2FudmFzLkdMY3R4T2JqZWN0PXVuZGVmaW5lZDtfZnJlZShHTC5jb250ZXh0c1tjb250ZXh0SGFuZGxlXS5oYW5kbGUpO0dMLmNvbnRleHRzW2NvbnRleHRIYW5kbGVdPW51bGx9LGluaXRFeHRlbnNpb25zOmZ1bmN0aW9uKGNvbnRleHQpe2lmKCFjb250ZXh0KWNvbnRleHQ9R0wuY3VycmVudENvbnRleHQ7aWYoY29udGV4dC5pbml0RXh0ZW5zaW9uc0RvbmUpcmV0dXJuO2NvbnRleHQuaW5pdEV4dGVuc2lvbnNEb25lPXRydWU7dmFyIEdMY3R4PWNvbnRleHQuR0xjdHg7X193ZWJnbF9lbmFibGVfQU5HTEVfaW5zdGFuY2VkX2FycmF5cyhHTGN0eCk7X193ZWJnbF9lbmFibGVfT0VTX3ZlcnRleF9hcnJheV9vYmplY3QoR0xjdHgpO19fd2ViZ2xfZW5hYmxlX1dFQkdMX2RyYXdfYnVmZmVycyhHTGN0eCk7e0dMY3R4LmRpc2pvaW50VGltZXJRdWVyeUV4dD1HTGN0eC5nZXRFeHRlbnNpb24oXCJFWFRfZGlzam9pbnRfdGltZXJfcXVlcnlcIil9X193ZWJnbF9lbmFibGVfV0VCR0xfbXVsdGlfZHJhdyhHTGN0eCk7dmFyIGV4dHM9R0xjdHguZ2V0U3VwcG9ydGVkRXh0ZW5zaW9ucygpfHxbXTtleHRzLmZvckVhY2goZnVuY3Rpb24oZXh0KXtpZighZXh0LmluY2x1ZGVzKFwibG9zZV9jb250ZXh0XCIpJiYhZXh0LmluY2x1ZGVzKFwiZGVidWdcIikpe0dMY3R4LmdldEV4dGVuc2lvbihleHQpfX0pfX07dmFyIF9fZW1zY3JpcHRlbl93ZWJnbF9wb3dlcl9wcmVmZXJlbmNlcz1bXCJkZWZhdWx0XCIsXCJsb3ctcG93ZXJcIixcImhpZ2gtcGVyZm9ybWFuY2VcIl07ZnVuY3Rpb24gX2Vtc2NyaXB0ZW5fd2ViZ2xfZG9fY3JlYXRlX2NvbnRleHQodGFyZ2V0LGF0dHJpYnV0ZXMpe3ZhciBhPWF0dHJpYnV0ZXM+PjI7dmFyIHBvd2VyUHJlZmVyZW5jZT1HUk9XQUJMRV9IRUFQX0kzMigpW2ErKDI0Pj4yKV07dmFyIGNvbnRleHRBdHRyaWJ1dGVzPXtcImFscGhhXCI6ISFHUk9XQUJMRV9IRUFQX0kzMigpW2ErKDA+PjIpXSxcImRlcHRoXCI6ISFHUk9XQUJMRV9IRUFQX0kzMigpW2ErKDQ+PjIpXSxcInN0ZW5jaWxcIjohIUdST1dBQkxFX0hFQVBfSTMyKClbYSsoOD4+MildLFwiYW50aWFsaWFzXCI6ISFHUk9XQUJMRV9IRUFQX0kzMigpW2ErKDEyPj4yKV0sXCJwcmVtdWx0aXBsaWVkQWxwaGFcIjohIUdST1dBQkxFX0hFQVBfSTMyKClbYSsoMTY+PjIpXSxcInByZXNlcnZlRHJhd2luZ0J1ZmZlclwiOiEhR1JPV0FCTEVfSEVBUF9JMzIoKVthKygyMD4+MildLFwicG93ZXJQcmVmZXJlbmNlXCI6X19lbXNjcmlwdGVuX3dlYmdsX3Bvd2VyX3ByZWZlcmVuY2VzW3Bvd2VyUHJlZmVyZW5jZV0sXCJmYWlsSWZNYWpvclBlcmZvcm1hbmNlQ2F2ZWF0XCI6ISFHUk9XQUJMRV9IRUFQX0kzMigpW2ErKDI4Pj4yKV0sbWFqb3JWZXJzaW9uOkdST1dBQkxFX0hFQVBfSTMyKClbYSsoMzI+PjIpXSxtaW5vclZlcnNpb246R1JPV0FCTEVfSEVBUF9JMzIoKVthKygzNj4+MildLGVuYWJsZUV4dGVuc2lvbnNCeURlZmF1bHQ6R1JPV0FCTEVfSEVBUF9JMzIoKVthKyg0MD4+MildLGV4cGxpY2l0U3dhcENvbnRyb2w6R1JPV0FCTEVfSEVBUF9JMzIoKVthKyg0ND4+MildLHByb3h5Q29udGV4dFRvTWFpblRocmVhZDpHUk9XQUJMRV9IRUFQX0kzMigpW2ErKDQ4Pj4yKV0scmVuZGVyVmlhT2Zmc2NyZWVuQmFja0J1ZmZlcjpHUk9XQUJMRV9IRUFQX0kzMigpW2ErKDUyPj4yKV19O3ZhciBjYW52YXM9ZmluZENhbnZhc0V2ZW50VGFyZ2V0KHRhcmdldCk7aWYoIWNhbnZhcyl7cmV0dXJuIDB9aWYoY29udGV4dEF0dHJpYnV0ZXMuZXhwbGljaXRTd2FwQ29udHJvbCl7cmV0dXJuIDB9dmFyIGNvbnRleHRIYW5kbGU9R0wuY3JlYXRlQ29udGV4dChjYW52YXMsY29udGV4dEF0dHJpYnV0ZXMpO3JldHVybiBjb250ZXh0SGFuZGxlfWZ1bmN0aW9uIF9lbXNjcmlwdGVuX3dlYmdsX2NyZWF0ZV9jb250ZXh0KGEwLGExKXtyZXR1cm4gX2Vtc2NyaXB0ZW5fd2ViZ2xfZG9fY3JlYXRlX2NvbnRleHQoYTAsYTEpfWZ1bmN0aW9uIF9mZF9jbG9zZShmZCl7aWYoRU5WSVJPTk1FTlRfSVNfUFRIUkVBRClyZXR1cm4gX2Vtc2NyaXB0ZW5fcHJveHlfdG9fbWFpbl90aHJlYWRfanMoNSwxLGZkKTtyZXR1cm4gMH1mdW5jdGlvbiBfZmRfcmVhZChmZCxpb3YsaW92Y250LHBudW0pe2lmKEVOVklST05NRU5UX0lTX1BUSFJFQUQpcmV0dXJuIF9lbXNjcmlwdGVuX3Byb3h5X3RvX21haW5fdGhyZWFkX2pzKDYsMSxmZCxpb3YsaW92Y250LHBudW0pO3ZhciBzdHJlYW09U1lTQ0FMTFMuZ2V0U3RyZWFtRnJvbUZEKGZkKTt2YXIgbnVtPVNZU0NBTExTLmRvUmVhZHYoc3RyZWFtLGlvdixpb3ZjbnQpO0dST1dBQkxFX0hFQVBfSTMyKClbcG51bT4+Ml09bnVtO3JldHVybiAwfWZ1bmN0aW9uIF9mZF9zZWVrKGZkLG9mZnNldF9sb3csb2Zmc2V0X2hpZ2gsd2hlbmNlLG5ld09mZnNldCl7aWYoRU5WSVJPTk1FTlRfSVNfUFRIUkVBRClyZXR1cm4gX2Vtc2NyaXB0ZW5fcHJveHlfdG9fbWFpbl90aHJlYWRfanMoNywxLGZkLG9mZnNldF9sb3csb2Zmc2V0X2hpZ2gsd2hlbmNlLG5ld09mZnNldCl9ZnVuY3Rpb24gX2ZkX3dyaXRlKGZkLGlvdixpb3ZjbnQscG51bSl7aWYoRU5WSVJPTk1FTlRfSVNfUFRIUkVBRClyZXR1cm4gX2Vtc2NyaXB0ZW5fcHJveHlfdG9fbWFpbl90aHJlYWRfanMoOCwxLGZkLGlvdixpb3ZjbnQscG51bSk7dmFyIG51bT0wO2Zvcih2YXIgaT0wO2k8aW92Y250O2krKyl7dmFyIHB0cj1HUk9XQUJMRV9IRUFQX0kzMigpW2lvditpKjg+PjJdO3ZhciBsZW49R1JPV0FCTEVfSEVBUF9JMzIoKVtpb3YrKGkqOCs0KT4+Ml07Zm9yKHZhciBqPTA7ajxsZW47aisrKXtTWVNDQUxMUy5wcmludENoYXIoZmQsR1JPV0FCTEVfSEVBUF9VOCgpW3B0citqXSl9bnVtKz1sZW59R1JPV0FCTEVfSEVBUF9JMzIoKVtwbnVtPj4yXT1udW07cmV0dXJuIDB9ZnVuY3Rpb24gX2dldFRlbXBSZXQwKCl7cmV0dXJuIGdldFRlbXBSZXQwKCl9ZnVuY3Rpb24gX3B0aHJlYWRfY2xlYW51cF9wb3AoZXhlY3V0ZSl7dmFyIHJvdXRpbmU9UFRocmVhZC50aHJlYWRFeGl0SGFuZGxlcnMucG9wKCk7aWYoZXhlY3V0ZSlyb3V0aW5lKCl9ZnVuY3Rpb24gc3Bhd25UaHJlYWQodGhyZWFkUGFyYW1zKXtpZihFTlZJUk9OTUVOVF9JU19QVEhSRUFEKXRocm93XCJJbnRlcm5hbCBFcnJvciEgc3Bhd25UaHJlYWQoKSBjYW4gb25seSBldmVyIGJlIGNhbGxlZCBmcm9tIG1haW4gYXBwbGljYXRpb24gdGhyZWFkIVwiO3ZhciB3b3JrZXI9UFRocmVhZC5nZXROZXdXb3JrZXIoKTtpZighd29ya2VyKXtyZXR1cm4gNn1pZih3b3JrZXIucHRocmVhZCE9PXVuZGVmaW5lZCl0aHJvd1wiSW50ZXJuYWwgZXJyb3IhXCI7aWYoIXRocmVhZFBhcmFtcy5wdGhyZWFkX3B0cil0aHJvd1wiSW50ZXJuYWwgZXJyb3IsIG5vIHB0aHJlYWQgcHRyIVwiO1BUaHJlYWQucnVubmluZ1dvcmtlcnMucHVzaCh3b3JrZXIpO3ZhciB0bHNNZW1vcnk9X21hbGxvYygxMjgqNCk7Zm9yKHZhciBpPTA7aTwxMjg7KytpKXtHUk9XQUJMRV9IRUFQX0kzMigpW3Rsc01lbW9yeStpKjQ+PjJdPTB9dmFyIHN0YWNrSGlnaD10aHJlYWRQYXJhbXMuc3RhY2tCYXNlK3RocmVhZFBhcmFtcy5zdGFja1NpemU7dmFyIHB0aHJlYWQ9UFRocmVhZC5wdGhyZWFkc1t0aHJlYWRQYXJhbXMucHRocmVhZF9wdHJdPXt3b3JrZXI6d29ya2VyLHN0YWNrQmFzZTp0aHJlYWRQYXJhbXMuc3RhY2tCYXNlLHN0YWNrU2l6ZTp0aHJlYWRQYXJhbXMuc3RhY2tTaXplLGFsbG9jYXRlZE93blN0YWNrOnRocmVhZFBhcmFtcy5hbGxvY2F0ZWRPd25TdGFjayx0aHJlYWRJbmZvU3RydWN0OnRocmVhZFBhcmFtcy5wdGhyZWFkX3B0cn07dmFyIHRpcz1wdGhyZWFkLnRocmVhZEluZm9TdHJ1Y3Q+PjI7QXRvbWljcy5zdG9yZShHUk9XQUJMRV9IRUFQX1UzMigpLHRpcysoNjQ+PjIpLHRocmVhZFBhcmFtcy5kZXRhY2hlZCk7QXRvbWljcy5zdG9yZShHUk9XQUJMRV9IRUFQX1UzMigpLHRpcysoMTAwPj4yKSx0bHNNZW1vcnkpO0F0b21pY3Muc3RvcmUoR1JPV0FCTEVfSEVBUF9VMzIoKSx0aXMrKDQwPj4yKSxwdGhyZWFkLnRocmVhZEluZm9TdHJ1Y3QpO0F0b21pY3Muc3RvcmUoR1JPV0FCTEVfSEVBUF9VMzIoKSx0aXMrKDgwPj4yKSx0aHJlYWRQYXJhbXMuc3RhY2tTaXplKTtBdG9taWNzLnN0b3JlKEdST1dBQkxFX0hFQVBfVTMyKCksdGlzKyg3Nj4+Miksc3RhY2tIaWdoKTtBdG9taWNzLnN0b3JlKEdST1dBQkxFX0hFQVBfVTMyKCksdGlzKygxMDQ+PjIpLHRocmVhZFBhcmFtcy5zdGFja1NpemUpO0F0b21pY3Muc3RvcmUoR1JPV0FCTEVfSEVBUF9VMzIoKSx0aXMrKDEwNCs4Pj4yKSxzdGFja0hpZ2gpO0F0b21pY3Muc3RvcmUoR1JPV0FCTEVfSEVBUF9VMzIoKSx0aXMrKDEwNCsxMj4+MiksdGhyZWFkUGFyYW1zLmRldGFjaGVkKTt2YXIgZ2xvYmFsX2xpYmM9X2Vtc2NyaXB0ZW5fZ2V0X2dsb2JhbF9saWJjKCk7dmFyIGdsb2JhbF9sb2NhbGU9Z2xvYmFsX2xpYmMrNDA7QXRvbWljcy5zdG9yZShHUk9XQUJMRV9IRUFQX1UzMigpLHRpcysoMTcyPj4yKSxnbG9iYWxfbG9jYWxlKTt3b3JrZXIucHRocmVhZD1wdGhyZWFkO3ZhciBtc2c9e1wiY21kXCI6XCJydW5cIixcInN0YXJ0X3JvdXRpbmVcIjp0aHJlYWRQYXJhbXMuc3RhcnRSb3V0aW5lLFwiYXJnXCI6dGhyZWFkUGFyYW1zLmFyZyxcInRocmVhZEluZm9TdHJ1Y3RcIjp0aHJlYWRQYXJhbXMucHRocmVhZF9wdHIsXCJzdGFja0Jhc2VcIjp0aHJlYWRQYXJhbXMuc3RhY2tCYXNlLFwic3RhY2tTaXplXCI6dGhyZWFkUGFyYW1zLnN0YWNrU2l6ZX07d29ya2VyLnJ1blB0aHJlYWQ9ZnVuY3Rpb24oKXttc2cudGltZT1wZXJmb3JtYW5jZS5ub3coKTt3b3JrZXIucG9zdE1lc3NhZ2UobXNnLHRocmVhZFBhcmFtcy50cmFuc2Zlckxpc3QpfTtpZih3b3JrZXIubG9hZGVkKXt3b3JrZXIucnVuUHRocmVhZCgpO2RlbGV0ZSB3b3JrZXIucnVuUHRocmVhZH1yZXR1cm4gMH1mdW5jdGlvbiBfcHRocmVhZF9jcmVhdGUocHRocmVhZF9wdHIsYXR0cixzdGFydF9yb3V0aW5lLGFyZyl7aWYodHlwZW9mIFNoYXJlZEFycmF5QnVmZmVyPT09XCJ1bmRlZmluZWRcIil7ZXJyKFwiQ3VycmVudCBlbnZpcm9ubWVudCBkb2VzIG5vdCBzdXBwb3J0IFNoYXJlZEFycmF5QnVmZmVyLCBwdGhyZWFkcyBhcmUgbm90IGF2YWlsYWJsZSFcIik7cmV0dXJuIDZ9aWYoIXB0aHJlYWRfcHRyKXtlcnIoXCJwdGhyZWFkX2NyZWF0ZSBjYWxsZWQgd2l0aCBhIG51bGwgdGhyZWFkIHBvaW50ZXIhXCIpO3JldHVybiAyOH12YXIgdHJhbnNmZXJMaXN0PVtdO3ZhciBlcnJvcj0wO2lmKEVOVklST05NRU5UX0lTX1BUSFJFQUQmJih0cmFuc2Zlckxpc3QubGVuZ3RoPT09MHx8ZXJyb3IpKXtyZXR1cm4gX2Vtc2NyaXB0ZW5fc3luY19ydW5faW5fbWFpbl90aHJlYWRfNCg2ODc4NjU4NTYscHRocmVhZF9wdHIsYXR0cixzdGFydF9yb3V0aW5lLGFyZyl9aWYoZXJyb3IpcmV0dXJuIGVycm9yO3ZhciBzdGFja1NpemU9MDt2YXIgc3RhY2tCYXNlPTA7dmFyIGRldGFjaGVkPTA7aWYoYXR0ciYmYXR0ciE9LTEpe3N0YWNrU2l6ZT1HUk9XQUJMRV9IRUFQX0kzMigpW2F0dHI+PjJdO3N0YWNrU2l6ZSs9ODE5MjA7c3RhY2tCYXNlPUdST1dBQkxFX0hFQVBfSTMyKClbYXR0cis4Pj4yXTtkZXRhY2hlZD1HUk9XQUJMRV9IRUFQX0kzMigpW2F0dHIrMTI+PjJdIT09MH1lbHNle3N0YWNrU2l6ZT0yMDk3MTUyfXZhciBhbGxvY2F0ZWRPd25TdGFjaz1zdGFja0Jhc2U9PTA7aWYoYWxsb2NhdGVkT3duU3RhY2spe3N0YWNrQmFzZT1fbWVtYWxpZ24oMTYsc3RhY2tTaXplKX1lbHNle3N0YWNrQmFzZS09c3RhY2tTaXplO2Fzc2VydChzdGFja0Jhc2U+MCl9dmFyIHRocmVhZEluZm9TdHJ1Y3Q9X21hbGxvYygyMjgpO2Zvcih2YXIgaT0wO2k8MjI4Pj4yOysraSlHUk9XQUJMRV9IRUFQX1UzMigpWyh0aHJlYWRJbmZvU3RydWN0Pj4yKStpXT0wO0dST1dBQkxFX0hFQVBfSTMyKClbcHRocmVhZF9wdHI+PjJdPXRocmVhZEluZm9TdHJ1Y3Q7R1JPV0FCTEVfSEVBUF9JMzIoKVt0aHJlYWRJbmZvU3RydWN0KzEyPj4yXT10aHJlYWRJbmZvU3RydWN0O3ZhciBoZWFkUHRyPXRocmVhZEluZm9TdHJ1Y3QrMTUyO0dST1dBQkxFX0hFQVBfSTMyKClbaGVhZFB0cj4+Ml09aGVhZFB0cjt2YXIgdGhyZWFkUGFyYW1zPXtzdGFja0Jhc2U6c3RhY2tCYXNlLHN0YWNrU2l6ZTpzdGFja1NpemUsYWxsb2NhdGVkT3duU3RhY2s6YWxsb2NhdGVkT3duU3RhY2ssZGV0YWNoZWQ6ZGV0YWNoZWQsc3RhcnRSb3V0aW5lOnN0YXJ0X3JvdXRpbmUscHRocmVhZF9wdHI6dGhyZWFkSW5mb1N0cnVjdCxhcmc6YXJnLHRyYW5zZmVyTGlzdDp0cmFuc2Zlckxpc3R9O2lmKEVOVklST05NRU5UX0lTX1BUSFJFQUQpe3RocmVhZFBhcmFtcy5jbWQ9XCJzcGF3blRocmVhZFwiO3Bvc3RNZXNzYWdlKHRocmVhZFBhcmFtcyx0cmFuc2Zlckxpc3QpO3JldHVybiAwfXJldHVybiBzcGF3blRocmVhZCh0aHJlYWRQYXJhbXMpfWZ1bmN0aW9uIF9fcHRocmVhZF90ZXN0Y2FuY2VsX2pzKCl7aWYoIUVOVklST05NRU5UX0lTX1BUSFJFQUQpcmV0dXJuO3ZhciB0Yj1fcHRocmVhZF9zZWxmKCk7aWYoIXRiKXJldHVybjt2YXIgY2FuY2VsRGlzYWJsZWQ9QXRvbWljcy5sb2FkKEdST1dBQkxFX0hFQVBfVTMyKCksdGIrNTY+PjIpO2lmKGNhbmNlbERpc2FibGVkKXJldHVybjt2YXIgY2FuY2VsZWQ9QXRvbWljcy5sb2FkKEdST1dBQkxFX0hFQVBfVTMyKCksdGIrMD4+Mik7aWYoY2FuY2VsZWQ9PTIpdGhyb3dcIkNhbmNlbGVkIVwifWZ1bmN0aW9uIF9fZW1zY3JpcHRlbl9kb19wdGhyZWFkX2pvaW4odGhyZWFkLHN0YXR1cyxibG9jayl7aWYoIXRocmVhZCl7ZXJyKFwicHRocmVhZF9qb2luIGF0dGVtcHRlZCBvbiBhIG51bGwgdGhyZWFkIHBvaW50ZXIhXCIpO3JldHVybiBFUlJOT19DT0RFUy5FU1JDSH1pZihFTlZJUk9OTUVOVF9JU19QVEhSRUFEJiZfcHRocmVhZF9zZWxmKCk9PXRocmVhZCl7ZXJyKFwiUFRocmVhZCBcIit0aHJlYWQrXCIgaXMgYXR0ZW1wdGluZyB0byBqb2luIHRvIGl0c2VsZiFcIik7cmV0dXJuIEVSUk5PX0NPREVTLkVERUFETEt9ZWxzZSBpZighRU5WSVJPTk1FTlRfSVNfUFRIUkVBRCYmX2Vtc2NyaXB0ZW5fbWFpbl9icm93c2VyX3RocmVhZF9pZCgpPT10aHJlYWQpe2VycihcIk1haW4gdGhyZWFkIFwiK3RocmVhZCtcIiBpcyBhdHRlbXB0aW5nIHRvIGpvaW4gdG8gaXRzZWxmIVwiKTtyZXR1cm4gRVJSTk9fQ09ERVMuRURFQURMS312YXIgc2VsZj1HUk9XQUJMRV9IRUFQX0kzMigpW3RocmVhZCsxMj4+Ml07aWYoc2VsZiE9PXRocmVhZCl7ZXJyKFwicHRocmVhZF9qb2luIGF0dGVtcHRlZCBvbiB0aHJlYWQgXCIrdGhyZWFkK1wiLCB3aGljaCBkb2VzIG5vdCBwb2ludCB0byBhIHZhbGlkIHRocmVhZCwgb3IgZG9lcyBub3QgZXhpc3QgYW55bW9yZSFcIik7cmV0dXJuIEVSUk5PX0NPREVTLkVTUkNIfXZhciBkZXRhY2hlZD1BdG9taWNzLmxvYWQoR1JPV0FCTEVfSEVBUF9VMzIoKSx0aHJlYWQrNjQ+PjIpO2lmKGRldGFjaGVkKXtlcnIoXCJBdHRlbXB0ZWQgdG8gam9pbiB0aHJlYWQgXCIrdGhyZWFkK1wiLCB3aGljaCB3YXMgYWxyZWFkeSBkZXRhY2hlZCFcIik7cmV0dXJuIEVSUk5PX0NPREVTLkVJTlZBTH1pZihibG9jayl7X2Vtc2NyaXB0ZW5fY2hlY2tfYmxvY2tpbmdfYWxsb3dlZCgpfWZvcig7Oyl7dmFyIHRocmVhZFN0YXR1cz1BdG9taWNzLmxvYWQoR1JPV0FCTEVfSEVBUF9VMzIoKSx0aHJlYWQrMD4+Mik7aWYodGhyZWFkU3RhdHVzPT0xKXt2YXIgdGhyZWFkRXhpdENvZGU9QXRvbWljcy5sb2FkKEdST1dBQkxFX0hFQVBfVTMyKCksdGhyZWFkKzQ+PjIpO2lmKHN0YXR1cylHUk9XQUJMRV9IRUFQX0kzMigpW3N0YXR1cz4+Ml09dGhyZWFkRXhpdENvZGU7QXRvbWljcy5zdG9yZShHUk9XQUJMRV9IRUFQX1UzMigpLHRocmVhZCs2ND4+MiwxKTtpZighRU5WSVJPTk1FTlRfSVNfUFRIUkVBRCljbGVhbnVwVGhyZWFkKHRocmVhZCk7ZWxzZSBwb3N0TWVzc2FnZSh7XCJjbWRcIjpcImNsZWFudXBUaHJlYWRcIixcInRocmVhZFwiOnRocmVhZH0pO3JldHVybiAwfWlmKCFibG9jayl7cmV0dXJuIEVSUk5PX0NPREVTLkVCVVNZfV9fcHRocmVhZF90ZXN0Y2FuY2VsX2pzKCk7aWYoIUVOVklST05NRU5UX0lTX1BUSFJFQUQpX2Vtc2NyaXB0ZW5fbWFpbl90aHJlYWRfcHJvY2Vzc19xdWV1ZWRfY2FsbHMoKTtfZW1zY3JpcHRlbl9mdXRleF93YWl0KHRocmVhZCswLHRocmVhZFN0YXR1cyxFTlZJUk9OTUVOVF9JU19QVEhSRUFEPzEwMDoxKX19ZnVuY3Rpb24gX3B0aHJlYWRfam9pbih0aHJlYWQsc3RhdHVzKXtyZXR1cm4gX19lbXNjcmlwdGVuX2RvX3B0aHJlYWRfam9pbih0aHJlYWQsc3RhdHVzLHRydWUpfWZ1bmN0aW9uIF9zZXRUZW1wUmV0MCh2YWwpe3NldFRlbXBSZXQwKHZhbCl9ZnVuY3Rpb24gX3RpbWUocHRyKXt2YXIgcmV0PURhdGUubm93KCkvMWUzfDA7aWYocHRyKXtHUk9XQUJMRV9IRUFQX0kzMigpW3B0cj4+Ml09cmV0fXJldHVybiByZXR9aWYoIUVOVklST05NRU5UX0lTX1BUSFJFQUQpUFRocmVhZC5pbml0TWFpblRocmVhZEJsb2NrKCk7SW50ZXJuYWxFcnJvcj1Nb2R1bGVbXCJJbnRlcm5hbEVycm9yXCJdPWV4dGVuZEVycm9yKEVycm9yLFwiSW50ZXJuYWxFcnJvclwiKTtlbWJpbmRfaW5pdF9jaGFyQ29kZXMoKTtCaW5kaW5nRXJyb3I9TW9kdWxlW1wiQmluZGluZ0Vycm9yXCJdPWV4dGVuZEVycm9yKEVycm9yLFwiQmluZGluZ0Vycm9yXCIpO2luaXRfZW12YWwoKTtVbmJvdW5kVHlwZUVycm9yPU1vZHVsZVtcIlVuYm91bmRUeXBlRXJyb3JcIl09ZXh0ZW5kRXJyb3IoRXJyb3IsXCJVbmJvdW5kVHlwZUVycm9yXCIpO3ZhciBHTGN0eDt2YXIgcHJveGllZEZ1bmN0aW9uVGFibGU9W251bGwsX19fc3lzX2ZjbnRsNjQsX19fc3lzX2lvY3RsLF9fX3N5c19vcGVuLF9lbXNjcmlwdGVuX3NldF9jYW52YXNfZWxlbWVudF9zaXplX21haW5fdGhyZWFkLF9mZF9jbG9zZSxfZmRfcmVhZCxfZmRfc2VlayxfZmRfd3JpdGVdO3ZhciBhc21MaWJyYXJ5QXJnPXtcImtcIjpfX19hc3NlcnRfZmFpbCxcIkJcIjpfX19jeGFfdGhyZWFkX2F0ZXhpdCxcInRcIjpfX19zeXNfZmNudGw2NCxcIlRcIjpfX19zeXNfaW9jdGwsXCJVXCI6X19fc3lzX29wZW4sXCJFXCI6X19lbWJpbmRfZmluYWxpemVfdmFsdWVfb2JqZWN0LFwiSVwiOl9fZW1iaW5kX3JlZ2lzdGVyX2JpZ2ludCxcImNhXCI6X19lbWJpbmRfcmVnaXN0ZXJfYm9vbCxcImJhXCI6X19lbWJpbmRfcmVnaXN0ZXJfZW12YWwsXCJ5XCI6X19lbWJpbmRfcmVnaXN0ZXJfZmxvYXQsXCJEXCI6X19lbWJpbmRfcmVnaXN0ZXJfZnVuY3Rpb24sXCJqXCI6X19lbWJpbmRfcmVnaXN0ZXJfaW50ZWdlcixcImhcIjpfX2VtYmluZF9yZWdpc3Rlcl9tZW1vcnlfdmlldyxcInpcIjpfX2VtYmluZF9yZWdpc3Rlcl9zdGRfc3RyaW5nLFwicVwiOl9fZW1iaW5kX3JlZ2lzdGVyX3N0ZF93c3RyaW5nLFwiTVwiOl9fZW1iaW5kX3JlZ2lzdGVyX3ZhbHVlX29iamVjdCxcImlcIjpfX2VtYmluZF9yZWdpc3Rlcl92YWx1ZV9vYmplY3RfZmllbGQsXCJkYVwiOl9fZW1iaW5kX3JlZ2lzdGVyX3ZvaWQsXCIkXCI6X19lbXNjcmlwdGVuX25vdGlmeV90aHJlYWRfcXVldWUsXCJvXCI6X19lbXZhbF9kZWNyZWYsXCJhYVwiOl9fZW12YWxfZ2V0X2dsb2JhbCxcIkNcIjpfX2VtdmFsX2luY3JlZixcIlNcIjpfX2VtdmFsX25ldyxcImdcIjpfYWJvcnQsXCJ4XCI6X2Vtc2NyaXB0ZW5fYXNtX2NvbnN0X2ludCxcIlhcIjpfZW1zY3JpcHRlbl9jaGVja19ibG9ja2luZ19hbGxvd2VkLFwid1wiOl9lbXNjcmlwdGVuX2NvbmRpdGlvbmFsX3NldF9jdXJyZW50X3RocmVhZF9zdGF0dXMsXCJsXCI6X2Vtc2NyaXB0ZW5fZnV0ZXhfd2FpdCxcIm1cIjpfZW1zY3JpcHRlbl9mdXRleF93YWtlLFwicFwiOl9lbXNjcmlwdGVuX2dldF9ub3csXCJkXCI6X2Vtc2NyaXB0ZW5fbG9uZ2ptcCxcIk9cIjpfZW1zY3JpcHRlbl9tZW1jcHlfYmlnLFwiZ2FcIjpfZW1zY3JpcHRlbl9udW1fbG9naWNhbF9jb3JlcyxcIllcIjpfZW1zY3JpcHRlbl9yZWNlaXZlX29uX21haW5fdGhyZWFkX2pzLFwiUFwiOl9lbXNjcmlwdGVuX3Jlc2l6ZV9oZWFwLFwiWlwiOl9lbXNjcmlwdGVuX3NldF9jYW52YXNfZWxlbWVudF9zaXplLFwidlwiOl9lbXNjcmlwdGVuX3NldF9jdXJyZW50X3RocmVhZF9zdGF0dXMsXCJfXCI6X2Vtc2NyaXB0ZW5fd2ViZ2xfY3JlYXRlX2NvbnRleHQsXCJ1XCI6X2ZkX2Nsb3NlLFwiUlwiOl9mZF9yZWFkLFwiSFwiOl9mZF9zZWVrLFwiUVwiOl9mZF93cml0ZSxcImNcIjpfZ2V0VGVtcFJldDAsXCJOXCI6aW5pdFB0aHJlYWRzSlMsXCJLXCI6aW52b2tlX2lpLFwiclwiOmludm9rZV9paWksXCJMXCI6aW52b2tlX2lpaWlpaWlpaWksXCJKXCI6aW52b2tlX2lpaWlpaWlpaWlpaSxcIkdcIjppbnZva2VfaWlpaWpqLFwiRlwiOmludm9rZV9pamlpaSxcIm5cIjppbnZva2VfdmksXCJmXCI6aW52b2tlX3ZpaSxcInNcIjppbnZva2VfdmlpaSxcImVcIjppbnZva2VfdmlpaWksXCJhXCI6d2FzbU1lbW9yeXx8TW9kdWxlW1wid2FzbU1lbW9yeVwiXSxcIlZcIjpfcHRocmVhZF9jbGVhbnVwX3BvcCxcIldcIjpfcHRocmVhZF9jbGVhbnVwX3B1c2gsXCJBXCI6X3B0aHJlYWRfY3JlYXRlLFwiZWFcIjpfcHRocmVhZF9qb2luLFwiYlwiOl9zZXRUZW1wUmV0MCxcImZhXCI6X3RpbWV9O3ZhciBhc209Y3JlYXRlV2FzbSgpO3ZhciBfX193YXNtX2NhbGxfY3RvcnM9TW9kdWxlW1wiX19fd2FzbV9jYWxsX2N0b3JzXCJdPWZ1bmN0aW9uKCl7cmV0dXJuKF9fX3dhc21fY2FsbF9jdG9ycz1Nb2R1bGVbXCJfX193YXNtX2NhbGxfY3RvcnNcIl09TW9kdWxlW1wiYXNtXCJdW1wiaGFcIl0pLmFwcGx5KG51bGwsYXJndW1lbnRzKX07dmFyIF9tYWxsb2M9TW9kdWxlW1wiX21hbGxvY1wiXT1mdW5jdGlvbigpe3JldHVybihfbWFsbG9jPU1vZHVsZVtcIl9tYWxsb2NcIl09TW9kdWxlW1wiYXNtXCJdW1wiaWFcIl0pLmFwcGx5KG51bGwsYXJndW1lbnRzKX07dmFyIF9mcmVlPU1vZHVsZVtcIl9mcmVlXCJdPWZ1bmN0aW9uKCl7cmV0dXJuKF9mcmVlPU1vZHVsZVtcIl9mcmVlXCJdPU1vZHVsZVtcImFzbVwiXVtcImphXCJdKS5hcHBseShudWxsLGFyZ3VtZW50cyl9O3ZhciBfZW1zY3JpcHRlbl90bHNfaW5pdD1Nb2R1bGVbXCJfZW1zY3JpcHRlbl90bHNfaW5pdFwiXT1mdW5jdGlvbigpe3JldHVybihfZW1zY3JpcHRlbl90bHNfaW5pdD1Nb2R1bGVbXCJfZW1zY3JpcHRlbl90bHNfaW5pdFwiXT1Nb2R1bGVbXCJhc21cIl1bXCJrYVwiXSkuYXBwbHkobnVsbCxhcmd1bWVudHMpfTt2YXIgX19fZ2V0VHlwZU5hbWU9TW9kdWxlW1wiX19fZ2V0VHlwZU5hbWVcIl09ZnVuY3Rpb24oKXtyZXR1cm4oX19fZ2V0VHlwZU5hbWU9TW9kdWxlW1wiX19fZ2V0VHlwZU5hbWVcIl09TW9kdWxlW1wiYXNtXCJdW1wibWFcIl0pLmFwcGx5KG51bGwsYXJndW1lbnRzKX07dmFyIF9fX2VtYmluZF9yZWdpc3Rlcl9uYXRpdmVfYW5kX2J1aWx0aW5fdHlwZXM9TW9kdWxlW1wiX19fZW1iaW5kX3JlZ2lzdGVyX25hdGl2ZV9hbmRfYnVpbHRpbl90eXBlc1wiXT1mdW5jdGlvbigpe3JldHVybihfX19lbWJpbmRfcmVnaXN0ZXJfbmF0aXZlX2FuZF9idWlsdGluX3R5cGVzPU1vZHVsZVtcIl9fX2VtYmluZF9yZWdpc3Rlcl9uYXRpdmVfYW5kX2J1aWx0aW5fdHlwZXNcIl09TW9kdWxlW1wiYXNtXCJdW1wibmFcIl0pLmFwcGx5KG51bGwsYXJndW1lbnRzKX07dmFyIF9lbXNjcmlwdGVuX2N1cnJlbnRfdGhyZWFkX3Byb2Nlc3NfcXVldWVkX2NhbGxzPU1vZHVsZVtcIl9lbXNjcmlwdGVuX2N1cnJlbnRfdGhyZWFkX3Byb2Nlc3NfcXVldWVkX2NhbGxzXCJdPWZ1bmN0aW9uKCl7cmV0dXJuKF9lbXNjcmlwdGVuX2N1cnJlbnRfdGhyZWFkX3Byb2Nlc3NfcXVldWVkX2NhbGxzPU1vZHVsZVtcIl9lbXNjcmlwdGVuX2N1cnJlbnRfdGhyZWFkX3Byb2Nlc3NfcXVldWVkX2NhbGxzXCJdPU1vZHVsZVtcImFzbVwiXVtcIm9hXCJdKS5hcHBseShudWxsLGFyZ3VtZW50cyl9O3ZhciBfZW1zY3JpcHRlbl9yZWdpc3Rlcl9tYWluX2Jyb3dzZXJfdGhyZWFkX2lkPU1vZHVsZVtcIl9lbXNjcmlwdGVuX3JlZ2lzdGVyX21haW5fYnJvd3Nlcl90aHJlYWRfaWRcIl09ZnVuY3Rpb24oKXtyZXR1cm4oX2Vtc2NyaXB0ZW5fcmVnaXN0ZXJfbWFpbl9icm93c2VyX3RocmVhZF9pZD1Nb2R1bGVbXCJfZW1zY3JpcHRlbl9yZWdpc3Rlcl9tYWluX2Jyb3dzZXJfdGhyZWFkX2lkXCJdPU1vZHVsZVtcImFzbVwiXVtcInBhXCJdKS5hcHBseShudWxsLGFyZ3VtZW50cyl9O3ZhciBfZW1zY3JpcHRlbl9tYWluX2Jyb3dzZXJfdGhyZWFkX2lkPU1vZHVsZVtcIl9lbXNjcmlwdGVuX21haW5fYnJvd3Nlcl90aHJlYWRfaWRcIl09ZnVuY3Rpb24oKXtyZXR1cm4oX2Vtc2NyaXB0ZW5fbWFpbl9icm93c2VyX3RocmVhZF9pZD1Nb2R1bGVbXCJfZW1zY3JpcHRlbl9tYWluX2Jyb3dzZXJfdGhyZWFkX2lkXCJdPU1vZHVsZVtcImFzbVwiXVtcInFhXCJdKS5hcHBseShudWxsLGFyZ3VtZW50cyl9O3ZhciBfX2Vtc2NyaXB0ZW5fZG9fZGlzcGF0Y2hfdG9fdGhyZWFkPU1vZHVsZVtcIl9fZW1zY3JpcHRlbl9kb19kaXNwYXRjaF90b190aHJlYWRcIl09ZnVuY3Rpb24oKXtyZXR1cm4oX19lbXNjcmlwdGVuX2RvX2Rpc3BhdGNoX3RvX3RocmVhZD1Nb2R1bGVbXCJfX2Vtc2NyaXB0ZW5fZG9fZGlzcGF0Y2hfdG9fdGhyZWFkXCJdPU1vZHVsZVtcImFzbVwiXVtcInJhXCJdKS5hcHBseShudWxsLGFyZ3VtZW50cyl9O3ZhciBfZW1zY3JpcHRlbl9zeW5jX3J1bl9pbl9tYWluX3RocmVhZF80PU1vZHVsZVtcIl9lbXNjcmlwdGVuX3N5bmNfcnVuX2luX21haW5fdGhyZWFkXzRcIl09ZnVuY3Rpb24oKXtyZXR1cm4oX2Vtc2NyaXB0ZW5fc3luY19ydW5faW5fbWFpbl90aHJlYWRfND1Nb2R1bGVbXCJfZW1zY3JpcHRlbl9zeW5jX3J1bl9pbl9tYWluX3RocmVhZF80XCJdPU1vZHVsZVtcImFzbVwiXVtcInNhXCJdKS5hcHBseShudWxsLGFyZ3VtZW50cyl9O3ZhciBfZW1zY3JpcHRlbl9tYWluX3RocmVhZF9wcm9jZXNzX3F1ZXVlZF9jYWxscz1Nb2R1bGVbXCJfZW1zY3JpcHRlbl9tYWluX3RocmVhZF9wcm9jZXNzX3F1ZXVlZF9jYWxsc1wiXT1mdW5jdGlvbigpe3JldHVybihfZW1zY3JpcHRlbl9tYWluX3RocmVhZF9wcm9jZXNzX3F1ZXVlZF9jYWxscz1Nb2R1bGVbXCJfZW1zY3JpcHRlbl9tYWluX3RocmVhZF9wcm9jZXNzX3F1ZXVlZF9jYWxsc1wiXT1Nb2R1bGVbXCJhc21cIl1bXCJ0YVwiXSkuYXBwbHkobnVsbCxhcmd1bWVudHMpfTt2YXIgX2Vtc2NyaXB0ZW5fcnVuX2luX21haW5fcnVudGltZV90aHJlYWRfanM9TW9kdWxlW1wiX2Vtc2NyaXB0ZW5fcnVuX2luX21haW5fcnVudGltZV90aHJlYWRfanNcIl09ZnVuY3Rpb24oKXtyZXR1cm4oX2Vtc2NyaXB0ZW5fcnVuX2luX21haW5fcnVudGltZV90aHJlYWRfanM9TW9kdWxlW1wiX2Vtc2NyaXB0ZW5fcnVuX2luX21haW5fcnVudGltZV90aHJlYWRfanNcIl09TW9kdWxlW1wiYXNtXCJdW1widWFcIl0pLmFwcGx5KG51bGwsYXJndW1lbnRzKX07dmFyIF9fZW1zY3JpcHRlbl9jYWxsX29uX3RocmVhZD1Nb2R1bGVbXCJfX2Vtc2NyaXB0ZW5fY2FsbF9vbl90aHJlYWRcIl09ZnVuY3Rpb24oKXtyZXR1cm4oX19lbXNjcmlwdGVuX2NhbGxfb25fdGhyZWFkPU1vZHVsZVtcIl9fZW1zY3JpcHRlbl9jYWxsX29uX3RocmVhZFwiXT1Nb2R1bGVbXCJhc21cIl1bXCJ2YVwiXSkuYXBwbHkobnVsbCxhcmd1bWVudHMpfTt2YXIgX19lbXNjcmlwdGVuX3RocmVhZF9pbml0PU1vZHVsZVtcIl9fZW1zY3JpcHRlbl90aHJlYWRfaW5pdFwiXT1mdW5jdGlvbigpe3JldHVybihfX2Vtc2NyaXB0ZW5fdGhyZWFkX2luaXQ9TW9kdWxlW1wiX19lbXNjcmlwdGVuX3RocmVhZF9pbml0XCJdPU1vZHVsZVtcImFzbVwiXVtcIndhXCJdKS5hcHBseShudWxsLGFyZ3VtZW50cyl9O3ZhciBfZW1zY3JpcHRlbl9nZXRfZ2xvYmFsX2xpYmM9TW9kdWxlW1wiX2Vtc2NyaXB0ZW5fZ2V0X2dsb2JhbF9saWJjXCJdPWZ1bmN0aW9uKCl7cmV0dXJuKF9lbXNjcmlwdGVuX2dldF9nbG9iYWxfbGliYz1Nb2R1bGVbXCJfZW1zY3JpcHRlbl9nZXRfZ2xvYmFsX2xpYmNcIl09TW9kdWxlW1wiYXNtXCJdW1wieGFcIl0pLmFwcGx5KG51bGwsYXJndW1lbnRzKX07dmFyIF9wdGhyZWFkX3NlbGY9TW9kdWxlW1wiX3B0aHJlYWRfc2VsZlwiXT1mdW5jdGlvbigpe3JldHVybihfcHRocmVhZF9zZWxmPU1vZHVsZVtcIl9wdGhyZWFkX3NlbGZcIl09TW9kdWxlW1wiYXNtXCJdW1wieWFcIl0pLmFwcGx5KG51bGwsYXJndW1lbnRzKX07dmFyIF9fX3B0aHJlYWRfdHNkX3J1bl9kdG9ycz1Nb2R1bGVbXCJfX19wdGhyZWFkX3RzZF9ydW5fZHRvcnNcIl09ZnVuY3Rpb24oKXtyZXR1cm4oX19fcHRocmVhZF90c2RfcnVuX2R0b3JzPU1vZHVsZVtcIl9fX3B0aHJlYWRfdHNkX3J1bl9kdG9yc1wiXT1Nb2R1bGVbXCJhc21cIl1bXCJ6YVwiXSkuYXBwbHkobnVsbCxhcmd1bWVudHMpfTt2YXIgc3RhY2tTYXZlPU1vZHVsZVtcInN0YWNrU2F2ZVwiXT1mdW5jdGlvbigpe3JldHVybihzdGFja1NhdmU9TW9kdWxlW1wic3RhY2tTYXZlXCJdPU1vZHVsZVtcImFzbVwiXVtcIkFhXCJdKS5hcHBseShudWxsLGFyZ3VtZW50cyl9O3ZhciBzdGFja1Jlc3RvcmU9TW9kdWxlW1wic3RhY2tSZXN0b3JlXCJdPWZ1bmN0aW9uKCl7cmV0dXJuKHN0YWNrUmVzdG9yZT1Nb2R1bGVbXCJzdGFja1Jlc3RvcmVcIl09TW9kdWxlW1wiYXNtXCJdW1wiQmFcIl0pLmFwcGx5KG51bGwsYXJndW1lbnRzKX07dmFyIHN0YWNrQWxsb2M9TW9kdWxlW1wic3RhY2tBbGxvY1wiXT1mdW5jdGlvbigpe3JldHVybihzdGFja0FsbG9jPU1vZHVsZVtcInN0YWNrQWxsb2NcIl09TW9kdWxlW1wiYXNtXCJdW1wiQ2FcIl0pLmFwcGx5KG51bGwsYXJndW1lbnRzKX07dmFyIF9lbXNjcmlwdGVuX3N0YWNrX3NldF9saW1pdHM9TW9kdWxlW1wiX2Vtc2NyaXB0ZW5fc3RhY2tfc2V0X2xpbWl0c1wiXT1mdW5jdGlvbigpe3JldHVybihfZW1zY3JpcHRlbl9zdGFja19zZXRfbGltaXRzPU1vZHVsZVtcIl9lbXNjcmlwdGVuX3N0YWNrX3NldF9saW1pdHNcIl09TW9kdWxlW1wiYXNtXCJdW1wiRGFcIl0pLmFwcGx5KG51bGwsYXJndW1lbnRzKX07dmFyIF9zZXRUaHJldz1Nb2R1bGVbXCJfc2V0VGhyZXdcIl09ZnVuY3Rpb24oKXtyZXR1cm4oX3NldFRocmV3PU1vZHVsZVtcIl9zZXRUaHJld1wiXT1Nb2R1bGVbXCJhc21cIl1bXCJFYVwiXSkuYXBwbHkobnVsbCxhcmd1bWVudHMpfTt2YXIgX21lbWFsaWduPU1vZHVsZVtcIl9tZW1hbGlnblwiXT1mdW5jdGlvbigpe3JldHVybihfbWVtYWxpZ249TW9kdWxlW1wiX21lbWFsaWduXCJdPU1vZHVsZVtcImFzbVwiXVtcIkZhXCJdKS5hcHBseShudWxsLGFyZ3VtZW50cyl9O3ZhciBkeW5DYWxsX2ppaWlpaWlpaWk9TW9kdWxlW1wiZHluQ2FsbF9qaWlpaWlpaWlpXCJdPWZ1bmN0aW9uKCl7cmV0dXJuKGR5bkNhbGxfamlpaWlpaWlpaT1Nb2R1bGVbXCJkeW5DYWxsX2ppaWlpaWlpaWlcIl09TW9kdWxlW1wiYXNtXCJdW1wiR2FcIl0pLmFwcGx5KG51bGwsYXJndW1lbnRzKX07dmFyIGR5bkNhbGxfaWlpaWpqPU1vZHVsZVtcImR5bkNhbGxfaWlpaWpqXCJdPWZ1bmN0aW9uKCl7cmV0dXJuKGR5bkNhbGxfaWlpaWpqPU1vZHVsZVtcImR5bkNhbGxfaWlpaWpqXCJdPU1vZHVsZVtcImFzbVwiXVtcIkhhXCJdKS5hcHBseShudWxsLGFyZ3VtZW50cyl9O3ZhciBkeW5DYWxsX2lqaWlpPU1vZHVsZVtcImR5bkNhbGxfaWppaWlcIl09ZnVuY3Rpb24oKXtyZXR1cm4oZHluQ2FsbF9pamlpaT1Nb2R1bGVbXCJkeW5DYWxsX2lqaWlpXCJdPU1vZHVsZVtcImFzbVwiXVtcIklhXCJdKS5hcHBseShudWxsLGFyZ3VtZW50cyl9O3ZhciBkeW5DYWxsX2ppamk9TW9kdWxlW1wiZHluQ2FsbF9qaWppXCJdPWZ1bmN0aW9uKCl7cmV0dXJuKGR5bkNhbGxfamlqaT1Nb2R1bGVbXCJkeW5DYWxsX2ppamlcIl09TW9kdWxlW1wiYXNtXCJdW1wiSmFcIl0pLmFwcGx5KG51bGwsYXJndW1lbnRzKX07dmFyIGR5bkNhbGxfamlpaWlpaWlpPU1vZHVsZVtcImR5bkNhbGxfamlpaWlpaWlpXCJdPWZ1bmN0aW9uKCl7cmV0dXJuKGR5bkNhbGxfamlpaWlpaWlpPU1vZHVsZVtcImR5bkNhbGxfamlpaWlpaWlpXCJdPU1vZHVsZVtcImFzbVwiXVtcIkthXCJdKS5hcHBseShudWxsLGFyZ3VtZW50cyl9O3ZhciBkeW5DYWxsX2ppaWlpaWk9TW9kdWxlW1wiZHluQ2FsbF9qaWlpaWlpXCJdPWZ1bmN0aW9uKCl7cmV0dXJuKGR5bkNhbGxfamlpaWlpaT1Nb2R1bGVbXCJkeW5DYWxsX2ppaWlpaWlcIl09TW9kdWxlW1wiYXNtXCJdW1wiTGFcIl0pLmFwcGx5KG51bGwsYXJndW1lbnRzKX07dmFyIGR5bkNhbGxfamlpaWlpPU1vZHVsZVtcImR5bkNhbGxfamlpaWlpXCJdPWZ1bmN0aW9uKCl7cmV0dXJuKGR5bkNhbGxfamlpaWlpPU1vZHVsZVtcImR5bkNhbGxfamlpaWlpXCJdPU1vZHVsZVtcImFzbVwiXVtcIk1hXCJdKS5hcHBseShudWxsLGFyZ3VtZW50cyl9O3ZhciBkeW5DYWxsX2lpaWppaT1Nb2R1bGVbXCJkeW5DYWxsX2lpaWppaVwiXT1mdW5jdGlvbigpe3JldHVybihkeW5DYWxsX2lpaWppaT1Nb2R1bGVbXCJkeW5DYWxsX2lpaWppaVwiXT1Nb2R1bGVbXCJhc21cIl1bXCJOYVwiXSkuYXBwbHkobnVsbCxhcmd1bWVudHMpfTt2YXIgX19lbXNjcmlwdGVuX2FsbG93X21haW5fcnVudGltZV9xdWV1ZWRfY2FsbHM9TW9kdWxlW1wiX19lbXNjcmlwdGVuX2FsbG93X21haW5fcnVudGltZV9xdWV1ZWRfY2FsbHNcIl09NjAwMjMyO3ZhciBfX2Vtc2NyaXB0ZW5fbWFpbl90aHJlYWRfZnV0ZXg9TW9kdWxlW1wiX19lbXNjcmlwdGVuX21haW5fdGhyZWFkX2Z1dGV4XCJdPTg5NjcxNjtmdW5jdGlvbiBpbnZva2VfdmkoaW5kZXgsYTEpe3ZhciBzcD1zdGFja1NhdmUoKTt0cnl7d2FzbVRhYmxlLmdldChpbmRleCkoYTEpfWNhdGNoKGUpe3N0YWNrUmVzdG9yZShzcCk7aWYoZSE9PWUrMCYmZSE9PVwibG9uZ2ptcFwiKXRocm93IGU7X3NldFRocmV3KDEsMCl9fWZ1bmN0aW9uIGludm9rZV92aWlpKGluZGV4LGExLGEyLGEzKXt2YXIgc3A9c3RhY2tTYXZlKCk7dHJ5e3dhc21UYWJsZS5nZXQoaW5kZXgpKGExLGEyLGEzKX1jYXRjaChlKXtzdGFja1Jlc3RvcmUoc3ApO2lmKGUhPT1lKzAmJmUhPT1cImxvbmdqbXBcIil0aHJvdyBlO19zZXRUaHJldygxLDApfX1mdW5jdGlvbiBpbnZva2VfdmlpaWkoaW5kZXgsYTEsYTIsYTMsYTQpe3ZhciBzcD1zdGFja1NhdmUoKTt0cnl7d2FzbVRhYmxlLmdldChpbmRleCkoYTEsYTIsYTMsYTQpfWNhdGNoKGUpe3N0YWNrUmVzdG9yZShzcCk7aWYoZSE9PWUrMCYmZSE9PVwibG9uZ2ptcFwiKXRocm93IGU7X3NldFRocmV3KDEsMCl9fWZ1bmN0aW9uIGludm9rZV9paWlpaWlpaWlpKGluZGV4LGExLGEyLGEzLGE0LGE1LGE2LGE3LGE4LGE5KXt2YXIgc3A9c3RhY2tTYXZlKCk7dHJ5e3JldHVybiB3YXNtVGFibGUuZ2V0KGluZGV4KShhMSxhMixhMyxhNCxhNSxhNixhNyxhOCxhOSl9Y2F0Y2goZSl7c3RhY2tSZXN0b3JlKHNwKTtpZihlIT09ZSswJiZlIT09XCJsb25nam1wXCIpdGhyb3cgZTtfc2V0VGhyZXcoMSwwKX19ZnVuY3Rpb24gaW52b2tlX3ZpaShpbmRleCxhMSxhMil7dmFyIHNwPXN0YWNrU2F2ZSgpO3RyeXt3YXNtVGFibGUuZ2V0KGluZGV4KShhMSxhMil9Y2F0Y2goZSl7c3RhY2tSZXN0b3JlKHNwKTtpZihlIT09ZSswJiZlIT09XCJsb25nam1wXCIpdGhyb3cgZTtfc2V0VGhyZXcoMSwwKX19ZnVuY3Rpb24gaW52b2tlX2lpKGluZGV4LGExKXt2YXIgc3A9c3RhY2tTYXZlKCk7dHJ5e3JldHVybiB3YXNtVGFibGUuZ2V0KGluZGV4KShhMSl9Y2F0Y2goZSl7c3RhY2tSZXN0b3JlKHNwKTtpZihlIT09ZSswJiZlIT09XCJsb25nam1wXCIpdGhyb3cgZTtfc2V0VGhyZXcoMSwwKX19ZnVuY3Rpb24gaW52b2tlX2lpaWlpaWlpaWlpaShpbmRleCxhMSxhMixhMyxhNCxhNSxhNixhNyxhOCxhOSxhMTAsYTExKXt2YXIgc3A9c3RhY2tTYXZlKCk7dHJ5e3JldHVybiB3YXNtVGFibGUuZ2V0KGluZGV4KShhMSxhMixhMyxhNCxhNSxhNixhNyxhOCxhOSxhMTAsYTExKX1jYXRjaChlKXtzdGFja1Jlc3RvcmUoc3ApO2lmKGUhPT1lKzAmJmUhPT1cImxvbmdqbXBcIil0aHJvdyBlO19zZXRUaHJldygxLDApfX1mdW5jdGlvbiBpbnZva2VfaWlpKGluZGV4LGExLGEyKXt2YXIgc3A9c3RhY2tTYXZlKCk7dHJ5e3JldHVybiB3YXNtVGFibGUuZ2V0KGluZGV4KShhMSxhMil9Y2F0Y2goZSl7c3RhY2tSZXN0b3JlKHNwKTtpZihlIT09ZSswJiZlIT09XCJsb25nam1wXCIpdGhyb3cgZTtfc2V0VGhyZXcoMSwwKX19ZnVuY3Rpb24gaW52b2tlX2lpaWlqaihpbmRleCxhMSxhMixhMyxhNCxhNSxhNixhNyl7dmFyIHNwPXN0YWNrU2F2ZSgpO3RyeXtyZXR1cm4gZHluQ2FsbF9paWlpamooaW5kZXgsYTEsYTIsYTMsYTQsYTUsYTYsYTcpfWNhdGNoKGUpe3N0YWNrUmVzdG9yZShzcCk7aWYoZSE9PWUrMCYmZSE9PVwibG9uZ2ptcFwiKXRocm93IGU7X3NldFRocmV3KDEsMCl9fWZ1bmN0aW9uIGludm9rZV9pamlpaShpbmRleCxhMSxhMixhMyxhNCxhNSl7dmFyIHNwPXN0YWNrU2F2ZSgpO3RyeXtyZXR1cm4gZHluQ2FsbF9pamlpaShpbmRleCxhMSxhMixhMyxhNCxhNSl9Y2F0Y2goZSl7c3RhY2tSZXN0b3JlKHNwKTtpZihlIT09ZSswJiZlIT09XCJsb25nam1wXCIpdGhyb3cgZTtfc2V0VGhyZXcoMSwwKX19TW9kdWxlW1wiUFRocmVhZFwiXT1QVGhyZWFkO01vZHVsZVtcIlBUaHJlYWRcIl09UFRocmVhZDtNb2R1bGVbXCJ3YXNtTWVtb3J5XCJdPXdhc21NZW1vcnk7TW9kdWxlW1wiRXhpdFN0YXR1c1wiXT1FeGl0U3RhdHVzO3ZhciBjYWxsZWRSdW47ZnVuY3Rpb24gRXhpdFN0YXR1cyhzdGF0dXMpe3RoaXMubmFtZT1cIkV4aXRTdGF0dXNcIjt0aGlzLm1lc3NhZ2U9XCJQcm9ncmFtIHRlcm1pbmF0ZWQgd2l0aCBleGl0KFwiK3N0YXR1cytcIilcIjt0aGlzLnN0YXR1cz1zdGF0dXN9ZGVwZW5kZW5jaWVzRnVsZmlsbGVkPWZ1bmN0aW9uIHJ1bkNhbGxlcigpe2lmKCFjYWxsZWRSdW4pcnVuKCk7aWYoIWNhbGxlZFJ1bilkZXBlbmRlbmNpZXNGdWxmaWxsZWQ9cnVuQ2FsbGVyfTtmdW5jdGlvbiBydW4oYXJncyl7YXJncz1hcmdzfHxhcmd1bWVudHNfO2lmKHJ1bkRlcGVuZGVuY2llcz4wKXtyZXR1cm59aWYoRU5WSVJPTk1FTlRfSVNfUFRIUkVBRCl7cmVhZHlQcm9taXNlUmVzb2x2ZShNb2R1bGUpO2luaXRSdW50aW1lKCk7cG9zdE1lc3NhZ2Uoe1wiY21kXCI6XCJsb2FkZWRcIn0pO3JldHVybn1wcmVSdW4oKTtpZihydW5EZXBlbmRlbmNpZXM+MCl7cmV0dXJufWZ1bmN0aW9uIGRvUnVuKCl7aWYoY2FsbGVkUnVuKXJldHVybjtjYWxsZWRSdW49dHJ1ZTtNb2R1bGVbXCJjYWxsZWRSdW5cIl09dHJ1ZTtpZihBQk9SVClyZXR1cm47aW5pdFJ1bnRpbWUoKTtyZWFkeVByb21pc2VSZXNvbHZlKE1vZHVsZSk7aWYoTW9kdWxlW1wib25SdW50aW1lSW5pdGlhbGl6ZWRcIl0pTW9kdWxlW1wib25SdW50aW1lSW5pdGlhbGl6ZWRcIl0oKTtwb3N0UnVuKCl9aWYoTW9kdWxlW1wic2V0U3RhdHVzXCJdKXtNb2R1bGVbXCJzZXRTdGF0dXNcIl0oXCJSdW5uaW5nLi4uXCIpO3NldFRpbWVvdXQoZnVuY3Rpb24oKXtzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7TW9kdWxlW1wic2V0U3RhdHVzXCJdKFwiXCIpfSwxKTtkb1J1bigpfSwxKX1lbHNle2RvUnVuKCl9fU1vZHVsZVtcInJ1blwiXT1ydW47ZnVuY3Rpb24gZXhpdChzdGF0dXMsaW1wbGljaXQpe0VYSVRTVEFUVVM9c3RhdHVzO2lmKGltcGxpY2l0JiZrZWVwUnVudGltZUFsaXZlKCkmJnN0YXR1cz09PTApe3JldHVybn1pZighaW1wbGljaXQpe2lmKEVOVklST05NRU5UX0lTX1BUSFJFQUQpe3Bvc3RNZXNzYWdlKHtcImNtZFwiOlwiZXhpdFByb2Nlc3NcIixcInJldHVybkNvZGVcIjpzdGF0dXN9KTt0aHJvdyBuZXcgRXhpdFN0YXR1cyhzdGF0dXMpfWVsc2V7fX1pZihrZWVwUnVudGltZUFsaXZlKCkpe31lbHNle1BUaHJlYWQudGVybWluYXRlQWxsVGhyZWFkcygpO2V4aXRSdW50aW1lKCk7aWYoTW9kdWxlW1wib25FeGl0XCJdKU1vZHVsZVtcIm9uRXhpdFwiXShzdGF0dXMpO0FCT1JUPXRydWV9cXVpdF8oc3RhdHVzLG5ldyBFeGl0U3RhdHVzKHN0YXR1cykpfWlmKE1vZHVsZVtcInByZUluaXRcIl0pe2lmKHR5cGVvZiBNb2R1bGVbXCJwcmVJbml0XCJdPT1cImZ1bmN0aW9uXCIpTW9kdWxlW1wicHJlSW5pdFwiXT1bTW9kdWxlW1wicHJlSW5pdFwiXV07d2hpbGUoTW9kdWxlW1wicHJlSW5pdFwiXS5sZW5ndGg+MCl7TW9kdWxlW1wicHJlSW5pdFwiXS5wb3AoKSgpfX1pZihFTlZJUk9OTUVOVF9JU19QVEhSRUFEKXtub0V4aXRSdW50aW1lPWZhbHNlO1BUaHJlYWQuaW5pdFdvcmtlcigpfXJ1bigpO1xuXG5cbiAgcmV0dXJuIE1vZHVsZS5yZWFkeVxufVxuKTtcbn0pKCk7XG5leHBvcnQgZGVmYXVsdCBNb2R1bGU7Il0sIm5hbWVzIjpbImltcG9ydCIsIk1vZHVsZSIsIkdST1dBQkxFX0hFQVBfSTgiLCJ3YXNtTWVtb3J5IiwiYnVmZmVyIiwidXBkYXRlR2xvYmFsQnVmZmVyQW5kVmlld3MiLCJIRUFQOCIsIkdST1dBQkxFX0hFQVBfVTgiLCJIRUFQVTgiLCJHUk9XQUJMRV9IRUFQX0kxNiIsIkhFQVAxNiIsIkdST1dBQkxFX0hFQVBfVTE2IiwiSEVBUFUxNiIsIkdST1dBQkxFX0hFQVBfSTMyIiwiSEVBUDMyIiwiR1JPV0FCTEVfSEVBUF9VMzIiLCJIRUFQVTMyIiwiR1JPV0FCTEVfSEVBUF9GNjQiLCJIRUFQRjY0IiwicmVhZHlQcm9taXNlUmVzb2x2ZSIsInJlYWR5UHJvbWlzZVJlamVjdCIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0Iiwia2V5IiwibW9kdWxlT3ZlcnJpZGVzIiwiaGFzT3duUHJvcGVydHkiLCJyZWFkQmluYXJ5IiwiYXJndW1lbnRzXyIsInF1aXRfIiwic3RhdHVzIiwidG9UaHJvdyIsIkVOVklST05NRU5UX0lTX1BUSFJFQUQiLCJzY3JpcHREaXJlY3RvcnkiLCJsb2NhdGVGaWxlIiwicGF0aCIsInNlbGYiLCJsb2NhdGlvbiIsImhyZWYiLCJpbmRleE9mIiwic3Vic3RyIiwibGFzdEluZGV4T2YiLCJ1cmwiLCJ4aHIiLCJYTUxIdHRwUmVxdWVzdCIsIm9wZW4iLCJyZXNwb25zZVR5cGUiLCJzZW5kIiwiVWludDhBcnJheSIsInJlc3BvbnNlIiwib3V0IiwiY29uc29sZSIsImxvZyIsImJpbmQiLCJlcnIiLCJ3YXJuIiwid2FzbUJpbmFyeSIsInRlbXBSZXQwIiwiQXRvbWljcyIsImxvYWQiLCJzdG9yZSIsImNvbXBhcmVFeGNoYW5nZSIsIndhc21Nb2R1bGUiLCJub0V4aXRSdW50aW1lIiwiV2ViQXNzZW1ibHkiLCJhYm9ydCIsIkhFQVBGMzIiLCJBQk9SVCIsImFzc2VydCIsImNvbmRpdGlvbiIsInRleHQiLCJVVEY4QXJyYXlUb1N0cmluZyIsImhlYXAiLCJpZHgiLCJtYXhCeXRlc1RvUmVhZCIsImVuZElkeCIsInN0ciIsInUwIiwidTEiLCJ1MiIsIlN0cmluZyIsImZyb21DaGFyQ29kZSIsImNoIiwiVVRGOFRvU3RyaW5nIiwicHRyIiwic3RyaW5nVG9VVEY4Iiwib3V0UHRyIiwibWF4Qnl0ZXNUb1dyaXRlIiwib3V0SWR4Iiwic3RhcnRJZHgiLCJpIiwibGVuZ3RoIiwidSIsImNoYXJDb2RlQXQiLCJzdHJpbmdUb1VURjhBcnJheSIsImxlbmd0aEJ5dGVzVVRGOCIsImxlbiIsIlVURjE2VG9TdHJpbmciLCJjb2RlVW5pdCIsInN0cmluZ1RvVVRGMTYiLCJ1bmRlZmluZWQiLCJzdGFydFB0ciIsIm51bUNoYXJzVG9Xcml0ZSIsImxlbmd0aEJ5dGVzVVRGMTYiLCJVVEYzMlRvU3RyaW5nIiwidXRmMzIiLCJzdHJpbmdUb1VURjMyIiwiZW5kUHRyIiwibGVuZ3RoQnl0ZXNVVEYzMiIsImJ1ZiIsIkludDhBcnJheSIsIkludDE2QXJyYXkiLCJJbnQzMkFycmF5IiwiVWludDE2QXJyYXkiLCJVaW50MzJBcnJheSIsIkZsb2F0MzJBcnJheSIsIkZsb2F0NjRBcnJheSIsIndhc21UYWJsZSIsIklOSVRJQUxfTUVNT1JZIiwiTWVtb3J5IiwiU2hhcmVkQXJyYXlCdWZmZXIiLCJFcnJvciIsImJ5dGVMZW5ndGgiLCJfX0FUUFJFUlVOX18iLCJfX0FUSU5JVF9fIiwiX19BVEVYSVRfXyIsIl9fQVRQT1NUUlVOX18iLCJpbml0UnVudGltZSIsImNhbGxSdW50aW1lQ2FsbGJhY2tzIiwicnVuRGVwZW5kZW5jaWVzIiwicnVuRGVwZW5kZW5jeVdhdGNoZXIiLCJkZXBlbmRlbmNpZXNGdWxmaWxsZWQiLCJ3aGF0IiwiZXJyb3IiLCJzdGFjayIsImUiLCJSdW50aW1lRXJyb3IiLCJpc0RhdGFVUkkiLCJmaWxlbmFtZSIsInN0YXJ0c1dpdGgiLCJ3YXNtQmluYXJ5RmlsZSIsIlVSTCIsInRvU3RyaW5nIiwiZ2V0QmluYXJ5IiwiZmlsZSIsIkFTTV9DT05TVFMiLCIkMCIsIiQxIiwic2V0VGltZW91dCIsIl9fZW1zY3JpcHRlbl9kb19kaXNwYXRjaF90b190aHJlYWQiLCJjYWxsYmFja3MiLCJjYWxsYmFjayIsInNoaWZ0IiwiZnVuYyIsImFyZyIsImdldCIsIl9lbXNjcmlwdGVuX2Z1dGV4X3dha2UiLCJhZGRyIiwiY291bnQiLCJJbmZpbml0eSIsIm1haW5UaHJlYWRXYWl0QWRkcmVzcyIsIl9fZW1zY3JpcHRlbl9tYWluX3RocmVhZF9mdXRleCIsIm1haW5UaHJlYWRXb2tlbiIsInJldCIsIm5vdGlmeSIsImNsZWFudXBUaHJlYWQiLCJwdGhyZWFkX3B0ciIsInB0aHJlYWQiLCJQVGhyZWFkIiwicHRocmVhZHMiLCJ3b3JrZXIiLCJyZXR1cm5Xb3JrZXJUb1Bvb2wiLCJfZW1zY3JpcHRlbl9nZXRfbm93IiwidW51c2VkV29ya2VycyIsInJ1bm5pbmdXb3JrZXJzIiwidGxzSW5pdEZ1bmN0aW9ucyIsImluaXRNYWluVGhyZWFkQmxvY2siLCJwdGhyZWFkUG9vbFNpemUiLCJuYXZpZ2F0b3IiLCJoYXJkd2FyZUNvbmN1cnJlbmN5IiwiYWxsb2NhdGVVbnVzZWRXb3JrZXIiLCJ0YiIsIl9tYWxsb2MiLCJoZWFkUHRyIiwidGxzTWVtb3J5IiwiX19lbXNjcmlwdGVuX3RocmVhZF9pbml0IiwiX2Vtc2NyaXB0ZW5fcmVnaXN0ZXJfbWFpbl9icm93c2VyX3RocmVhZF9pZCIsImluaXRXb3JrZXIiLCJ0aHJlYWRFeGl0SGFuZGxlcnMiLCJydW5FeGl0SGFuZGxlcnMiLCJwb3AiLCJfcHRocmVhZF9zZWxmIiwiX19fcHRocmVhZF90c2RfcnVuX2R0b3JzIiwicnVuRXhpdEhhbmRsZXJzQW5kRGVpbml0VGhyZWFkIiwiZXhpdENvZGUiLCJzZXRFeGl0U3RhdHVzIiwidGhyZWFkRXhpdCIsInBvc3RNZXNzYWdlIiwidGhyZWFkQ2FuY2VsIiwidGVybWluYXRlQWxsVGhyZWFkcyIsInQiLCJ0ZXJtaW5hdGUiLCJmcmVlVGhyZWFkRGF0YSIsInRocmVhZEluZm9TdHJ1Y3QiLCJfZnJlZSIsImFsbG9jYXRlZE93blN0YWNrIiwic3RhY2tCYXNlIiwicnVuV2l0aG91dE1haW5UaHJlYWRRdWV1ZWRDYWxscyIsInB1c2giLCJzcGxpY2UiLCJfX2Vtc2NyaXB0ZW5fYWxsb3dfbWFpbl9ydW50aW1lX3F1ZXVlZF9jYWxscyIsInJlY2VpdmVPYmplY3RUcmFuc2ZlciIsImRhdGEiLCJ0aHJlYWRJbml0IiwibG9hZFdhc21Nb2R1bGVUb1dvcmtlciIsIm9uRmluaXNoZWRMb2FkaW5nIiwib25tZXNzYWdlIiwiZCIsImNtZCIsImN1cnJlbnRQcm94aWVkT3BlcmF0aW9uQ2FsbGVyVGhyZWFkIiwidGhyZWFkIiwidGFyZ2V0VGhyZWFkIiwiX2Vtc2NyaXB0ZW5fbWFpbl90aHJlYWRfcHJvY2Vzc19xdWV1ZWRfY2FsbHMiLCJzcGF3blRocmVhZCIsImtpbGxUaHJlYWQiLCJjYW5jZWxUaHJlYWQiLCJsb2FkZWQiLCJydW5QdGhyZWFkIiwiYWxlcnQiLCJpbXBsaWNpdCIsIkV4aXRTdGF0dXMiLCJrZWVwUnVudGltZUFsaXZlIiwiZXhpdCIsInRhcmdldCIsIm9uZXJyb3IiLCJsaW5lbm8iLCJtZXNzYWdlIiwicHRocmVhZE1haW5KcyIsIldvcmtlciIsImdldE5ld1dvcmtlciIsImJ1c3lTcGluV2FpdCIsIm1zZWNzIiwicGVyZm9ybWFuY2UiLCJub3ciLCJydW50aW1lS2VlcGFsaXZlQ291bnRlciIsIl9wdGhyZWFkX2NsZWFudXBfcHVzaCIsInJvdXRpbmUiLCJzdGFja1RvcCIsInN0YWNrTWF4IiwiX2Vtc2NyaXB0ZW5fc3RhY2tfc2V0X2xpbWl0cyIsInN0YWNrUmVzdG9yZSIsIlNZU0NBTExTIiwibWFwcGluZ3MiLCJidWZmZXJzIiwicHJpbnRDaGFyIiwic3RyZWFtIiwiY3VyciIsInZhcmFyZ3MiLCJnZXRTdHIiLCJnZXQ2NCIsImxvdyIsImhpZ2giLCJfX19zeXNfZmNudGw2NCIsImZkIiwiX2Vtc2NyaXB0ZW5fcHJveHlfdG9fbWFpbl90aHJlYWRfanMiLCJfX19zeXNfaW9jdGwiLCJvcCIsIl9fX3N5c19vcGVuIiwiZmxhZ3MiLCJzdHJ1Y3RSZWdpc3RyYXRpb25zIiwicnVuRGVzdHJ1Y3RvcnMiLCJkZXN0cnVjdG9ycyIsImRlbCIsInNpbXBsZVJlYWRWYWx1ZUZyb21Qb2ludGVyIiwicG9pbnRlciIsInRoaXMiLCJhd2FpdGluZ0RlcGVuZGVuY2llcyIsInJlZ2lzdGVyZWRUeXBlcyIsInR5cGVEZXBlbmRlbmNpZXMiLCJtYWtlTGVnYWxGdW5jdGlvbk5hbWUiLCJuYW1lIiwiZiIsInJlcGxhY2UiLCJjcmVhdGVOYW1lZEZ1bmN0aW9uIiwiYm9keSIsIkZ1bmN0aW9uIiwiZXh0ZW5kRXJyb3IiLCJiYXNlRXJyb3JUeXBlIiwiZXJyb3JOYW1lIiwiZXJyb3JDbGFzcyIsInByb3RvdHlwZSIsIk9iamVjdCIsImNyZWF0ZSIsImNvbnN0cnVjdG9yIiwiSW50ZXJuYWxFcnJvciIsInRocm93SW50ZXJuYWxFcnJvciIsIndoZW5EZXBlbmRlbnRUeXBlc0FyZVJlc29sdmVkIiwibXlUeXBlcyIsImRlcGVuZGVudFR5cGVzIiwiZ2V0VHlwZUNvbnZlcnRlcnMiLCJvbkNvbXBsZXRlIiwidHlwZUNvbnZlcnRlcnMiLCJteVR5cGVDb252ZXJ0ZXJzIiwicmVnaXN0ZXJUeXBlIiwiZm9yRWFjaCIsInR5cGUiLCJBcnJheSIsInVucmVnaXN0ZXJlZFR5cGVzIiwicmVnaXN0ZXJlZCIsImR0IiwiZ2V0U2hpZnRGcm9tU2l6ZSIsInNpemUiLCJUeXBlRXJyb3IiLCJlbWJpbmRfY2hhckNvZGVzIiwicmVhZExhdGluMVN0cmluZyIsImMiLCJCaW5kaW5nRXJyb3IiLCJ0aHJvd0JpbmRpbmdFcnJvciIsInJhd1R5cGUiLCJyZWdpc3RlcmVkSW5zdGFuY2UiLCJvcHRpb25zIiwiaWdub3JlRHVwbGljYXRlUmVnaXN0cmF0aW9ucyIsImNiIiwiZW12YWxfZnJlZV9saXN0IiwiZW12YWxfaGFuZGxlX2FycmF5IiwidmFsdWUiLCJfX2VtdmFsX2RlY3JlZiIsImhhbmRsZSIsInJlZmNvdW50IiwiX19lbXZhbF9yZWdpc3RlciIsIl9lbWJpbmRfcmVwciIsInYiLCJmbG9hdFJlYWRWYWx1ZUZyb21Qb2ludGVyIiwiZHluQ2FsbCIsInNpZyIsImFyZ3MiLCJpbmNsdWRlcyIsImFwcGx5IiwiY29uY2F0IiwiY2FsbCIsImR5bkNhbGxMZWdhY3kiLCJlbWJpbmRfX3JlcXVpcmVGdW5jdGlvbiIsInNpZ25hdHVyZSIsInJhd0Z1bmN0aW9uIiwiYXJnQ2FjaGUiLCJmcCIsImFyZ3VtZW50cyIsIlVuYm91bmRUeXBlRXJyb3IiLCJnZXRUeXBlTmFtZSIsIl9fX2dldFR5cGVOYW1lIiwicnYiLCJpbnRlZ2VyUmVhZFZhbHVlRnJvbVBvaW50ZXIiLCJzaWduZWQiLCJlbXZhbF9zeW1ib2xzIiwiZW12YWxfZ2V0X2dsb2JhbCIsImdsb2JhbFRoaXMiLCJyZXF1aXJlUmVnaXN0ZXJlZFR5cGUiLCJodW1hbk5hbWUiLCJpbXBsIiwiZW12YWxfbmV3ZXJzIiwicmVhZEFzbUNvbnN0QXJnc0FycmF5IiwiX2Vtc2NyaXB0ZW5fZnV0ZXhfd2FpdCIsInZhbCIsInRpbWVvdXQiLCJ3YWl0IiwiaW5kZXgiLCJzeW5jIiwibnVtQ2FsbEFyZ3MiLCJzdGFja1NhdmUiLCJzZXJpYWxpemVkTnVtQ2FsbEFyZ3MiLCJzdGFja0FsbG9jIiwiYiIsIl9lbXNjcmlwdGVuX3J1bl9pbl9tYWluX3J1bnRpbWVfdGhyZWFkX2pzIiwiX2Vtc2NyaXB0ZW5fcmVjZWl2ZV9vbl9tYWluX3RocmVhZF9qc19jYWxsQXJncyIsImVtc2NyaXB0ZW5fcmVhbGxvY19idWZmZXIiLCJncm93IiwiSlNFdmVudHMiLCJpbkV2ZW50SGFuZGxlciIsInJlbW92ZUFsbEV2ZW50TGlzdGVuZXJzIiwiZXZlbnRIYW5kbGVycyIsIl9yZW1vdmVIYW5kbGVyIiwiZGVmZXJyZWRDYWxscyIsInJlZ2lzdGVyUmVtb3ZlRXZlbnRMaXN0ZW5lcnMiLCJyZW1vdmVFdmVudExpc3RlbmVyc1JlZ2lzdGVyZWQiLCJkZWZlckNhbGwiLCJ0YXJnZXRGdW5jdGlvbiIsInByZWNlZGVuY2UiLCJhcmdzTGlzdCIsImFycmF5c0hhdmVFcXVhbENvbnRlbnQiLCJhcnJBIiwiYXJyQiIsInNvcnQiLCJ4IiwieSIsInJlbW92ZURlZmVycmVkQ2FsbHMiLCJjYW5QZXJmb3JtRXZlbnRIYW5kbGVyUmVxdWVzdHMiLCJjdXJyZW50RXZlbnRIYW5kbGVyIiwiYWxsb3dzRGVmZXJyZWRDYWxscyIsInJ1bkRlZmVycmVkQ2FsbHMiLCJyZW1vdmVBbGxIYW5kbGVyc09uVGFyZ2V0IiwiZXZlbnRUeXBlU3RyaW5nIiwiaCIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJldmVudExpc3RlbmVyRnVuYyIsInVzZUNhcHR1cmUiLCJyZWdpc3Rlck9yUmVtb3ZlSGFuZGxlciIsImV2ZW50SGFuZGxlciIsImpzRXZlbnRIYW5kbGVyIiwiZXZlbnQiLCJoYW5kbGVyRnVuYyIsImNhbGxiYWNrZnVuYyIsImFkZEV2ZW50TGlzdGVuZXIiLCJxdWV1ZUV2ZW50SGFuZGxlck9uVGhyZWFkX2lpaWkiLCJldmVudEhhbmRsZXJGdW5jIiwiZXZlbnRUeXBlSWQiLCJldmVudERhdGEiLCJ1c2VyRGF0YSIsIl9fZW1zY3JpcHRlbl9jYWxsX29uX3RocmVhZCIsImdldFRhcmdldFRocmVhZEZvckV2ZW50Q2FsbGJhY2siLCJnZXROb2RlTmFtZUZvclRhcmdldCIsIndpbmRvdyIsInNjcmVlbiIsIm5vZGVOYW1lIiwiZnVsbHNjcmVlbkVuYWJsZWQiLCJkb2N1bWVudCIsIndlYmtpdEZ1bGxzY3JlZW5FbmFibGVkIiwic3BlY2lhbEhUTUxUYXJnZXRzIiwiZmluZENhbnZhc0V2ZW50VGFyZ2V0IiwiY1N0cmluZyIsInF1ZXJ5U2VsZWN0b3IiLCJmaW5kRXZlbnRUYXJnZXQiLCJfZW1zY3JpcHRlbl9zZXRfY2FudmFzX2VsZW1lbnRfc2l6ZV9jYWxsaW5nX3RocmVhZCIsIndpZHRoIiwiaGVpZ2h0IiwiY2FudmFzIiwiY2FudmFzU2hhcmVkUHRyIiwib2Zmc2NyZWVuQ2FudmFzIiwiY29udHJvbFRyYW5zZmVycmVkT2Zmc2NyZWVuIiwidGFyZ2V0Q2FudmFzIiwianNTdHJpbmciLCJ0YXJnZXRDYW52YXNQdHIiLCJfZW1zY3JpcHRlbl9zZXRfb2Zmc2NyZWVuY2FudmFzX3NpemVfb25fdGFyZ2V0X3RocmVhZF9qcyIsIl9lbXNjcmlwdGVuX3NldF9vZmZzY3JlZW5jYW52YXNfc2l6ZV9vbl90YXJnZXRfdGhyZWFkIiwiYXV0b1Jlc2l6ZVZpZXdwb3J0IiwiR0xjdHhPYmplY3QiLCJHTGN0eCIsInByZXZWaWV3cG9ydCIsImdldFBhcmFtZXRlciIsInZpZXdwb3J0IiwiX2Vtc2NyaXB0ZW5fc2V0X2NhbnZhc19lbGVtZW50X3NpemVfbWFpbl90aHJlYWQiLCJHTCIsImNvdW50ZXIiLCJwcm9ncmFtcyIsImZyYW1lYnVmZmVycyIsInJlbmRlcmJ1ZmZlcnMiLCJ0ZXh0dXJlcyIsInNoYWRlcnMiLCJ2YW9zIiwiY29udGV4dHMiLCJvZmZzY3JlZW5DYW52YXNlcyIsInF1ZXJpZXMiLCJzdHJpbmdDYWNoZSIsInVucGFja0FsaWdubWVudCIsInJlY29yZEVycm9yIiwiZXJyb3JDb2RlIiwibGFzdEVycm9yIiwiZ2V0TmV3SWQiLCJ0YWJsZSIsImdldFNvdXJjZSIsInNoYWRlciIsInN0cmluZyIsInNvdXJjZSIsImNyZWF0ZUNvbnRleHQiLCJ3ZWJHTENvbnRleHRBdHRyaWJ1dGVzIiwiZ2V0Q29udGV4dFNhZmFyaVdlYkdMMkZpeGVkIiwiZ2V0Q29udGV4dCIsInZlciIsImF0dHJzIiwiZ2wiLCJXZWJHTFJlbmRlcmluZ0NvbnRleHQiLCJjdHgiLCJyZWdpc3RlckNvbnRleHQiLCJjb250ZXh0IiwiYXR0cmlidXRlcyIsInZlcnNpb24iLCJtYWpvclZlcnNpb24iLCJlbmFibGVFeHRlbnNpb25zQnlEZWZhdWx0IiwiaW5pdEV4dGVuc2lvbnMiLCJtYWtlQ29udGV4dEN1cnJlbnQiLCJjb250ZXh0SGFuZGxlIiwiY3VycmVudENvbnRleHQiLCJkZWxldGVDb250ZXh0IiwiaW5pdEV4dGVuc2lvbnNEb25lIiwiZXh0IiwiZ2V0RXh0ZW5zaW9uIiwiZGl2aXNvciIsIm1vZGUiLCJmaXJzdCIsInByaW1jb3VudCIsImluZGljZXMiLCJfX3dlYmdsX2VuYWJsZV9BTkdMRV9pbnN0YW5jZWRfYXJyYXlzIiwidmFvIiwiX193ZWJnbF9lbmFibGVfT0VTX3ZlcnRleF9hcnJheV9vYmplY3QiLCJuIiwiYnVmcyIsIl9fd2ViZ2xfZW5hYmxlX1dFQkdMX2RyYXdfYnVmZmVycyIsImRpc2pvaW50VGltZXJRdWVyeUV4dCIsIm11bHRpRHJhd1dlYmdsIiwiZ2V0U3VwcG9ydGVkRXh0ZW5zaW9ucyIsIl9fZW1zY3JpcHRlbl93ZWJnbF9wb3dlcl9wcmVmZXJlbmNlcyIsIl9mZF9jbG9zZSIsIl9mZF9yZWFkIiwiaW92IiwiaW92Y250IiwicG51bSIsImdldFN0cmVhbUZyb21GRCIsIm51bSIsImRvUmVhZHYiLCJfZmRfc2VlayIsIm9mZnNldF9sb3ciLCJvZmZzZXRfaGlnaCIsIndoZW5jZSIsIm5ld09mZnNldCIsIl9mZF93cml0ZSIsImoiLCJ0aHJlYWRQYXJhbXMiLCJzdGFja0hpZ2giLCJzdGFja1NpemUiLCJ0aXMiLCJkZXRhY2hlZCIsImdsb2JhbF9sb2NhbGUiLCJfZW1zY3JpcHRlbl9nZXRfZ2xvYmFsX2xpYmMiLCJtc2ciLCJzdGFydFJvdXRpbmUiLCJ0aW1lIiwidHJhbnNmZXJMaXN0IiwiX19wdGhyZWFkX3Rlc3RjYW5jZWxfanMiLCJjb2RlcyIsImVtYmluZF9pbml0X2NoYXJDb2RlcyIsImNhbGxlZFJ1biIsInByb3hpZWRGdW5jdGlvblRhYmxlIiwiYXNtTGlicmFyeUFyZyIsImxpbmUiLCJhMCIsImExIiwic3RydWN0VHlwZSIsInJlZyIsInJhd0NvbnN0cnVjdG9yIiwicmF3RGVzdHJ1Y3RvciIsImZpZWxkUmVjb3JkcyIsImZpZWxkcyIsIm1hcCIsImZpZWxkIiwiZ2V0dGVyUmV0dXJuVHlwZSIsInNldHRlckFyZ3VtZW50VHlwZSIsImZpZWxkVHlwZXMiLCJmaWVsZE5hbWUiLCJnZXR0ZXIiLCJnZXR0ZXJDb250ZXh0Iiwic2V0dGVyIiwic2V0dGVyQ29udGV4dCIsInJlYWQiLCJ3cml0ZSIsIm8iLCJkZXN0cnVjdG9yRnVuY3Rpb24iLCJwcmltaXRpdmVUeXBlIiwibWluUmFuZ2UiLCJtYXhSYW5nZSIsInRydWVWYWx1ZSIsImZhbHNlVmFsdWUiLCJ3dCIsImFyZ0NvdW50IiwicmF3QXJnVHlwZXNBZGRyIiwicmF3SW52b2tlciIsImZuIiwiYXJnVHlwZXMiLCJmaXJzdEVsZW1lbnQiLCJhcnJheSIsImhlYXAzMlZlY3RvclRvQXJyYXkiLCJudW1Bcmd1bWVudHMiLCJvdmVybG9hZFRhYmxlIiwicHJvdG8iLCJtZXRob2ROYW1lIiwicHJldkZ1bmMiLCJlbnN1cmVPdmVybG9hZFRhYmxlIiwiZXhwb3NlUHVibGljU3ltYm9sIiwidHlwZXMiLCJ1bmJvdW5kVHlwZXMiLCJzZWVuIiwidmlzaXQiLCJqb2luIiwidGhyb3dVbmJvdW5kVHlwZUVycm9yIiwiaW52b2tlckFyZ3NBcnJheSIsInNsaWNlIiwicmVwbGFjZVB1YmxpY1N5bWJvbCIsImNsYXNzVHlwZSIsImNwcEludm9rZXJGdW5jIiwiY3BwVGFyZ2V0RnVuYyIsImlzQ2xhc3NNZXRob2RGdW5jIiwibmVlZHNEZXN0cnVjdG9yU3RhY2siLCJyZXR1cm5zIiwiYXJnc0xpc3RXaXJlZCIsImludm9rZXJGbkJvZHkiLCJkdG9yU3RhY2siLCJhcmdzMSIsImFyZ3MyIiwicGFyYW1OYW1lIiwiYXJndW1lbnRMaXN0IiwiZHVtbXkiLCJvYmoiLCJyIiwibmV3XyIsImNyYWZ0SW52b2tlckZ1bmN0aW9uIiwiZnJvbVdpcmVUeXBlIiwiYml0c2hpZnQiLCJpc1Vuc2lnbmVkVHlwZSIsImRhdGFUeXBlSW5kZXgiLCJUQSIsImRlY29kZU1lbW9yeVZpZXciLCJzdGRTdHJpbmdJc1VURjgiLCJkZWNvZGVTdGFydFB0ciIsImN1cnJlbnRCeXRlUHRyIiwic3RyaW5nU2VnbWVudCIsImEiLCJBcnJheUJ1ZmZlciIsInZhbHVlSXNPZlR5cGVTdHJpbmciLCJVaW50OENsYW1wZWRBcnJheSIsImNoYXJDb2RlIiwiY2hhclNpemUiLCJkZWNvZGVTdHJpbmciLCJlbmNvZGVTdHJpbmciLCJnZXRIZWFwIiwibGVuZ3RoQnl0ZXNVVEYiLCJIRUFQIiwiY29uc3RydWN0b3JTaWduYXR1cmUiLCJkZXN0cnVjdG9yU2lnbmF0dXJlIiwiZ2V0dGVyU2lnbmF0dXJlIiwic2V0dGVyU2lnbmF0dXJlIiwiaXNWb2lkIiwidGFyZ2V0VGhyZWFkSWQiLCJtYWluVGhyZWFkSWQiLCJzeW1ib2wiLCJhZGRyZXNzIiwicmVxdWlyZUhhbmRsZSIsIm5ld2VyIiwiZnVuY3Rpb25Cb2R5IiwiY3JhZnRFbXZhbEFsbG9jYXRvciIsImNvZGUiLCJzaWdQdHIiLCJhcmdidWYiLCJkb3VibGUiLCJyZWFkQXNtQ29uc3RBcmdzIiwiZXhwZWN0ZWRTdGF0dXMiLCJuZXdTdGF0dXMiLCJlbnYiLCJfc2V0VGhyZXciLCJfbG9uZ2ptcCIsImRlc3QiLCJzcmMiLCJjb3B5V2l0aGluIiwicmVxdWVzdGVkU2l6ZSIsIm9sZFNpemUiLCJtYXhIZWFwU2l6ZSIsImN1dERvd24iLCJvdmVyR3Jvd25IZWFwU2l6ZSIsIk1hdGgiLCJtaW4iLCJtYXgiLCJwb3dlclByZWZlcmVuY2UiLCJjb250ZXh0QXR0cmlidXRlcyIsIm1pbm9yVmVyc2lvbiIsImV4cGxpY2l0U3dhcENvbnRyb2wiLCJwcm94eUNvbnRleHRUb01haW5UaHJlYWQiLCJyZW5kZXJWaWFPZmZzY3JlZW5CYWNrQnVmZmVyIiwic3AiLCJhMiIsImEzIiwiYTQiLCJhNSIsImE2IiwiYTciLCJhOCIsImE5IiwiYTEwIiwiYTExIiwiZHluQ2FsbF9paWlpamoiLCJkeW5DYWxsX2lqaWlpIiwiZXhlY3V0ZSIsImF0dHIiLCJzdGFydF9yb3V0aW5lIiwiX2Vtc2NyaXB0ZW5fc3luY19ydW5faW5fbWFpbl90aHJlYWRfNCIsIl9tZW1hbGlnbiIsImJsb2NrIiwiX2Vtc2NyaXB0ZW5fbWFpbl9icm93c2VyX3RocmVhZF9pZCIsInRocmVhZFN0YXR1cyIsInRocmVhZEV4aXRDb2RlIiwiX19lbXNjcmlwdGVuX2RvX3B0aHJlYWRfam9pbiIsIkRhdGUiLCJpbmZvIiwicmVjZWl2ZUluc3RhbmNlIiwiaW5zdGFuY2UiLCJtb2R1bGUiLCJleHBvcnRzIiwidW5zaGlmdCIsIm51bVdvcmtlcnNUb0xvYWQiLCJ3IiwiaWQiLCJjbGVhckludGVydmFsIiwicmVtb3ZlUnVuRGVwZW5kZW5jeSIsInJlY2VpdmVJbnN0YW50aWF0aW9uUmVzdWx0IiwicmVzdWx0IiwiaW5zdGFudGlhdGVBcnJheUJ1ZmZlciIsInJlY2VpdmVyIiwiZmV0Y2giLCJ0aGVuIiwiY3JlZGVudGlhbHMiLCJjYXRjaCIsImJpbmFyeSIsImluc3RhbnRpYXRlIiwicmVhc29uIiwiaW5zdGFudGlhdGVTdHJlYW1pbmciLCJjcmVhdGVXYXNtIiwicnVuIiwicHJlUnVuIiwiZG9SdW4iLCJwb3N0UnVuIiwicnVuQ2FsbGVyIiwicmVhZHkiXSwic291cmNlUm9vdCI6IiJ9