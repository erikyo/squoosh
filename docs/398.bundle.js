"use strict";(self.webpackChunksquoosh=self.webpackChunksquoosh||[]).push([[398],{398:(n,r,e)=>{e.r(r),e.d(r,{default:()=>t});const t=("file:///C:/Users/Dell7010/Desktop/web/tw/squoosh/codecs/webp/dec/webp_dec.js",function(n){var r,t;(n=void 0!==(n=n||{})?n:{}).ready=new Promise((function(n,e){r=n,t=e}));var o,a={};for(o in n)n.hasOwnProperty(o)&&(a[o]=n[o]);var i,u=[],c="";c=self.location.href,c=0!==(c="file:///C:/Users/Dell7010/Desktop/web/tw/squoosh/codecs/webp/dec/webp_dec.js").indexOf("blob:")?c.substr(0,c.lastIndexOf("/")+1):"",i=function(n){var r=new XMLHttpRequest;return r.open("GET",n,!1),r.responseType="arraybuffer",r.send(null),new Uint8Array(r.response)},n.print||console.log.bind(console);var f,s,l=n.printErr||console.warn.bind(console);for(o in a)a.hasOwnProperty(o)&&(n[o]=a[o]);a=null,n.arguments&&(u=n.arguments),n.thisProgram&&n.thisProgram,n.quit&&n.quit,n.wasmBinary&&(f=n.wasmBinary),n.noExitRuntime,"object"!=typeof WebAssembly&&B("no native wasm support detected");var p=!1,d=new TextDecoder("utf8");function v(n,r){if(!n)return"";for(var e=n+r,t=n;!(t>=e)&&g[t];)++t;return d.decode(g.subarray(n,t))}var h,y,g,m,w,b,A,T,_,P=new TextDecoder("utf-16le");function C(n,r){for(var e=n,t=e>>1,o=t+r/2;!(t>=o)&&w[t];)++t;return e=t<<1,P.decode(g.subarray(n,e))}function E(n,r,e){if(void 0===e&&(e=2147483647),e<2)return 0;for(var t=r,o=(e-=2)<2*n.length?e/2:n.length,a=0;a<o;++a){var i=n.charCodeAt(a);m[r>>1]=i,r+=2}return m[r>>1]=0,r-t}function k(n){return 2*n.length}function W(n,r){for(var e=0,t="";!(e>=r/4);){var o=b[n+4*e>>2];if(0==o)break;if(++e,o>=65536){var a=o-65536;t+=String.fromCharCode(55296|a>>10,56320|1023&a)}else t+=String.fromCharCode(o)}return t}function F(n,r,e){if(void 0===e&&(e=2147483647),e<4)return 0;for(var t=r,o=t+e-4,a=0;a<n.length;++a){var i=n.charCodeAt(a);if(i>=55296&&i<=57343&&(i=65536+((1023&i)<<10)|1023&n.charCodeAt(++a)),b[r>>2]=i,(r+=4)+4>o)break}return b[r>>2]=0,r-t}function R(n){for(var r=0,e=0;e<n.length;++e){var t=n.charCodeAt(e);t>=55296&&t<=57343&&++e,r+=4}return r}function I(r){h=r,n.HEAP8=y=new Int8Array(r),n.HEAP16=m=new Int16Array(r),n.HEAP32=b=new Int32Array(r),n.HEAPU8=g=new Uint8Array(r),n.HEAPU16=w=new Uint16Array(r),n.HEAPU32=A=new Uint32Array(r),n.HEAPF32=T=new Float32Array(r),n.HEAPF64=_=new Float64Array(r)}n.INITIAL_MEMORY;var U,S,O=[],j=[],D=[],x=0,q=null,M=null;function B(r){n.onAbort&&n.onAbort(r),l(r+=""),p=!0,r="abort("+r+"). Build with -s ASSERTIONS=1 for more info.";var e=new WebAssembly.RuntimeError(r);throw t(e),e}function H(n){return n.startsWith("data:application/octet-stream;base64,")}if(n.preloadedImages={},n.preloadedAudios={},n.locateFile)H(V="webp_dec.wasm")||(S=V,V=n.locateFile?n.locateFile(S,c):c+S);else var V=new URL(e(505),e.b).toString();function z(n){try{if(n==V&&f)return new Uint8Array(f);if(i)return i(n);throw"both async and sync fetching of the wasm failed"}catch(n){B(n)}}function N(r){for(;r.length>0;){var e=r.shift();if("function"!=typeof e){var t=e.func;"number"==typeof t?void 0===e.arg?U.get(t)():U.get(t)(e.arg):t(void 0===e.arg?null:e.arg)}else e(n)}}function L(n){switch(n){case 1:return 0;case 2:return 1;case 4:return 2;case 8:return 3;default:throw new TypeError("Unknown type size: "+n)}}var G=void 0;function J(n){for(var r="",e=n;g[e];)r+=G[g[e++]];return r}var X={},Y={},Z={};function $(n){if(void 0===n)return"_unknown";var r=(n=n.replace(/[^a-zA-Z0-9_]/g,"$")).charCodeAt(0);return r>=48&&r<=57?"_"+n:n}function K(n,r){return n=$(n),new Function("body","return function "+n+'() {\n    "use strict";    return body.apply(this, arguments);\n};\n')(r)}function Q(n,r){var e=K(r,(function(n){this.name=r,this.message=n;var e=new Error(n).stack;void 0!==e&&(this.stack=this.toString()+"\n"+e.replace(/^Error(:[^\n]*)?\n/,""))}));return e.prototype=Object.create(n.prototype),e.prototype.constructor=e,e.prototype.toString=function(){return void 0===this.message?this.name:this.name+": "+this.message},e}var nn=void 0;function rn(n){throw new nn(n)}var en=void 0;function tn(n){throw new en(n)}function on(n,r,e){if(e=e||{},!("argPackAdvance"in r))throw new TypeError("registerType registeredInstance requires argPackAdvance");var t=r.name;if(n||rn('type "'+t+'" must have a positive integer typeid pointer'),Y.hasOwnProperty(n)){if(e.ignoreDuplicateRegistrations)return;rn("Cannot register type '"+t+"' twice")}if(Y[n]=r,delete Z[n],X.hasOwnProperty(n)){var o=X[n];delete X[n],o.forEach((function(n){n()}))}}var an=[],un=[{},{value:void 0},{value:null},{value:!0},{value:!1}];function cn(n){n>4&&0==--un[n].refcount&&(un[n]=void 0,an.push(n))}function fn(n){switch(n){case void 0:return 1;case null:return 2;case!0:return 3;case!1:return 4;default:var r=an.length?an.pop():un.length;return un[r]={refcount:1,value:n},r}}function sn(n){return this.fromWireType(A[n>>2])}function ln(n){if(null===n)return"null";var r=typeof n;return"object"===r||"array"===r||"function"===r?n.toString():""+n}function pn(n,r){switch(r){case 2:return function(n){return this.fromWireType(T[n>>2])};case 3:return function(n){return this.fromWireType(_[n>>3])};default:throw new TypeError("Unknown float type: "+n)}}function dn(n){for(;n.length;){var r=n.pop();n.pop()(r)}}function vn(r,e,t){return r.includes("j")?function(r,e,t){var o=n["dynCall_"+r];return t&&t.length?o.apply(null,[e].concat(t)):o.call(null,e)}(r,e,t):U.get(e).apply(null,t)}var hn=void 0;function yn(n){var r=kn(n),e=J(r);return En(r),e}function gn(n,r,e){switch(r){case 0:return e?function(n){return y[n]}:function(n){return g[n]};case 1:return e?function(n){return m[n>>1]}:function(n){return w[n>>1]};case 2:return e?function(n){return b[n>>2]}:function(n){return A[n>>2]};default:throw new TypeError("Unknown integer type: "+n)}}var mn={};function wn(){return"object"==typeof globalThis?globalThis:Function("return this")()}function bn(n,r){var e=Y[n];return void 0===e&&rn(r+" has unknown type "+yn(n)),e}var An={};function Tn(n){try{return s.grow(n-h.byteLength+65535>>>16),I(s.buffer),1}catch(n){}}!function(){for(var n=new Array(256),r=0;r<256;++r)n[r]=String.fromCharCode(r);G=n}(),nn=n.BindingError=Q(Error,"BindingError"),en=n.InternalError=Q(Error,"InternalError"),n.count_emval_handles=function(){for(var n=0,r=5;r<un.length;++r)void 0!==un[r]&&++n;return n},n.get_first_emval=function(){for(var n=5;n<un.length;++n)if(void 0!==un[n])return un[n];return null},hn=n.UnboundTypeError=Q(Error,"UnboundTypeError");var _n,Pn={e:function(n,r){},r:function(n,r,e,t,o){},o:function(n,r,e,t,o){var a=L(e);on(n,{name:r=J(r),fromWireType:function(n){return!!n},toWireType:function(n,r){return r?t:o},argPackAdvance:8,readValueFromPointer:function(n){var t;if(1===e)t=y;else if(2===e)t=m;else{if(4!==e)throw new TypeError("Unknown boolean type size: "+r);t=b}return this.fromWireType(t[n>>a])},destructorFunction:null})},t:function(n,r){on(n,{name:r=J(r),fromWireType:function(n){var r=un[n].value;return cn(n),r},toWireType:function(n,r){return fn(r)},argPackAdvance:8,readValueFromPointer:sn,destructorFunction:null})},m:function(n,r,e){var t=L(e);on(n,{name:r=J(r),fromWireType:function(n){return n},toWireType:function(n,r){if("number"!=typeof r&&"boolean"!=typeof r)throw new TypeError('Cannot convert "'+ln(r)+'" to '+this.name);return r},argPackAdvance:8,readValueFromPointer:pn(r,t),destructorFunction:null})},i:function(r,e,t,o,a,i){var u=function(n,r){for(var e=[],t=0;t<n;t++)e.push(b[(r>>2)+t]);return e}(e,t);r=J(r),a=function(n,r){var e,t,o,a=(n=J(n)).includes("j")?(e=n,t=r,o=[],function(){o.length=arguments.length;for(var n=0;n<arguments.length;n++)o[n]=arguments[n];return vn(e,t,o)}):U.get(r);return"function"!=typeof a&&rn("unknown function pointer with signature "+n+": "+r),a}(o,a),function(r,e,t){n.hasOwnProperty(r)?((void 0===t||void 0!==n[r].overloadTable&&void 0!==n[r].overloadTable[t])&&rn("Cannot register public name '"+r+"' twice"),function(n,r,e){if(void 0===n[r].overloadTable){var t=n[r];n[r]=function(){return n[r].overloadTable.hasOwnProperty(arguments.length)||rn("Function '"+e+"' called with an invalid number of arguments ("+arguments.length+") - expects one of ("+n[r].overloadTable+")!"),n[r].overloadTable[arguments.length].apply(this,arguments)},n[r].overloadTable=[],n[r].overloadTable[t.argCount]=t}}(n,r,r),n.hasOwnProperty(t)&&rn("Cannot register multiple overloads of a function with the same number of arguments ("+t+")!"),n[r].overloadTable[t]=e):(n[r]=e,void 0!==t&&(n[r].numArguments=t))}(r,(function(){!function(n,r){var e=[],t={};throw r.forEach((function n(r){t[r]||Y[r]||(Z[r]?Z[r].forEach(n):(e.push(r),t[r]=!0))})),new hn(n+": "+e.map(yn).join([", "]))}("Cannot call "+r+" due to unbound types",u)}),e-1),function(t,o,u){function c(o){var u=function(t){var o=[t[0],null].concat(t.slice(1));return function(r,e,t){n.hasOwnProperty(r)||tn("Replacing nonexistant public symbol"),void 0!==n[r].overloadTable&&void 0!==t?n[r].overloadTable[t]=e:(n[r]=e,n[r].argCount=t)}(r,function(n,r,e,t,o){var a=r.length;a<2&&rn("argTypes array size mismatch! Must at least get return value and 'this' types!");for(var i=null!==r[1]&&null!==e,u=!1,c=1;c<r.length;++c)if(null!==r[c]&&void 0===r[c].destructorFunction){u=!0;break}var f="void"!==r[0].name,s="",l="";for(c=0;c<a-2;++c)s+=(0!==c?", ":"")+"arg"+c,l+=(0!==c?", ":"")+"arg"+c+"Wired";var p="return function "+$(n)+"("+s+") {\nif (arguments.length !== "+(a-2)+") {\nthrowBindingError('function "+n+" called with ' + arguments.length + ' arguments, expected "+(a-2)+" args!');\n}\n";u&&(p+="var destructors = [];\n");var d=u?"destructors":"null",v=["throwBindingError","invoker","fn","runDestructors","retType","classParam"],h=[rn,t,o,dn,r[0],r[1]];for(i&&(p+="var thisWired = classParam.toWireType("+d+", this);\n"),c=0;c<a-2;++c)p+="var arg"+c+"Wired = argType"+c+".toWireType("+d+", arg"+c+"); // "+r[c+2].name+"\n",v.push("argType"+c),h.push(r[c+2]);if(i&&(l="thisWired"+(l.length>0?", ":"")+l),p+=(f?"var rv = ":"")+"invoker(fn"+(l.length>0?", ":"")+l+");\n",u)p+="runDestructors(destructors);\n";else for(c=i?1:2;c<r.length;++c){var y=1===c?"thisWired":"arg"+(c-2)+"Wired";null!==r[c].destructorFunction&&(p+=y+"_dtor("+y+"); // "+r[c].name+"\n",v.push(y+"_dtor"),h.push(r[c].destructorFunction))}return f&&(p+="var ret = retType.fromWireType(rv);\nreturn ret;\n"),p+="}\n",v.push(p),function(n,r){if(!(n instanceof Function))throw new TypeError("new_ called with constructor type "+typeof n+" which is not a function");var e=K(n.name||"unknownFunctionName",(function(){}));e.prototype=n.prototype;var t=new e,o=n.apply(t,r);return o instanceof Object?o:t}(Function,v).apply(null,h)}(r,o,null,a,i),e-1),[]}(o);u.length!==t.length&&tn("Mismatched type converter count");for(var c=0;c<t.length;++c)on(t[c],u[c])}t.forEach((function(n){Z[n]=o}));var f=new Array(o.length),s=[],l=0;o.forEach((function(n,r){Y.hasOwnProperty(n)?f[r]=Y[n]:(s.push(n),X.hasOwnProperty(n)||(X[n]=[]),X[n].push((function(){f[r]=Y[n],++l===s.length&&c(f)})))})),0===s.length&&c(f)}([],u)},b:function(n,r,e,t,o){r=J(r),-1===o&&(o=4294967295);var a=L(e),i=function(n){return n};if(0===t){var u=32-8*e;i=function(n){return n<<u>>>u}}var c=r.includes("unsigned");on(n,{name:r,fromWireType:i,toWireType:function(n,e){if("number"!=typeof e&&"boolean"!=typeof e)throw new TypeError('Cannot convert "'+ln(e)+'" to '+this.name);if(e<t||e>o)throw new TypeError('Passing a number "'+ln(e)+'" from JS side to C/C++ side to an argument of type "'+r+'", which is outside the valid range ['+t+", "+o+"]!");return c?e>>>0:0|e},argPackAdvance:8,readValueFromPointer:gn(r,a,0!==t),destructorFunction:null})},a:function(n,r,e){var t=[Int8Array,Uint8Array,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array][r];function o(n){var r=A,e=r[n>>=2],o=r[n+1];return new t(h,o,e)}on(n,{name:e=J(e),fromWireType:o,argPackAdvance:8,readValueFromPointer:o},{ignoreDuplicateRegistrations:!0})},n:function(n,r){var e="std::string"===(r=J(r));on(n,{name:r,fromWireType:function(n){var r,t=A[n>>2];if(e)for(var o=n+4,a=0;a<=t;++a){var i=n+4+a;if(a==t||0==g[i]){var u=v(o,i-o);void 0===r?r=u:(r+=String.fromCharCode(0),r+=u),o=i+1}}else{var c=new Array(t);for(a=0;a<t;++a)c[a]=String.fromCharCode(g[n+4+a]);r=c.join("")}return En(n),r},toWireType:function(n,r){var t;r instanceof ArrayBuffer&&(r=new Uint8Array(r));var o="string"==typeof r;o||r instanceof Uint8Array||r instanceof Uint8ClampedArray||r instanceof Int8Array||rn("Cannot pass non-string to std::string"),t=e&&o?function(){return function(n){for(var r=0,e=0;e<n.length;++e){var t=n.charCodeAt(e);t>=55296&&t<=57343&&(t=65536+((1023&t)<<10)|1023&n.charCodeAt(++e)),t<=127?++r:r+=t<=2047?2:t<=65535?3:4}return r}(r)}:function(){return r.length};var a=t(),i=Cn(4+a+1);if(A[i>>2]=a,e&&o)!function(n,r,e,t){if(!(t>0))return 0;for(var o=e+t-1,a=0;a<n.length;++a){var i=n.charCodeAt(a);if(i>=55296&&i<=57343&&(i=65536+((1023&i)<<10)|1023&n.charCodeAt(++a)),i<=127){if(e>=o)break;r[e++]=i}else if(i<=2047){if(e+1>=o)break;r[e++]=192|i>>6,r[e++]=128|63&i}else if(i<=65535){if(e+2>=o)break;r[e++]=224|i>>12,r[e++]=128|i>>6&63,r[e++]=128|63&i}else{if(e+3>=o)break;r[e++]=240|i>>18,r[e++]=128|i>>12&63,r[e++]=128|i>>6&63,r[e++]=128|63&i}}r[e]=0}(r,g,i+4,a+1);else if(o)for(var u=0;u<a;++u){var c=r.charCodeAt(u);c>255&&(En(i),rn("String has UTF-16 code units that do not fit in 8 bits")),g[i+4+u]=c}else for(u=0;u<a;++u)g[i+4+u]=r[u];return null!==n&&n.push(En,i),i},argPackAdvance:8,readValueFromPointer:sn,destructorFunction:function(n){En(n)}})},g:function(n,r,e){var t,o,a,i,u;e=J(e),2===r?(t=C,o=E,i=k,a=function(){return w},u=1):4===r&&(t=W,o=F,i=R,a=function(){return A},u=2),on(n,{name:e,fromWireType:function(n){for(var e,o=A[n>>2],i=a(),c=n+4,f=0;f<=o;++f){var s=n+4+f*r;if(f==o||0==i[s>>u]){var l=t(c,s-c);void 0===e?e=l:(e+=String.fromCharCode(0),e+=l),c=s+r}}return En(n),e},toWireType:function(n,t){"string"!=typeof t&&rn("Cannot pass non-string to C++ string type "+e);var a=i(t),c=Cn(4+a+r);return A[c>>2]=a>>u,o(t,c+4,a+r),null!==n&&n.push(En,c),c},argPackAdvance:8,readValueFromPointer:sn,destructorFunction:function(n){En(n)}})},p:function(n,r){on(n,{isVoid:!0,name:r=J(r),argPackAdvance:0,fromWireType:function(){},toWireType:function(n,r){}})},c:cn,d:function(n){return 0===n?fn(wn()):(n=void 0===(e=mn[r=n])?J(r):e,fn(wn()[n]));var r,e},j:function(n){n>4&&(un[n].refcount+=1)},k:function(r,e,t,o){r=function(n){return n||rn("Cannot use deleted val. handle = "+n),un[n].value}(r);var a=An[e];return a||(a=function(r){for(var e="",t=0;t<r;++t)e+=(0!==t?", ":"")+"arg"+t;var o="return function emval_allocator_"+r+"(constructor, argTypes, args) {\n";for(t=0;t<r;++t)o+="var argType"+t+" = requireRegisteredType(Module['HEAP32'][(argTypes >>> 2) + "+t+'], "parameter '+t+'");\nvar arg'+t+" = argType"+t+".readValueFromPointer(args);\nargs += argType"+t+"['argPackAdvance'];\n";return o+="var obj = new constructor("+e+");\nreturn __emval_register(obj);\n}\n",new Function("requireRegisteredType","Module","__emval_register",o)(bn,n,fn)}(e),An[e]=a),a(r,t,o)},l:function(){B()},s:function(n,r,e){g.copyWithin(n,r,r+e)},f:function(n){var r,e=g.length,t=2147483648;if((n>>>=0)>t)return!1;for(var o=1;o<=4;o*=2){var a=e*(1+.2/o);if(a=Math.min(a,n+100663296),Tn(Math.min(t,((r=Math.max(n,a))%65536>0&&(r+=65536-r%65536),r))))return!0}return!1},q:function(){return 6},h:function(){return 28}},Cn=(function(){var r={a:Pn};function e(r,e){var t,o=r.exports;n.asm=o,I((s=n.asm.u).buffer),U=n.asm.A,t=n.asm.v,j.unshift(t),function(r){if(x--,n.monitorRunDependencies&&n.monitorRunDependencies(x),0==x&&(null!==q&&(clearInterval(q),q=null),M)){var e=M;M=null,e()}}()}function o(n){e(n.instance)}function a(n){return(f||"function"!=typeof fetch?Promise.resolve().then((function(){return z(V)})):fetch(V,{credentials:"same-origin"}).then((function(n){if(!n.ok)throw"failed to load wasm binary file at '"+V+"'";return n.arrayBuffer()})).catch((function(){return z(V)}))).then((function(n){return WebAssembly.instantiate(n,r)})).then(n,(function(n){l("failed to asynchronously prepare wasm: "+n),B(n)}))}if(x++,n.monitorRunDependencies&&n.monitorRunDependencies(x),n.instantiateWasm)try{return n.instantiateWasm(r,e)}catch(n){return l("Module.instantiateWasm callback failed with error: "+n),!1}(f||"function"!=typeof WebAssembly.instantiateStreaming||H(V)||"function"!=typeof fetch?a(o):fetch(V,{credentials:"same-origin"}).then((function(n){return WebAssembly.instantiateStreaming(n,r).then(o,(function(n){return l("wasm streaming compile failed: "+n),l("falling back to ArrayBuffer instantiation"),a(o)}))}))).catch(t)}(),n.___wasm_call_ctors=function(){return(n.___wasm_call_ctors=n.asm.v).apply(null,arguments)},n._malloc=function(){return(Cn=n._malloc=n.asm.w).apply(null,arguments)}),En=n._free=function(){return(En=n._free=n.asm.x).apply(null,arguments)},kn=n.___getTypeName=function(){return(kn=n.___getTypeName=n.asm.y).apply(null,arguments)};function Wn(e){function t(){_n||(_n=!0,n.calledRun=!0,p||(N(j),r(n),n.onRuntimeInitialized&&n.onRuntimeInitialized(),function(){if(n.postRun)for("function"==typeof n.postRun&&(n.postRun=[n.postRun]);n.postRun.length;)r=n.postRun.shift(),D.unshift(r);var r;N(D)}()))}e=e||u,x>0||(function(){if(n.preRun)for("function"==typeof n.preRun&&(n.preRun=[n.preRun]);n.preRun.length;)r=n.preRun.shift(),O.unshift(r);var r;N(O)}(),x>0||(n.setStatus?(n.setStatus("Running..."),setTimeout((function(){setTimeout((function(){n.setStatus("")}),1),t()}),1)):t()))}if(n.___embind_register_native_and_builtin_types=function(){return(n.___embind_register_native_and_builtin_types=n.asm.z).apply(null,arguments)},M=function n(){_n||Wn(),_n||(M=n)},n.run=Wn,n.preInit)for("function"==typeof n.preInit&&(n.preInit=[n.preInit]);n.preInit.length>0;)n.preInit.pop()();return Wn(),n.ready})},505:(n,r,e)=>{n.exports=e.p+"466f8d51ca37ea6934bd.wasm"}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,