!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define([],t):"object"==typeof exports?exports.squoosh=t():e.squoosh=t()}(self,(function(){return(()=>{var e={978:e=>{function t(e){return Promise.resolve().then((()=>{var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}))}t.keys=()=>[],t.resolve=t,t.id=978,e.exports=t},384:(e,t,r)=>{"use strict";var a={},o=!1,n=function(){var e=Array.prototype.slice.call(arguments).join(" ");console.error(e)};self.alert=function(){var e=Array.prototype.slice.call(arguments).join(" ");postMessage({cmd:"alert",text:e,threadId:a._pthread_self()})},a.instantiateWasm=function(e,t){var r=new WebAssembly.Instance(a.wasmModule,e);return t(r),a.wasmModule=null,r.exports},self.onmessage=function(e){try{if("load"===e.data.cmd)a.wasmModule=e.data.wasmModule,a.wasmMemory=e.data.wasmMemory,a.buffer=a.wasmMemory.buffer,a.ENVIRONMENT_IS_PTHREAD=!0,(e.data.urlOrBlob?r(978)(e.data.urlOrBlob):r.e(235).then(r.bind(r,235))).then((function(e){return e.default(a)})).then((function(e){a=e}));else if("objectTransfer"===e.data.cmd)a.PThread.receiveObjectTransfer(e.data);else if("run"===e.data.cmd){a.__performance_now_clock_drift=performance.now()-e.data.time,a.__emscripten_thread_init(e.data.threadInfoStruct,0,0);var t=e.data.stackBase,s=e.data.stackBase+e.data.stackSize;a.establishStackSpace(s,t),a.PThread.receiveObjectTransfer(e.data),a.PThread.threadInit(),o||(a.___embind_register_native_and_builtin_types(),o=!0);try{var i=a.invokeEntryPoint(e.data.start_routine,e.data.arg);a.keepRuntimeAlive()?a.PThread.setExitStatus(i):a.PThread.threadExit(i)}catch(e){if("Canceled!"===e)a.PThread.threadCancel();else if("unwind"!=e){if(!(e instanceof a.ExitStatus))throw a.PThread.threadExit(-2),e;a.keepRuntimeAlive()||a.PThread.threadExit(e.status)}}}else"cancel"===e.data.cmd?a._pthread_self()&&a.PThread.threadCancel():"setimmediate"===e.data.target||("processThreadQueue"===e.data.cmd?a._pthread_self()&&a._emscripten_current_thread_process_queued_calls():(n("worker.js received unknown command "+e.data.cmd),n(e.data)))}catch(e){throw n("worker.js onmessage() captured an uncaught exception: "+e),e&&e.stack&&n(e.stack),e}}}},t={};function r(a){var o=t[a];if(void 0!==o)return o.exports;var n=t[a]={exports:{}};return e[a](n,n.exports,r),n.exports}return r.m=e,r.d=(e,t)=>{for(var a in t)r.o(t,a)&&!r.o(e,a)&&Object.defineProperty(e,a,{enumerable:!0,get:t[a]})},r.f={},r.e=e=>Promise.all(Object.keys(r.f).reduce(((t,a)=>(r.f[a](e,t),t)),[])),r.u=e=>e+".bundle.js",r.miniCssF=e=>{},r.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),r.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),r.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},(()=>{var e;r.g.importScripts&&(e=r.g.location+"");var t=r.g.document;if(!e&&t&&(t.currentScript&&(e=t.currentScript.src),!e)){var a=t.getElementsByTagName("script");a.length&&(e=a[a.length-1].src)}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),r.p=e})(),(()=>{r.b=self.location+"";var e={384:1};r.f.i=(t,a)=>{e[t]||importScripts(r.p+r.u(t))};var t=self.webpackChunksquoosh=self.webpackChunksquoosh||[],a=t.push.bind(t);t.push=t=>{var[o,n,s]=t;for(var i in n)r.o(n,i)&&(r.m[i]=n[i]);for(s&&s(r);o.length;)e[o.pop()]=1;a(t)}})(),r(384)})()}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,