"use strict";(self.webpackChunksquoosh=self.webpackChunksquoosh||[]).push([[330],{330:(n,r,t)=>{t.r(r),t.d(r,{default:()=>e});const e=("file:///C:/Users/Dell7010/Desktop/web/tw/squoosh/codecs/avif/dec/avif_dec.js",function(n){var r,e;(n=void 0!==(n=n||{})?n:{}).ready=new Promise((function(n,t){r=n,e=t}));var o,a={};for(o in n)n.hasOwnProperty(o)&&(a[o]=n[o]);var i,u=[],c="";c=self.location.href,c=0!==(c="file:///C:/Users/Dell7010/Desktop/web/tw/squoosh/codecs/avif/dec/avif_dec.js").indexOf("blob:")?c.substr(0,c.lastIndexOf("/")+1):"",i=function(n){var r=new XMLHttpRequest;return r.open("GET",n,!1),r.responseType="arraybuffer",r.send(null),new Uint8Array(r.response)};var f=n.print||console.log.bind(console),s=n.printErr||console.warn.bind(console);for(o in a)a.hasOwnProperty(o)&&(n[o]=a[o]);a=null,n.arguments&&(u=n.arguments),n.thisProgram&&n.thisProgram,n.quit&&n.quit;var l,p,v=0;n.wasmBinary&&(l=n.wasmBinary),n.noExitRuntime,"object"!=typeof WebAssembly&&V("no native wasm support detected");var d=!1,h=new TextDecoder("utf8");function y(n,r){if(!n)return"";for(var t=n+r,e=n;!(e>=t)&&w[e];)++e;return h.decode(w.subarray(n,e))}var g,m,w,b,T,A,_,C,P,k=new TextDecoder("utf-16le");function E(n,r){for(var t=n,e=t>>1,o=e+r/2;!(e>=o)&&T[e];)++e;return t=e<<1,k.decode(w.subarray(n,t))}function W(n,r,t){if(void 0===t&&(t=2147483647),t<2)return 0;for(var e=r,o=(t-=2)<2*n.length?t/2:n.length,a=0;a<o;++a){var i=n.charCodeAt(a);b[r>>1]=i,r+=2}return b[r>>1]=0,r-e}function F(n){return 2*n.length}function R(n,r){for(var t=0,e="";!(t>=r/4);){var o=A[n+4*t>>2];if(0==o)break;if(++t,o>=65536){var a=o-65536;e+=String.fromCharCode(55296|a>>10,56320|1023&a)}else e+=String.fromCharCode(o)}return e}function I(n,r,t){if(void 0===t&&(t=2147483647),t<4)return 0;for(var e=r,o=e+t-4,a=0;a<n.length;++a){var i=n.charCodeAt(a);if(i>=55296&&i<=57343&&(i=65536+((1023&i)<<10)|1023&n.charCodeAt(++a)),A[r>>2]=i,(r+=4)+4>o)break}return A[r>>2]=0,r-e}function j(n){for(var r=0,t=0;t<n.length;++t){var e=n.charCodeAt(t);e>=55296&&e<=57343&&++t,r+=4}return r}function U(r){g=r,n.HEAP8=m=new Int8Array(r),n.HEAP16=b=new Int16Array(r),n.HEAP32=A=new Int32Array(r),n.HEAPU8=w=new Uint8Array(r),n.HEAPU16=T=new Uint16Array(r),n.HEAPU32=_=new Uint32Array(r),n.HEAPF32=C=new Float32Array(r),n.HEAPF64=P=new Float64Array(r)}n.INITIAL_MEMORY;var S,D,O=[],x=[],M=[],q=0,B=null,H=null;function V(r){n.onAbort&&n.onAbort(r),s(r+=""),d=!0,r="abort("+r+"). Build with -s ASSERTIONS=1 for more info.";var t=new WebAssembly.RuntimeError(r);throw e(t),t}function N(n){return n.startsWith("data:application/octet-stream;base64,")}if(n.preloadedImages={},n.preloadedAudios={},n.locateFile)N(z="avif_dec.wasm")||(D=z,z=n.locateFile?n.locateFile(D,c):c+D);else var z=new URL(t(585),t.b).toString();function L(n){try{if(n==z&&l)return new Uint8Array(l);if(i)return i(n);throw"both async and sync fetching of the wasm failed"}catch(n){V(n)}}function G(r){for(;r.length>0;){var t=r.shift();if("function"!=typeof t){var e=t.func;"number"==typeof e?void 0===t.arg?S.get(e)():S.get(e)(t.arg):e(void 0===t.arg?null:t.arg)}else t(n)}}function J(n){switch(n){case 1:return 0;case 2:return 1;case 4:return 2;case 8:return 3;default:throw new TypeError("Unknown type size: "+n)}}var K=void 0;function X(n){for(var r="",t=n;w[t];)r+=K[w[t++]];return r}var Y={},Z={},$={};function Q(n){if(void 0===n)return"_unknown";var r=(n=n.replace(/[^a-zA-Z0-9_]/g,"$")).charCodeAt(0);return r>=48&&r<=57?"_"+n:n}function nn(n,r){return n=Q(n),new Function("body","return function "+n+'() {\n    "use strict";    return body.apply(this, arguments);\n};\n')(r)}function rn(n,r){var t=nn(r,(function(n){this.name=r,this.message=n;var t=new Error(n).stack;void 0!==t&&(this.stack=this.toString()+"\n"+t.replace(/^Error(:[^\n]*)?\n/,""))}));return t.prototype=Object.create(n.prototype),t.prototype.constructor=t,t.prototype.toString=function(){return void 0===this.message?this.name:this.name+": "+this.message},t}var tn=void 0;function en(n){throw new tn(n)}var on=void 0;function an(n){throw new on(n)}function un(n,r,t){if(t=t||{},!("argPackAdvance"in r))throw new TypeError("registerType registeredInstance requires argPackAdvance");var e=r.name;if(n||en('type "'+e+'" must have a positive integer typeid pointer'),Z.hasOwnProperty(n)){if(t.ignoreDuplicateRegistrations)return;en("Cannot register type '"+e+"' twice")}if(Z[n]=r,delete $[n],Y.hasOwnProperty(n)){var o=Y[n];delete Y[n],o.forEach((function(n){n()}))}}var cn=[],fn=[{},{value:void 0},{value:null},{value:!0},{value:!1}];function sn(n){n>4&&0==--fn[n].refcount&&(fn[n]=void 0,cn.push(n))}function ln(n){switch(n){case void 0:return 1;case null:return 2;case!0:return 3;case!1:return 4;default:var r=cn.length?cn.pop():fn.length;return fn[r]={refcount:1,value:n},r}}function pn(n){return this.fromWireType(_[n>>2])}function vn(n){if(null===n)return"null";var r=typeof n;return"object"===r||"array"===r||"function"===r?n.toString():""+n}function dn(n,r){switch(r){case 2:return function(n){return this.fromWireType(C[n>>2])};case 3:return function(n){return this.fromWireType(P[n>>3])};default:throw new TypeError("Unknown float type: "+n)}}function hn(n){for(;n.length;){var r=n.pop();n.pop()(r)}}function yn(r,t,e){return r.includes("j")?function(r,t,e){var o=n["dynCall_"+r];return e&&e.length?o.apply(null,[t].concat(e)):o.call(null,t)}(r,t,e):S.get(t).apply(null,e)}var gn=void 0;function mn(n){var r=Rn(n),t=X(r);return Fn(r),t}function wn(n,r,t){switch(r){case 0:return t?function(n){return m[n]}:function(n){return w[n]};case 1:return t?function(n){return b[n>>1]}:function(n){return T[n>>1]};case 2:return t?function(n){return A[n>>2]}:function(n){return _[n>>2]};default:throw new TypeError("Unknown integer type: "+n)}}var bn={};function Tn(){return"object"==typeof globalThis?globalThis:Function("return this")()}function An(n,r){var t=Z[n];return void 0===t&&en(r+" has unknown type "+mn(n)),t}var _n={};function Cn(n){try{return p.grow(n-g.byteLength+65535>>>16),U(p.buffer),1}catch(n){}}var Pn={mappings:{},buffers:[null,[],[]],printChar:function(n,r){var t=Pn.buffers[n];0===r||10===r?((1===n?f:s)(function(n,r,t){for(var e=0;n[e]&&!(e>=NaN);)++e;return h.decode(n.subarray?n.subarray(0,e):new Uint8Array(n.slice(0,e)))}(t)),t.length=0):t.push(r)},varargs:void 0,get:function(){return Pn.varargs+=4,A[Pn.varargs-4>>2]},getStr:function(n){return y(n)},get64:function(n,r){return n}};!function(){for(var n=new Array(256),r=0;r<256;++r)n[r]=String.fromCharCode(r);K=n}(),tn=n.BindingError=rn(Error,"BindingError"),on=n.InternalError=rn(Error,"InternalError"),n.count_emval_handles=function(){for(var n=0,r=5;r<fn.length;++r)void 0!==fn[r]&&++n;return n},n.get_first_emval=function(){for(var n=5;n<fn.length;++n)if(void 0!==fn[n])return fn[n];return null},gn=n.UnboundTypeError=rn(Error,"UnboundTypeError");var kn,En={j:function(n,r){},v:function(n,r,t,e,o){},r:function(n,r,t,e,o){var a=J(t);un(n,{name:r=X(r),fromWireType:function(n){return!!n},toWireType:function(n,r){return r?e:o},argPackAdvance:8,readValueFromPointer:function(n){var e;if(1===t)e=m;else if(2===t)e=b;else{if(4!==t)throw new TypeError("Unknown boolean type size: "+r);e=A}return this.fromWireType(e[n>>a])},destructorFunction:null})},B:function(n,r){un(n,{name:r=X(r),fromWireType:function(n){var r=fn[n].value;return sn(n),r},toWireType:function(n,r){return ln(r)},argPackAdvance:8,readValueFromPointer:pn,destructorFunction:null})},q:function(n,r,t){var e=J(t);un(n,{name:r=X(r),fromWireType:function(n){return n},toWireType:function(n,r){if("number"!=typeof r&&"boolean"!=typeof r)throw new TypeError('Cannot convert "'+vn(r)+'" to '+this.name);return r},argPackAdvance:8,readValueFromPointer:dn(r,e),destructorFunction:null})},t:function(r,t,e,o,a,i){var u=function(n,r){for(var t=[],e=0;e<n;e++)t.push(A[(r>>2)+e]);return t}(t,e);r=X(r),a=function(n,r){var t,e,o,a=(n=X(n)).includes("j")?(t=n,e=r,o=[],function(){o.length=arguments.length;for(var n=0;n<arguments.length;n++)o[n]=arguments[n];return yn(t,e,o)}):S.get(r);return"function"!=typeof a&&en("unknown function pointer with signature "+n+": "+r),a}(o,a),function(r,t,e){n.hasOwnProperty(r)?((void 0===e||void 0!==n[r].overloadTable&&void 0!==n[r].overloadTable[e])&&en("Cannot register public name '"+r+"' twice"),function(n,r,t){if(void 0===n[r].overloadTable){var e=n[r];n[r]=function(){return n[r].overloadTable.hasOwnProperty(arguments.length)||en("Function '"+t+"' called with an invalid number of arguments ("+arguments.length+") - expects one of ("+n[r].overloadTable+")!"),n[r].overloadTable[arguments.length].apply(this,arguments)},n[r].overloadTable=[],n[r].overloadTable[e.argCount]=e}}(n,r,r),n.hasOwnProperty(e)&&en("Cannot register multiple overloads of a function with the same number of arguments ("+e+")!"),n[r].overloadTable[e]=t):(n[r]=t,void 0!==e&&(n[r].numArguments=e))}(r,(function(){!function(n,r){var t=[],e={};throw r.forEach((function n(r){e[r]||Z[r]||($[r]?$[r].forEach(n):(t.push(r),e[r]=!0))})),new gn(n+": "+t.map(mn).join([", "]))}("Cannot call "+r+" due to unbound types",u)}),t-1),function(e,o,u){function c(o){var u=function(e){var o=[e[0],null].concat(e.slice(1));return function(r,t,e){n.hasOwnProperty(r)||an("Replacing nonexistant public symbol"),void 0!==n[r].overloadTable&&void 0!==e?n[r].overloadTable[e]=t:(n[r]=t,n[r].argCount=e)}(r,function(n,r,t,e,o){var a=r.length;a<2&&en("argTypes array size mismatch! Must at least get return value and 'this' types!");for(var i=null!==r[1]&&null!==t,u=!1,c=1;c<r.length;++c)if(null!==r[c]&&void 0===r[c].destructorFunction){u=!0;break}var f="void"!==r[0].name,s="",l="";for(c=0;c<a-2;++c)s+=(0!==c?", ":"")+"arg"+c,l+=(0!==c?", ":"")+"arg"+c+"Wired";var p="return function "+Q(n)+"("+s+") {\nif (arguments.length !== "+(a-2)+") {\nthrowBindingError('function "+n+" called with ' + arguments.length + ' arguments, expected "+(a-2)+" args!');\n}\n";u&&(p+="var destructors = [];\n");var v=u?"destructors":"null",d=["throwBindingError","invoker","fn","runDestructors","retType","classParam"],h=[en,e,o,hn,r[0],r[1]];for(i&&(p+="var thisWired = classParam.toWireType("+v+", this);\n"),c=0;c<a-2;++c)p+="var arg"+c+"Wired = argType"+c+".toWireType("+v+", arg"+c+"); // "+r[c+2].name+"\n",d.push("argType"+c),h.push(r[c+2]);if(i&&(l="thisWired"+(l.length>0?", ":"")+l),p+=(f?"var rv = ":"")+"invoker(fn"+(l.length>0?", ":"")+l+");\n",u)p+="runDestructors(destructors);\n";else for(c=i?1:2;c<r.length;++c){var y=1===c?"thisWired":"arg"+(c-2)+"Wired";null!==r[c].destructorFunction&&(p+=y+"_dtor("+y+"); // "+r[c].name+"\n",d.push(y+"_dtor"),h.push(r[c].destructorFunction))}return f&&(p+="var ret = retType.fromWireType(rv);\nreturn ret;\n"),p+="}\n",d.push(p),function(n,r){if(!(n instanceof Function))throw new TypeError("new_ called with constructor type "+typeof n+" which is not a function");var t=nn(n.name||"unknownFunctionName",(function(){}));t.prototype=n.prototype;var e=new t,o=n.apply(e,r);return o instanceof Object?o:e}(Function,d).apply(null,h)}(r,o,null,a,i),t-1),[]}(o);u.length!==e.length&&an("Mismatched type converter count");for(var c=0;c<e.length;++c)un(e[c],u[c])}e.forEach((function(n){$[n]=o}));var f=new Array(o.length),s=[],l=0;o.forEach((function(n,r){Z.hasOwnProperty(n)?f[r]=Z[n]:(s.push(n),Y.hasOwnProperty(n)||(Y[n]=[]),Y[n].push((function(){f[r]=Z[n],++l===s.length&&c(f)})))})),0===s.length&&c(f)}([],u)},e:function(n,r,t,e,o){r=X(r),-1===o&&(o=4294967295);var a=J(t),i=function(n){return n};if(0===e){var u=32-8*t;i=function(n){return n<<u>>>u}}var c=r.includes("unsigned");un(n,{name:r,fromWireType:i,toWireType:function(n,t){if("number"!=typeof t&&"boolean"!=typeof t)throw new TypeError('Cannot convert "'+vn(t)+'" to '+this.name);if(t<e||t>o)throw new TypeError('Passing a number "'+vn(t)+'" from JS side to C/C++ side to an argument of type "'+r+'", which is outside the valid range ['+e+", "+o+"]!");return c?t>>>0:0|t},argPackAdvance:8,readValueFromPointer:wn(r,a,0!==e),destructorFunction:null})},d:function(n,r,t){var e=[Int8Array,Uint8Array,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array][r];function o(n){var r=_,t=r[n>>=2],o=r[n+1];return new e(g,o,t)}un(n,{name:t=X(t),fromWireType:o,argPackAdvance:8,readValueFromPointer:o},{ignoreDuplicateRegistrations:!0})},m:function(n,r){var t="std::string"===(r=X(r));un(n,{name:r,fromWireType:function(n){var r,e=_[n>>2];if(t)for(var o=n+4,a=0;a<=e;++a){var i=n+4+a;if(a==e||0==w[i]){var u=y(o,i-o);void 0===r?r=u:(r+=String.fromCharCode(0),r+=u),o=i+1}}else{var c=new Array(e);for(a=0;a<e;++a)c[a]=String.fromCharCode(w[n+4+a]);r=c.join("")}return Fn(n),r},toWireType:function(n,r){var e;r instanceof ArrayBuffer&&(r=new Uint8Array(r));var o="string"==typeof r;o||r instanceof Uint8Array||r instanceof Uint8ClampedArray||r instanceof Int8Array||en("Cannot pass non-string to std::string"),e=t&&o?function(){return function(n){for(var r=0,t=0;t<n.length;++t){var e=n.charCodeAt(t);e>=55296&&e<=57343&&(e=65536+((1023&e)<<10)|1023&n.charCodeAt(++t)),e<=127?++r:r+=e<=2047?2:e<=65535?3:4}return r}(r)}:function(){return r.length};var a=e(),i=Wn(4+a+1);if(_[i>>2]=a,t&&o)!function(n,r,t,e){if(!(e>0))return 0;for(var o=t+e-1,a=0;a<n.length;++a){var i=n.charCodeAt(a);if(i>=55296&&i<=57343&&(i=65536+((1023&i)<<10)|1023&n.charCodeAt(++a)),i<=127){if(t>=o)break;r[t++]=i}else if(i<=2047){if(t+1>=o)break;r[t++]=192|i>>6,r[t++]=128|63&i}else if(i<=65535){if(t+2>=o)break;r[t++]=224|i>>12,r[t++]=128|i>>6&63,r[t++]=128|63&i}else{if(t+3>=o)break;r[t++]=240|i>>18,r[t++]=128|i>>12&63,r[t++]=128|i>>6&63,r[t++]=128|63&i}}r[t]=0}(r,w,i+4,a+1);else if(o)for(var u=0;u<a;++u){var c=r.charCodeAt(u);c>255&&(Fn(i),en("String has UTF-16 code units that do not fit in 8 bits")),w[i+4+u]=c}else for(u=0;u<a;++u)w[i+4+u]=r[u];return null!==n&&n.push(Fn,i),i},argPackAdvance:8,readValueFromPointer:pn,destructorFunction:function(n){Fn(n)}})},l:function(n,r,t){var e,o,a,i,u;t=X(t),2===r?(e=E,o=W,i=F,a=function(){return T},u=1):4===r&&(e=R,o=I,i=j,a=function(){return _},u=2),un(n,{name:t,fromWireType:function(n){for(var t,o=_[n>>2],i=a(),c=n+4,f=0;f<=o;++f){var s=n+4+f*r;if(f==o||0==i[s>>u]){var l=e(c,s-c);void 0===t?t=l:(t+=String.fromCharCode(0),t+=l),c=s+r}}return Fn(n),t},toWireType:function(n,e){"string"!=typeof e&&en("Cannot pass non-string to C++ string type "+t);var a=i(e),c=Wn(4+a+r);return _[c>>2]=a>>u,o(e,c+4,a+r),null!==n&&n.push(Fn,c),c},argPackAdvance:8,readValueFromPointer:pn,destructorFunction:function(n){Fn(n)}})},s:function(n,r){un(n,{isVoid:!0,name:r=X(r),argPackAdvance:0,fromWireType:function(){},toWireType:function(n,r){}})},h:sn,i:function(n){return 0===n?ln(Tn()):(n=void 0===(t=bn[r=n])?X(r):t,ln(Tn()[n]));var r,t},n:function(n){n>4&&(fn[n].refcount+=1)},o:function(r,t,e,o){r=function(n){return n||en("Cannot use deleted val. handle = "+n),fn[n].value}(r);var a=_n[t];return a||(a=function(r){for(var t="",e=0;e<r;++e)t+=(0!==e?", ":"")+"arg"+e;var o="return function emval_allocator_"+r+"(constructor, argTypes, args) {\n";for(e=0;e<r;++e)o+="var argType"+e+" = requireRegisteredType(Module['HEAP32'][(argTypes >>> 2) + "+e+'], "parameter '+e+'");\nvar arg'+e+" = argType"+e+".readValueFromPointer(args);\nargs += argType"+e+"['argPackAdvance'];\n";return o+="var obj = new constructor("+t+");\nreturn __emval_register(obj);\n}\n",new Function("requireRegisteredType","Module","__emval_register",o)(An,n,ln)}(t),_n[t]=a),a(r,e,o)},a:function(){V()},g:function(n,r){return function(n,r){throw Un(n,r||1),"longjmp"}(n,r)},y:function(n,r,t){w.copyWithin(n,r,r+t)},k:function(n){var r,t=w.length,e=2147483648;if((n>>>=0)>e)return!1;for(var o=1;o<=4;o*=2){var a=t*(1+.2/o);if(a=Math.min(a,n+100663296),Cn(Math.min(e,((r=Math.max(n,a))%65536>0&&(r+=65536-r%65536),r))))return!0}return!1},A:function(n){return 0},u:function(n,r,t,e,o){},z:function(n,r,t,e){for(var o=0,a=0;a<t;a++){for(var i=A[r+8*a>>2],u=A[r+(8*a+4)>>2],c=0;c<u;c++)Pn.printChar(n,w[i+c]);o+=u}return A[e>>2]=o,0},b:function(){return v},f:function(n,r,t){var e=In();try{return S.get(n)(r,t)}catch(n){if(jn(e),n!==n+0&&"longjmp"!==n)throw n;Un(1,0)}},w:function(n,r,t,e,o){var a=In();try{return S.get(n)(r,t,e,o)}catch(n){if(jn(a),n!==n+0&&"longjmp"!==n)throw n;Un(1,0)}},p:function(n,r,t,e,o){var a=In();try{S.get(n)(r,t,e,o)}catch(n){if(jn(a),n!==n+0&&"longjmp"!==n)throw n;Un(1,0)}},x:function(n,r,t,e,o,a,i,u){var c=In();try{S.get(n)(r,t,e,o,a,i,u)}catch(n){if(jn(c),n!==n+0&&"longjmp"!==n)throw n;Un(1,0)}},c:function(n){v=n}},Wn=(function(){var r={a:En};function t(r,t){var e,o=r.exports;n.asm=o,U((p=n.asm.C).buffer),S=n.asm.L,e=n.asm.D,x.unshift(e),function(r){if(q--,n.monitorRunDependencies&&n.monitorRunDependencies(q),0==q&&(null!==B&&(clearInterval(B),B=null),H)){var t=H;H=null,t()}}()}function o(n){t(n.instance)}function a(n){return(l||"function"!=typeof fetch?Promise.resolve().then((function(){return L(z)})):fetch(z,{credentials:"same-origin"}).then((function(n){if(!n.ok)throw"failed to load wasm binary file at '"+z+"'";return n.arrayBuffer()})).catch((function(){return L(z)}))).then((function(n){return WebAssembly.instantiate(n,r)})).then(n,(function(n){s("failed to asynchronously prepare wasm: "+n),V(n)}))}if(q++,n.monitorRunDependencies&&n.monitorRunDependencies(q),n.instantiateWasm)try{return n.instantiateWasm(r,t)}catch(n){return s("Module.instantiateWasm callback failed with error: "+n),!1}(l||"function"!=typeof WebAssembly.instantiateStreaming||N(z)||"function"!=typeof fetch?a(o):fetch(z,{credentials:"same-origin"}).then((function(n){return WebAssembly.instantiateStreaming(n,r).then(o,(function(n){return s("wasm streaming compile failed: "+n),s("falling back to ArrayBuffer instantiation"),a(o)}))}))).catch(e)}(),n.___wasm_call_ctors=function(){return(n.___wasm_call_ctors=n.asm.D).apply(null,arguments)},n._malloc=function(){return(Wn=n._malloc=n.asm.E).apply(null,arguments)}),Fn=n._free=function(){return(Fn=n._free=n.asm.F).apply(null,arguments)},Rn=n.___getTypeName=function(){return(Rn=n.___getTypeName=n.asm.G).apply(null,arguments)},In=(n.___embind_register_native_and_builtin_types=function(){return(n.___embind_register_native_and_builtin_types=n.asm.H).apply(null,arguments)},n.stackSave=function(){return(In=n.stackSave=n.asm.I).apply(null,arguments)}),jn=n.stackRestore=function(){return(jn=n.stackRestore=n.asm.J).apply(null,arguments)},Un=n._setThrew=function(){return(Un=n._setThrew=n.asm.K).apply(null,arguments)};function Sn(t){function e(){kn||(kn=!0,n.calledRun=!0,d||(G(x),r(n),n.onRuntimeInitialized&&n.onRuntimeInitialized(),function(){if(n.postRun)for("function"==typeof n.postRun&&(n.postRun=[n.postRun]);n.postRun.length;)r=n.postRun.shift(),M.unshift(r);var r;G(M)}()))}t=t||u,q>0||(function(){if(n.preRun)for("function"==typeof n.preRun&&(n.preRun=[n.preRun]);n.preRun.length;)r=n.preRun.shift(),O.unshift(r);var r;G(O)}(),q>0||(n.setStatus?(n.setStatus("Running..."),setTimeout((function(){setTimeout((function(){n.setStatus("")}),1),e()}),1)):e()))}if(n.dynCall_iiijii=function(){return(n.dynCall_iiijii=n.asm.M).apply(null,arguments)},n.dynCall_jiji=function(){return(n.dynCall_jiji=n.asm.N).apply(null,arguments)},H=function n(){kn||Sn(),kn||(H=n)},n.run=Sn,n.preInit)for("function"==typeof n.preInit&&(n.preInit=[n.preInit]);n.preInit.length>0;)n.preInit.pop()();return Sn(),n.ready})},585:(n,r,t)=>{n.exports=t.p+"01dc9bcff8f5efaba61f.wasm"}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,