"use strict";(self.webpackChunksquoosh_browser_demo=self.webpackChunksquoosh_browser_demo||[]).push([[235],{235:(e,r,n)=>{n.r(r),n.d(r,{default:()=>t});const t=("file:///C:/Users/Dell7010/Desktop/web/tw/squoosh/codecs/wp2/enc/wp2_enc_mt_simd.js",function(e){function r(){return T.buffer!=x&&z(T.buffer),C}function t(){return T.buffer!=x&&z(T.buffer),E}function a(){return T.buffer!=x&&z(T.buffer),W}function o(){return T.buffer!=x&&z(T.buffer),S}function i(){return T.buffer!=x&&z(T.buffer),P}function u(){return T.buffer!=x&&z(T.buffer),I}function s(){return T.buffer!=x&&z(T.buffer),R}var c,f;(e=void 0!==(e=e||{})?e:{}).ready=new Promise((function(e,r){c=e,f=r}));var l,d={};for(l in e)e.hasOwnProperty(l)&&(d[l]=e[l]);var p,h=[],m=function(e,r){throw r},v=e.ENVIRONMENT_IS_PTHREAD||!1,g="";function _(r){return e.locateFile?e.locateFile(r,g):g+r}g=self.location.href,g=0!==(g="file:///C:/Users/Dell7010/Desktop/web/tw/squoosh/codecs/wp2/enc/wp2_enc_mt_simd.js").indexOf("blob:")?g.substr(0,g.lastIndexOf("/")+1):"",p=function(e){var r=new XMLHttpRequest;return r.open("GET",e,!1),r.responseType="arraybuffer",r.send(null),new Uint8Array(r.response)};var y,w=e.print||console.log.bind(console),b=e.printErr||console.warn.bind(console);for(l in d)d.hasOwnProperty(l)&&(e[l]=d[l]);d=null,e.arguments&&(h=e.arguments),e.thisProgram&&e.thisProgram,e.quit&&(m=e.quit),Atomics.load,Atomics.store,Atomics.compareExchange,e.wasmBinary&&(y=e.wasmBinary);var T,k,A=e.noExitRuntime||!0;"object"!=typeof WebAssembly&&te("no native wasm support detected");var x,C,E,W,S,P,I,F,R,H=!1;function L(e,r){e||te("Assertion failed: "+r)}function M(e,r,n){for(var t=r+n,a="";!(r>=t);){var o=e[r++];if(!o)return a;if(128&o){var i=63&e[r++];if(192!=(224&o)){var u=63&e[r++];if((o=224==(240&o)?(15&o)<<12|i<<6|u:(7&o)<<18|i<<12|u<<6|63&e[r++])<65536)a+=String.fromCharCode(o);else{var s=o-65536;a+=String.fromCharCode(55296|s>>10,56320|1023&s)}}else a+=String.fromCharCode((31&o)<<6|i)}else a+=String.fromCharCode(o)}return a}function O(e,r){return e?M(t(),e,r):""}function j(e,r,n){return function(e,r,n,t){if(!(t>0))return 0;for(var a=n,o=n+t-1,i=0;i<e.length;++i){var u=e.charCodeAt(i);if(u>=55296&&u<=57343&&(u=65536+((1023&u)<<10)|1023&e.charCodeAt(++i)),u<=127){if(n>=o)break;r[n++]=u}else if(u<=2047){if(n+1>=o)break;r[n++]=192|u>>6,r[n++]=128|63&u}else if(u<=65535){if(n+2>=o)break;r[n++]=224|u>>12,r[n++]=128|u>>6&63,r[n++]=128|63&u}else{if(n+3>=o)break;r[n++]=240|u>>18,r[n++]=128|u>>12&63,r[n++]=128|u>>6&63,r[n++]=128|63&u}}return r[n]=0,n-a}(e,t(),r,n)}function B(e){for(var r=0,n=0;n<e.length;++n){var t=e.charCodeAt(n);t>=55296&&t<=57343&&(t=65536+((1023&t)<<10)|1023&e.charCodeAt(++n)),t<=127?++r:r+=t<=2047?2:t<=65535?3:4}return r}function D(e,r){for(var n="",t=0;!(t>=r/2);++t){var o=a()[e+2*t>>1];if(0==o)break;n+=String.fromCharCode(o)}return n}function U(e,r,n){if(void 0===n&&(n=2147483647),n<2)return 0;for(var t=r,o=(n-=2)<2*e.length?n/2:e.length,i=0;i<o;++i){var u=e.charCodeAt(i);a()[r>>1]=u,r+=2}return a()[r>>1]=0,r-t}function G(e){return 2*e.length}function q(e,r){for(var n=0,t="";!(n>=r/4);){var a=i()[e+4*n>>2];if(0==a)break;if(++n,a>=65536){var o=a-65536;t+=String.fromCharCode(55296|o>>10,56320|1023&o)}else t+=String.fromCharCode(a)}return t}function N(e,r,n){if(void 0===n&&(n=2147483647),n<4)return 0;for(var t=r,a=t+n-4,o=0;o<e.length;++o){var u=e.charCodeAt(o);if(u>=55296&&u<=57343&&(u=65536+((1023&u)<<10)|1023&e.charCodeAt(++o)),i()[r>>2]=u,(r+=4)+4>a)break}return i()[r>>2]=0,r-t}function V(e){for(var r=0,n=0;n<e.length;++n){var t=e.charCodeAt(n);t>=55296&&t<=57343&&++n,r+=4}return r}function z(r){x=r,e.HEAP8=C=new Int8Array(r),e.HEAP16=W=new Int16Array(r),e.HEAP32=P=new Int32Array(r),e.HEAPU8=E=new Uint8Array(r),e.HEAPU16=S=new Uint16Array(r),e.HEAPU32=I=new Uint32Array(r),e.HEAPF32=F=new Float32Array(r),e.HEAPF64=R=new Float64Array(r)}v&&(x=e.buffer);var Q,X=e.INITIAL_MEMORY||16777216;if(v)T=e.wasmMemory,x=e.buffer;else if(e.wasmMemory)T=e.wasmMemory;else if(!((T=new WebAssembly.Memory({initial:X/65536,maximum:32768,shared:!0})).buffer instanceof SharedArrayBuffer))throw b("requested a shared WebAssembly.Memory but the returned buffer is not a SharedArrayBuffer, indicating that while the browser has SharedArrayBuffer it does not have WebAssembly threads support - you may need to set a flag"),Error("bad memory");T&&(x=T.buffer),X=x.byteLength,z(x);var J=[],Y=[],Z=[],$=[];function K(){v||se(Y)}var ee=0,re=null,ne=null;function te(r){e.onAbort&&e.onAbort(r),v&&console.error("Pthread aborting at "+(new Error).stack),b(r+=""),H=!0,r="abort("+r+"). Build with -s ASSERTIONS=1 for more info.";var n=new WebAssembly.RuntimeError(r);throw f(n),n}function ae(e){return e.startsWith("data:application/octet-stream;base64,")}if(e.preloadedImages={},e.preloadedAudios={},e.locateFile)ae(oe="wp2_enc_mt_simd.wasm")||(oe=_(oe));else var oe=new URL(n(137),n.b).toString();function ie(e){try{if(e==oe&&y)return new Uint8Array(y);if(p)return p(e);throw"both async and sync fetching of the wasm failed"}catch(e){te(e)}}var ue={112528:function(){throw"Canceled!"},112546:function(e,r){setTimeout((function(){br(e,r)}),0)}};function se(r){for(;r.length>0;){var n=r.shift();if("function"!=typeof n){var t=n.func;"number"==typeof t?void 0===n.arg?Q.get(t)():Q.get(t)(n.arg):t(void 0===n.arg?null:n.arg)}else n(e)}}function ce(e,n){if(e<=0||e>r().length||!0&e||n<0)return-28;if(0==n)return 0;n>=2147483647&&(n=1/0);var t=Atomics.load(i(),Mr>>2),a=0;if(t==e&&Atomics.compareExchange(i(),Mr>>2,t,0)==t&&(a=1,--n<=0))return 1;var o=Atomics.notify(i(),e>>2,n);if(o>=0)return o+a;throw"Atomics.notify returned an unexpected value "+o}function fe(e){if(v)throw"Internal Error! cleanupThread() can only ever be called from main application thread!";if(!e)throw"Internal Error! Null pthread_ptr in cleanupThread!";var r=de.pthreads[e];if(r){i()[e+12>>2]=0;var n=r.worker;de.returnWorkerToPool(n)}}e._emscripten_futex_wake=ce;var le,de={unusedWorkers:[],runningWorkers:[],tlsInitFunctions:[],initMainThreadBlock:function(){for(var e=navigator.hardwareConcurrency,r=0;r<e;++r)de.allocateUnusedWorker()},initRuntime:function(){for(var e=gr(228),r=0;r<57;++r)u()[e/4+r]=0;i()[e+12>>2]=e;var n=e+152;i()[n>>2]=n;var t=gr(512);for(r=0;r<128;++r)u()[t/4+r]=0;Atomics.store(u(),e+100>>2,t),Atomics.store(u(),e+40>>2,e),Cr(e,!1,1),yr(e)},initWorker:function(){},pthreads:{},threadExitHandlers:[],runExitHandlers:function(){for(;de.threadExitHandlers.length>0;)de.threadExitHandlers.pop()();v&&Wr()&&Sr()},runExitHandlersAndDeinitThread:function(e,r){Atomics.store(u(),e+56>>2,1),Atomics.store(u(),e+60>>2,0),de.runExitHandlers(),Atomics.store(u(),e+4>>2,r),Atomics.store(u(),e+0>>2,1),ce(e+0,2147483647),Cr(0,0,0)},setExitStatus:function(e){},threadExit:function(e){var r=Wr();r&&(de.runExitHandlersAndDeinitThread(r,e),v&&postMessage({cmd:"exit"}))},threadCancel:function(){de.runExitHandlersAndDeinitThread(Wr(),-1),postMessage({cmd:"cancelDone"})},terminateAllThreads:function(){for(var e in de.pthreads)(t=de.pthreads[e])&&t.worker&&de.returnWorkerToPool(t.worker);de.pthreads={};for(var r=0;r<de.unusedWorkers.length;++r)(n=de.unusedWorkers[r]).terminate();for(de.unusedWorkers=[],r=0;r<de.runningWorkers.length;++r){var n,t=(n=de.runningWorkers[r]).pthread;de.freeThreadData(t),n.terminate()}de.runningWorkers=[]},freeThreadData:function(e){if(e){if(e.threadInfoStruct){var r=i()[e.threadInfoStruct+100>>2];i()[e.threadInfoStruct+100>>2]=0,vr(r),vr(e.threadInfoStruct)}e.threadInfoStruct=0,e.allocatedOwnStack&&e.stackBase&&vr(e.stackBase),e.stackBase=0,e.worker&&(e.worker.pthread=null)}},returnWorkerToPool:function(e){de.runWithoutMainThreadQueuedCalls((function(){delete de.pthreads[e.pthread.threadInfoStruct],de.unusedWorkers.push(e),de.runningWorkers.splice(de.runningWorkers.indexOf(e),1),de.freeThreadData(e.pthread),e.pthread=void 0}))},runWithoutMainThreadQueuedCalls:function(e){i()[Lr>>2]=0;try{e()}finally{i()[Lr>>2]=1}},receiveObjectTransfer:function(e){},threadInit:function(){for(var e in de.tlsInitFunctions)de.tlsInitFunctions[e]()},loadWasmModuleToWorker:function(r,n){r.onmessage=function(t){var a=t.data,o=a.cmd;if(r.pthread&&(de.currentProxiedOperationCallerThread=r.pthread.threadInfoStruct),a.targetThread&&a.targetThread!=Wr()){var s=de.pthreads[a.targetThread];return s?s.worker.postMessage(t.data,a.transferList):console.error('Internal error! Worker sent a message "'+o+'" to target pthread '+a.targetThread+", but that thread no longer exists!"),void(de.currentProxiedOperationCallerThread=void 0)}if("processQueuedMainThreadWork"===o)kr();else if("spawnThread"===o)lr(t.data);else if("cleanupThread"===o)fe(a.thread);else if("killThread"===o)!function(e){if(v)throw"Internal Error! killThread() can only ever be called from main application thread!";if(!e)throw"Internal Error! Null pthread_ptr in killThread!";i()[e+12>>2]=0;var r=de.pthreads[e];r.worker.terminate(),de.freeThreadData(r),de.runningWorkers.splice(de.runningWorkers.indexOf(r.worker),1),r.worker.pthread=void 0}(a.thread);else if("cancelThread"===o)!function(e){if(v)throw"Internal Error! cancelThread() can only ever be called from main application thread!";if(!e)throw"Internal Error! Null pthread_ptr in cancelThread!";de.pthreads[e].worker.postMessage({cmd:"cancel"})}(a.thread);else if("loaded"===o)r.loaded=!0,n&&n(r),r.runPthread&&(r.runPthread(),delete r.runPthread);else if("print"===o)w("Thread "+a.threadId+": "+a.text);else if("printErr"===o)b("Thread "+a.threadId+": "+a.text);else if("alert"===o)alert("Thread "+a.threadId+": "+a.text);else if("exit"===o)r.pthread&&Atomics.load(u(),r.pthread.threadInfoStruct+64>>2)&&de.returnWorkerToPool(r);else if("exitProcess"===o)try{!function(r,n){if(v)throw postMessage({cmd:"exitProcess",returnCode:r}),new Or(r);pe()||(de.terminateAllThreads(),e.onExit&&e.onExit(r),H=!0),m(r,new Or(r))}(a.returnCode)}catch(t){if(t instanceof Or)return;throw t}else"cancelDone"===o?de.returnWorkerToPool(r):"objectTransfer"===o?de.receiveObjectTransfer(t.data):"setimmediate"===t.data.target?r.postMessage(t.data):b("worker sent an unknown command "+o);de.currentProxiedOperationCallerThread=void 0},r.onerror=function(e){b("pthread sent an error! "+e.filename+":"+e.lineno+": "+e.message)},r.postMessage({cmd:"load",urlOrBlob:e.mainScriptUrlOrBlob,wasmMemory:T,wasmModule:k})},allocateUnusedWorker:function(){if(e.locateFile){var r=_("wp2_enc_mt_simd.worker.js");de.unusedWorkers.push(new Worker(r))}else de.unusedWorkers.push(new Worker(new URL(n.p+n.u(384),n.b)))},getNewWorker:function(){return 0==de.unusedWorkers.length&&(de.allocateUnusedWorker(),de.loadWasmModuleToWorker(de.unusedWorkers[0])),de.unusedWorkers.pop()},busySpinWait:function(e){for(var r=performance.now()+e;performance.now()<r;);}};function pe(){return A||!1}e.establishStackSpace=function(e,r){Rr(e,r),Ir(e)},e.invokeEntryPoint=function(e,r){return Q.get(e)(r)},e.keepRuntimeAlive=pe,le=v?function(){return performance.now()-e.__performance_now_clock_drift}:function(){return performance.now()};function he(e){this.excPtr=e,this.ptr=e-16,this.set_type=function(e){i()[this.ptr+8>>2]=e},this.get_type=function(){return i()[this.ptr+8>>2]},this.set_destructor=function(e){i()[this.ptr+0>>2]=e},this.get_destructor=function(){return i()[this.ptr+0>>2]},this.set_refcount=function(e){i()[this.ptr+4>>2]=e},this.set_caught=function(e){e=e?1:0,r()[this.ptr+12>>0]=e},this.get_caught=function(){return 0!=r()[this.ptr+12>>0]},this.set_rethrown=function(e){e=e?1:0,r()[this.ptr+13>>0]=e},this.get_rethrown=function(){return 0!=r()[this.ptr+13>>0]},this.init=function(e,r){this.set_type(e),this.set_destructor(r),this.set_refcount(0),this.set_caught(!1),this.set_rethrown(!1)},this.add_ref=function(){Atomics.add(i(),this.ptr+4>>2,1)},this.release_ref=function(){return 1===Atomics.sub(i(),this.ptr+4>>2,1)}}var me={};function ve(e){for(;e.length;){var r=e.pop();e.pop()(r)}}function ge(e){return this.fromWireType(u()[e>>2])}var _e={},ye={},we={};function be(e){if(void 0===e)return"_unknown";var r=(e=e.replace(/[^a-zA-Z0-9_]/g,"$")).charCodeAt(0);return r>=48&&r<=57?"_"+e:e}function Te(e,r){return e=be(e),new Function("body","return function "+e+'() {\n    "use strict";    return body.apply(this, arguments);\n};\n')(r)}function ke(e,r){var n=Te(r,(function(e){this.name=r,this.message=e;var n=new Error(e).stack;void 0!==n&&(this.stack=this.toString()+"\n"+n.replace(/^Error(:[^\n]*)?\n/,""))}));return n.prototype=Object.create(e.prototype),n.prototype.constructor=n,n.prototype.toString=function(){return void 0===this.message?this.name:this.name+": "+this.message},n}var Ae=void 0;function xe(e){throw new Ae(e)}function Ce(e,r,n){function t(r){var t=n(r);t.length!==e.length&&xe("Mismatched type converter count");for(var a=0;a<e.length;++a)Fe(e[a],t[a])}e.forEach((function(e){we[e]=r}));var a=new Array(r.length),o=[],i=0;r.forEach((function(e,r){ye.hasOwnProperty(e)?a[r]=ye[e]:(o.push(e),_e.hasOwnProperty(e)||(_e[e]=[]),_e[e].push((function(){a[r]=ye[e],++i===o.length&&t(a)})))})),0===o.length&&t(a)}function Ee(e){switch(e){case 1:return 0;case 2:return 1;case 4:return 2;case 8:return 3;default:throw new TypeError("Unknown type size: "+e)}}var We=void 0;function Se(e){for(var r="",n=e;t()[n];)r+=We[t()[n++]];return r}var Pe=void 0;function Ie(e){throw new Pe(e)}function Fe(e,r,n){if(n=n||{},!("argPackAdvance"in r))throw new TypeError("registerType registeredInstance requires argPackAdvance");var t=r.name;if(e||Ie('type "'+t+'" must have a positive integer typeid pointer'),ye.hasOwnProperty(e)){if(n.ignoreDuplicateRegistrations)return;Ie("Cannot register type '"+t+"' twice")}if(ye[e]=r,delete we[e],_e.hasOwnProperty(e)){var a=_e[e];delete _e[e],a.forEach((function(e){e()}))}}var Re=[],He=[{},{value:void 0},{value:null},{value:!0},{value:!1}];function Le(e){e>4&&0==--He[e].refcount&&(He[e]=void 0,Re.push(e))}function Me(e){switch(e){case void 0:return 1;case null:return 2;case!0:return 3;case!1:return 4;default:var r=Re.length?Re.pop():He.length;return He[r]={refcount:1,value:e},r}}function Oe(e){if(null===e)return"null";var r=typeof e;return"object"===r||"array"===r||"function"===r?e.toString():""+e}function je(e,r){switch(r){case 2:return function(e){return this.fromWireType((T.buffer!=x&&z(T.buffer),F)[e>>2])};case 3:return function(e){return this.fromWireType(s()[e>>3])};default:throw new TypeError("Unknown float type: "+e)}}function Be(r,n,t){return r.includes("j")?function(r,n,t){var a=e["dynCall_"+r];return t&&t.length?a.apply(null,[n].concat(t)):a.call(null,n)}(r,n,t):Q.get(n).apply(null,t)}function De(e,r){var n,t,a,o=(e=Se(e)).includes("j")?(n=e,t=r,a=[],function(){a.length=arguments.length;for(var e=0;e<arguments.length;e++)a[e]=arguments[e];return Be(n,t,a)}):Q.get(r);return"function"!=typeof o&&Ie("unknown function pointer with signature "+e+": "+r),o}var Ue=void 0;function Ge(e){var r=_r(e),n=Se(r);return vr(r),n}function qe(e,n,s){switch(n){case 0:return s?function(e){return r()[e]}:function(e){return t()[e]};case 1:return s?function(e){return a()[e>>1]}:function(e){return o()[e>>1]};case 2:return s?function(e){return i()[e>>2]}:function(e){return u()[e>>2]};default:throw new TypeError("Unknown integer type: "+e)}}var Ne={};function Ve(){return"object"==typeof globalThis?globalThis:Function("return this")()}function ze(e,r){var n=ye[e];return void 0===n&&Ie(r+" has unknown type "+Ge(e)),n}var Qe={},Xe=[];function Je(e,n,t){if(e<=0||e>r().length||!0&e)return-28;var a=Atomics.wait(i(),e>>2,n,t);if("timed-out"===a)return-73;if("not-equal"===a)return-6;if("ok"===a)return 0;throw"Atomics.wait returned an unexpected value "+a}function Ye(e,r){for(var n=arguments.length-2,t=Pr(),a=n,o=Fr(8*a),i=o>>3,u=0;u<n;u++){var c=arguments[2+u];s()[i+u]=c}var f=Ar(e,a,o,r);return Ir(t),f}var Ze=[];function $e(e){try{return T.grow(e-x.byteLength+65535>>>16),z(T.buffer),1}catch(e){}}var Ke={inEventHandler:0,removeAllEventListeners:function(){for(var e=Ke.eventHandlers.length-1;e>=0;--e)Ke._removeHandler(e);Ke.eventHandlers=[],Ke.deferredCalls=[]},registerRemoveEventListeners:function(){Ke.removeEventListenersRegistered||(Z.push(Ke.removeAllEventListeners),Ke.removeEventListenersRegistered=!0)},deferredCalls:[],deferCall:function(e,r,n){function t(e,r){if(e.length!=r.length)return!1;for(var n in e)if(e[n]!=r[n])return!1;return!0}for(var a in Ke.deferredCalls){var o=Ke.deferredCalls[a];if(o.targetFunction==e&&t(o.argsList,n))return}Ke.deferredCalls.push({targetFunction:e,precedence:r,argsList:n}),Ke.deferredCalls.sort((function(e,r){return e.precedence<r.precedence}))},removeDeferredCalls:function(e){for(var r=0;r<Ke.deferredCalls.length;++r)Ke.deferredCalls[r].targetFunction==e&&(Ke.deferredCalls.splice(r,1),--r)},canPerformEventHandlerRequests:function(){return Ke.inEventHandler&&Ke.currentEventHandler.allowsDeferredCalls},runDeferredCalls:function(){if(Ke.canPerformEventHandlerRequests())for(var e=0;e<Ke.deferredCalls.length;++e){var r=Ke.deferredCalls[e];Ke.deferredCalls.splice(e,1),--e,r.targetFunction.apply(null,r.argsList)}},eventHandlers:[],removeAllHandlersOnTarget:function(e,r){for(var n=0;n<Ke.eventHandlers.length;++n)Ke.eventHandlers[n].target!=e||r&&r!=Ke.eventHandlers[n].eventTypeString||Ke._removeHandler(n--)},_removeHandler:function(e){var r=Ke.eventHandlers[e];r.target.removeEventListener(r.eventTypeString,r.eventListenerFunc,r.useCapture),Ke.eventHandlers.splice(e,1)},registerOrRemoveHandler:function(e){var r=function(r){++Ke.inEventHandler,Ke.currentEventHandler=e,Ke.runDeferredCalls(),e.handlerFunc(r),Ke.runDeferredCalls(),--Ke.inEventHandler};if(e.callbackfunc)e.eventListenerFunc=r,e.target.addEventListener(e.eventTypeString,r,e.useCapture),Ke.eventHandlers.push(e),Ke.registerRemoveEventListeners();else for(var n=0;n<Ke.eventHandlers.length;++n)Ke.eventHandlers[n].target==e.target&&Ke.eventHandlers[n].eventTypeString==e.eventTypeString&&Ke._removeHandler(n--)},queueEventHandlerOnThread_iiii:function(e,r,n,t,a){var o=Pr(),u=Fr(12);i()[u>>2]=n,i()[u+4>>2]=t,i()[u+8>>2]=a,xr(0,e,637534208,r,t,u),Ir(o)},getTargetThreadForEventCallback:function(e){switch(e){case 1:return 0;case 2:return de.currentProxiedOperationCallerThread;default:return e}},getNodeNameForTarget:function(e){return e?e==window?"#window":e==screen?"#screen":e&&e.nodeName?e.nodeName:"":""},fullscreenEnabled:function(){return document.fullscreenEnabled||document.webkitFullscreenEnabled}};var er=[0,"undefined"!=typeof document?document:0,"undefined"!=typeof window?window:0];function rr(e){return function(e){var r;return e=(r=e)>2?O(r):r,er[e]||("undefined"!=typeof document?document.querySelector(e):void 0)}(e)}function nr(e,r,n){var t=rr(e);if(!t)return-4;if(t.canvasSharedPtr&&(i()[t.canvasSharedPtr>>2]=r,i()[t.canvasSharedPtr+4>>2]=n),!t.offscreenCanvas&&t.controlTransferredOffscreen)return t.canvasSharedPtr?(function(e,r,n,t){!function(e,r,n,t){var a,o,u,s=Pr(),c=Fr(12),f=0;r&&(o=B(a=r)+1,j(a,u=gr(o),o),f=u),i()[c>>2]=f,i()[c+4>>2]=n,i()[c+8>>2]=t,xr(0,e,657457152,0,f,c),Ir(s)}(e,r=r?O(r):"",n,t)}(i()[t.canvasSharedPtr+8>>2],e,r,n),1):-4;t.offscreenCanvas&&(t=t.offscreenCanvas);var a=!1;if(t.GLctxObject&&t.GLctxObject.GLctx){var o=t.GLctxObject.GLctx.getParameter(2978);a=0===o[0]&&0===o[1]&&o[2]===t.width&&o[3]===t.height}return t.width=r,t.height=n,a&&t.GLctxObject.GLctx.viewport(0,0,r,n),0}function tr(e,r,n){return v?Ye(1,1,e,r,n):nr(e,r,n)}var ar,or={counter:1,buffers:[],programs:[],framebuffers:[],renderbuffers:[],textures:[],shaders:[],vaos:[],contexts:{},offscreenCanvases:{},queries:[],stringCache:{},unpackAlignment:4,recordError:function(e){or.lastError||(or.lastError=e)},getNewId:function(e){for(var r=or.counter++,n=e.length;n<r;n++)e[n]=null;return r},getSource:function(e,r,n,t){for(var a="",o=0;o<r;++o){var u=t?i()[t+4*o>>2]:-1;a+=O(i()[n+4*o>>2],u<0?void 0:u)}return a},createContext:function(e,r){e.getContextSafariWebGL2Fixed||(e.getContextSafariWebGL2Fixed=e.getContext,e.getContext=function(r,n){var t=e.getContextSafariWebGL2Fixed(r,n);return"webgl"==r==t instanceof WebGLRenderingContext?t:null});var n=e.getContext("webgl",r);return n?or.registerContext(n,r):0},registerContext:function(e,r){var n=gr(8);i()[n+4>>2]=Wr();var t={handle:n,attributes:r,version:r.majorVersion,GLctx:e};return e.canvas&&(e.canvas.GLctxObject=t),or.contexts[n]=t,(void 0===r.enableExtensionsByDefault||r.enableExtensionsByDefault)&&or.initExtensions(t),n},makeContextCurrent:function(r){return or.currentContext=or.contexts[r],e.ctx=ar=or.currentContext&&or.currentContext.GLctx,!(r&&!ar)},getContext:function(e){return or.contexts[e]},deleteContext:function(e){or.currentContext===or.contexts[e]&&(or.currentContext=null),"object"==typeof Ke&&Ke.removeAllHandlersOnTarget(or.contexts[e].GLctx.canvas),or.contexts[e]&&or.contexts[e].GLctx.canvas&&(or.contexts[e].GLctx.canvas.GLctxObject=void 0),vr(or.contexts[e].handle),or.contexts[e]=null},initExtensions:function(e){if(e||(e=or.currentContext),!e.initExtensionsDone){e.initExtensionsDone=!0;var r,n=e.GLctx;!function(e){var r=e.getExtension("ANGLE_instanced_arrays");r&&(e.vertexAttribDivisor=function(e,n){r.vertexAttribDivisorANGLE(e,n)},e.drawArraysInstanced=function(e,n,t,a){r.drawArraysInstancedANGLE(e,n,t,a)},e.drawElementsInstanced=function(e,n,t,a,o){r.drawElementsInstancedANGLE(e,n,t,a,o)})}(n),function(e){var r=e.getExtension("OES_vertex_array_object");r&&(e.createVertexArray=function(){return r.createVertexArrayOES()},e.deleteVertexArray=function(e){r.deleteVertexArrayOES(e)},e.bindVertexArray=function(e){r.bindVertexArrayOES(e)},e.isVertexArray=function(e){return r.isVertexArrayOES(e)})}(n),function(e){var r=e.getExtension("WEBGL_draw_buffers");r&&(e.drawBuffers=function(e,n){r.drawBuffersWEBGL(e,n)})}(n),n.disjointTimerQueryExt=n.getExtension("EXT_disjoint_timer_query"),(r=n).multiDrawWebgl=r.getExtension("WEBGL_multi_draw"),(n.getSupportedExtensions()||[]).forEach((function(e){e.includes("lose_context")||e.includes("debug")||n.getExtension(e)}))}}},ir=["default","low-power","high-performance"],ur={mappings:{},buffers:[null,[],[]],printChar:function(e,r){var n=ur.buffers[e];0===r||10===r?((1===e?w:b)(M(n,0)),n.length=0):n.push(r)},varargs:void 0,get:function(){return ur.varargs+=4,i()[ur.varargs-4>>2]},getStr:function(e){return O(e)},get64:function(e,r){return e}};function sr(e){return v?Ye(2,1,e):0}function cr(e,r,n,t,a){if(v)return Ye(3,1,e,r,n,t,a)}function fr(e,r,n,a){if(v)return Ye(4,1,e,r,n,a);for(var o=0,u=0;u<n;u++){for(var s=i()[r+8*u>>2],c=i()[r+(8*u+4)>>2],f=0;f<c;f++)ur.printChar(e,t()[s+f]);o+=c}return i()[a>>2]=o,0}function lr(e){if(v)throw"Internal Error! spawnThread() can only ever be called from main application thread!";var r=de.getNewWorker();if(!r)return 6;if(void 0!==r.pthread)throw"Internal error!";if(!e.pthread_ptr)throw"Internal error, no pthread ptr!";de.runningWorkers.push(r);for(var n=gr(512),t=0;t<128;++t)i()[n+4*t>>2]=0;var a=e.stackBase+e.stackSize,o=de.pthreads[e.pthread_ptr]={worker:r,stackBase:e.stackBase,stackSize:e.stackSize,allocatedOwnStack:e.allocatedOwnStack,threadInfoStruct:e.pthread_ptr},s=o.threadInfoStruct>>2;Atomics.store(u(),s+16,e.detached),Atomics.store(u(),s+25,n),Atomics.store(u(),s+10,o.threadInfoStruct),Atomics.store(u(),s+20,e.stackSize),Atomics.store(u(),s+19,a),Atomics.store(u(),s+26,e.stackSize),Atomics.store(u(),s+28,a),Atomics.store(u(),s+29,e.detached);var c=Er()+40;Atomics.store(u(),s+43,c),r.pthread=o;var f={cmd:"run",start_routine:e.startRoutine,arg:e.arg,threadInfoStruct:e.pthread_ptr,stackBase:e.stackBase,stackSize:e.stackSize};return r.runPthread=function(){f.time=performance.now(),r.postMessage(f,e.transferList)},r.loaded&&(r.runPthread(),delete r.runPthread),0}function dr(){if(v){var e=Wr();if(e&&!Atomics.load(u(),e+56>>2)&&2==Atomics.load(u(),e+0>>2))throw"Canceled!"}}v||de.initMainThreadBlock(),Ae=e.InternalError=ke(Error,"InternalError"),function(){for(var e=new Array(256),r=0;r<256;++r)e[r]=String.fromCharCode(r);We=e}(),Pe=e.BindingError=ke(Error,"BindingError"),e.count_emval_handles=function(){for(var e=0,r=5;r<He.length;++r)void 0!==He[r]&&++e;return e},e.get_first_emval=function(){for(var e=5;e<He.length;++e)if(void 0!==He[e])return He[e];return null},Ue=e.UnboundTypeError=ke(Error,"UnboundTypeError");var pr,hr=[null,tr,sr,cr,fr],mr={d:function(e,r,n,t){te("Assertion failed: "+O(e)+", at: "+[r?O(r):"unknown filename",n,t?O(t):"unknown function"])},O:function(e){return gr(e+16)+16},s:function(e,r){return n=e,t=r,void de.threadExitHandlers.push((function(){Q.get(n)(t)}));var n,t},N:function(e,r,n){throw new he(e).init(r,n),e},u:function(e){var r=me[e];delete me[e];var n=r.rawConstructor,t=r.rawDestructor,a=r.fields;Ce([e],a.map((function(e){return e.getterReturnType})).concat(a.map((function(e){return e.setterArgumentType}))),(function(e){var o={};return a.forEach((function(r,n){var t=r.fieldName,i=e[n],u=r.getter,s=r.getterContext,c=e[n+a.length],f=r.setter,l=r.setterContext;o[t]={read:function(e){return i.fromWireType(u(s,e))},write:function(e,r){var n=[];f(l,e,c.toWireType(n,r)),ve(n)}}})),[{name:r.name,fromWireType:function(e){var r={};for(var n in o)r[n]=o[n].read(e);return t(e),r},toWireType:function(e,r){for(var a in o)if(!(a in r))throw new TypeError('Missing field:  "'+a+'"');var i=n();for(a in o)o[a].write(i,r[a]);return null!==e&&e.push(t,i),i},argPackAdvance:8,readValueFromPointer:ge,destructorFunction:t}]}))},y:function(e,r,n,t,a){},L:function(e,n,t,o,u){var s=Ee(t);Fe(e,{name:n=Se(n),fromWireType:function(e){return!!e},toWireType:function(e,r){return r?o:u},argPackAdvance:8,readValueFromPointer:function(e){var o;if(1===t)o=r();else if(2===t)o=a();else{if(4!==t)throw new TypeError("Unknown boolean type size: "+n);o=i()}return this.fromWireType(o[e>>s])},destructorFunction:null})},K:function(e,r){Fe(e,{name:r=Se(r),fromWireType:function(e){var r=He[e].value;return Le(e),r},toWireType:function(e,r){return Me(r)},argPackAdvance:8,readValueFromPointer:ge,destructorFunction:null})},p:function(e,r,n){var t=Ee(n);Fe(e,{name:r=Se(r),fromWireType:function(e){return e},toWireType:function(e,r){if("number"!=typeof r&&"boolean"!=typeof r)throw new TypeError('Cannot convert "'+Oe(r)+'" to '+this.name);return r},argPackAdvance:8,readValueFromPointer:je(r,t),destructorFunction:null})},t:function(r,n,t,a,o,u){var s=function(e,r){for(var n=[],t=0;t<e;t++)n.push(i()[(r>>2)+t]);return n}(n,t);r=Se(r),o=De(a,o),function(r,n,t){e.hasOwnProperty(r)?((void 0===t||void 0!==e[r].overloadTable&&void 0!==e[r].overloadTable[t])&&Ie("Cannot register public name '"+r+"' twice"),function(e,r,n){if(void 0===e[r].overloadTable){var t=e[r];e[r]=function(){return e[r].overloadTable.hasOwnProperty(arguments.length)||Ie("Function '"+n+"' called with an invalid number of arguments ("+arguments.length+") - expects one of ("+e[r].overloadTable+")!"),e[r].overloadTable[arguments.length].apply(this,arguments)},e[r].overloadTable=[],e[r].overloadTable[t.argCount]=t}}(e,r,r),e.hasOwnProperty(t)&&Ie("Cannot register multiple overloads of a function with the same number of arguments ("+t+")!"),e[r].overloadTable[t]=n):(e[r]=n,void 0!==t&&(e[r].numArguments=t))}(r,(function(){!function(e,r){var n=[],t={};throw r.forEach((function e(r){t[r]||ye[r]||(we[r]?we[r].forEach(e):(n.push(r),t[r]=!0))})),new Ue(e+": "+n.map(Ge).join([", "]))}("Cannot call "+r+" due to unbound types",s)}),n-1),Ce([],s,(function(t){var a=[t[0],null].concat(t.slice(1));return function(r,n,t){e.hasOwnProperty(r)||xe("Replacing nonexistant public symbol"),void 0!==e[r].overloadTable&&void 0!==t?e[r].overloadTable[t]=n:(e[r]=n,e[r].argCount=t)}(r,function(e,r,n,t,a){var o=r.length;o<2&&Ie("argTypes array size mismatch! Must at least get return value and 'this' types!");for(var i=null!==r[1]&&null!==n,u=!1,s=1;s<r.length;++s)if(null!==r[s]&&void 0===r[s].destructorFunction){u=!0;break}var c="void"!==r[0].name,f="",l="";for(s=0;s<o-2;++s)f+=(0!==s?", ":"")+"arg"+s,l+=(0!==s?", ":"")+"arg"+s+"Wired";var d="return function "+be(e)+"("+f+") {\nif (arguments.length !== "+(o-2)+") {\nthrowBindingError('function "+e+" called with ' + arguments.length + ' arguments, expected "+(o-2)+" args!');\n}\n";u&&(d+="var destructors = [];\n");var p=u?"destructors":"null",h=["throwBindingError","invoker","fn","runDestructors","retType","classParam"],m=[Ie,t,a,ve,r[0],r[1]];for(i&&(d+="var thisWired = classParam.toWireType("+p+", this);\n"),s=0;s<o-2;++s)d+="var arg"+s+"Wired = argType"+s+".toWireType("+p+", arg"+s+"); // "+r[s+2].name+"\n",h.push("argType"+s),m.push(r[s+2]);if(i&&(l="thisWired"+(l.length>0?", ":"")+l),d+=(c?"var rv = ":"")+"invoker(fn"+(l.length>0?", ":"")+l+");\n",u)d+="runDestructors(destructors);\n";else for(s=i?1:2;s<r.length;++s){var v=1===s?"thisWired":"arg"+(s-2)+"Wired";null!==r[s].destructorFunction&&(d+=v+"_dtor("+v+"); // "+r[s].name+"\n",h.push(v+"_dtor"),m.push(r[s].destructorFunction))}return c&&(d+="var ret = retType.fromWireType(rv);\nreturn ret;\n"),d+="}\n",h.push(d),function(e,r){if(!(e instanceof Function))throw new TypeError("new_ called with constructor type "+typeof e+" which is not a function");var n=Te(e.name||"unknownFunctionName",(function(){}));n.prototype=e.prototype;var t=new n,a=e.apply(t,r);return a instanceof Object?a:t}(Function,h).apply(null,m)}(r,a,null,o,u),n-1),[]}))},e:function(e,r,n,t,a){r=Se(r),-1===a&&(a=4294967295);var o=Ee(n),i=function(e){return e};if(0===t){var u=32-8*n;i=function(e){return e<<u>>>u}}var s=r.includes("unsigned");Fe(e,{name:r,fromWireType:i,toWireType:function(e,n){if("number"!=typeof n&&"boolean"!=typeof n)throw new TypeError('Cannot convert "'+Oe(n)+'" to '+this.name);if(n<t||n>a)throw new TypeError('Passing a number "'+Oe(n)+'" from JS side to C/C++ side to an argument of type "'+r+'", which is outside the valid range ['+t+", "+a+"]!");return s?n>>>0:0|n},argPackAdvance:8,readValueFromPointer:qe(r,o,0!==t),destructorFunction:null})},b:function(e,r,n){var t=[Int8Array,Uint8Array,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array][r];function a(e){e>>=2;var r=u(),n=r[e],a=r[e+1];return new t(x,a,n)}Fe(e,{name:n=Se(n),fromWireType:a,argPackAdvance:8,readValueFromPointer:a},{ignoreDuplicateRegistrations:!0})},q:function(e,r){var n="std::string"===(r=Se(r));Fe(e,{name:r,fromWireType:function(e){var r,a=u()[e>>2];if(n)for(var o=e+4,i=0;i<=a;++i){var s=e+4+i;if(i==a||0==t()[s]){var c=O(o,s-o);void 0===r?r=c:(r+=String.fromCharCode(0),r+=c),o=s+1}}else{var f=new Array(a);for(i=0;i<a;++i)f[i]=String.fromCharCode(t()[e+4+i]);r=f.join("")}return vr(e),r},toWireType:function(e,r){r instanceof ArrayBuffer&&(r=new Uint8Array(r));var a="string"==typeof r;a||r instanceof Uint8Array||r instanceof Uint8ClampedArray||r instanceof Int8Array||Ie("Cannot pass non-string to std::string");var o=(n&&a?function(){return B(r)}:function(){return r.length})(),i=gr(4+o+1);if(u()[i>>2]=o,n&&a)j(r,i+4,o+1);else if(a)for(var s=0;s<o;++s){var c=r.charCodeAt(s);c>255&&(vr(i),Ie("String has UTF-16 code units that do not fit in 8 bits")),t()[i+4+s]=c}else for(s=0;s<o;++s)t()[i+4+s]=r[s];return null!==e&&e.push(vr,i),i},argPackAdvance:8,readValueFromPointer:ge,destructorFunction:function(e){vr(e)}})},j:function(e,r,n){var t,a,i,s,c;n=Se(n),2===r?(t=D,a=U,s=G,i=function(){return o()},c=1):4===r&&(t=q,a=N,s=V,i=function(){return u()},c=2),Fe(e,{name:n,fromWireType:function(e){for(var n,a=u()[e>>2],o=i(),s=e+4,f=0;f<=a;++f){var l=e+4+f*r;if(f==a||0==o[l>>c]){var d=t(s,l-s);void 0===n?n=d:(n+=String.fromCharCode(0),n+=d),s=l+r}}return vr(e),n},toWireType:function(e,t){"string"!=typeof t&&Ie("Cannot pass non-string to C++ string type "+n);var o=s(t),i=gr(4+o+r);return u()[i>>2]=o>>c,a(t,i+4,o+r),null!==e&&e.push(vr,i),i},argPackAdvance:8,readValueFromPointer:ge,destructorFunction:function(e){vr(e)}})},v:function(e,r,n,t,a,o){me[e]={name:Se(r),rawConstructor:De(n,t),rawDestructor:De(a,o),fields:[]}},c:function(e,r,n,t,a,o,i,u,s,c){me[e].fields.push({fieldName:Se(r),getterReturnType:n,getter:De(t,a),getterContext:o,setterArgumentType:i,setter:De(u,s),setterContext:c})},M:function(e,r){Fe(e,{isVoid:!0,name:r=Se(r),argPackAdvance:0,fromWireType:function(){},toWireType:function(e,r){}})},G:function(e,r){if(e==r)postMessage({cmd:"processQueuedMainThreadWork"});else if(v)postMessage({targetThread:e,cmd:"processThreadQueue"});else{var n=de.pthreads[e],t=n&&n.worker;if(!t)return;t.postMessage({cmd:"processThreadQueue"})}return 1},m:Le,J:function(e){return 0===e?Me(Ve()):(e=void 0===(n=Ne[r=e])?Se(r):n,Me(Ve()[e]));var r,n},Q:function(e){e>4&&(He[e].refcount+=1)},w:function(r,n,t,a){r=function(e){return e||Ie("Cannot use deleted val. handle = "+e),He[e].value}(r);var o=Qe[n];return o||(o=function(r){for(var n="",t=0;t<r;++t)n+=(0!==t?", ":"")+"arg"+t;var a="return function emval_allocator_"+r+"(constructor, argTypes, args) {\n";for(t=0;t<r;++t)a+="var argType"+t+" = requireRegisteredType(Module['HEAP32'][(argTypes >>> 2) + "+t+'], "parameter '+t+'");\nvar arg'+t+" = argType"+t+".readValueFromPointer(args);\nargs += argType"+t+"['argPackAdvance'];\n";return a+="var obj = new constructor("+n+");\nreturn __emval_register(obj);\n}\n",new Function("requireRegisteredType","Module","__emval_register",a)(ze,e,Me)}(n),Qe[n]=o),o(r,t,a)},k:function(){te()},o:function(e,r,n){var a=function(e,r){var n;for(Xe.length=0,r>>=2;n=t()[e++];){var a=n<105;a&&1&r&&r++,Xe.push(a?s()[r++>>1]:i()[r]),++r}return Xe}(r,n);return ue[e].apply(null,a)},C:function(){},n:function(e,r){},f:Je,g:ce,h:le,A:function(e,r,n){t().copyWithin(e,r,r+n)},R:function(){return navigator.hardwareConcurrency},D:function(e,r,n){Ze.length=r;for(var t=n>>3,a=0;a<r;a++)Ze[a]=s()[t+a];return(e<0?ue[-e-1]:hr[e]).apply(null,Ze)},B:function(e){var r=t().length;if((e>>>=0)<=r)return!1;var n,a=2147483648;if(e>a)return!1;for(var o=1;o<=4;o*=2){var i=r*(1+.2/o);if(i=Math.min(i,e+100663296),$e(Math.min(a,((n=Math.max(e,i))%65536>0&&(n+=65536-n%65536),n))))return!0}return!1},E:function(e,r,n){return rr(e)?nr(e,r,n):tr(e,r,n)},l:function(e){},F:function(e,r){return n=e,t=r>>2,a=i()[t+6],o={alpha:!!i()[t+0],depth:!!i()[t+1],stencil:!!i()[t+2],antialias:!!i()[t+3],premultipliedAlpha:!!i()[t+4],preserveDrawingBuffer:!!i()[t+5],powerPreference:ir[a],failIfMajorPerformanceCaveat:!!i()[t+7],majorVersion:i()[t+8],minorVersion:i()[t+9],enableExtensionsByDefault:i()[t+10],explicitSwapControl:i()[t+11],proxyContextToMainThread:i()[t+12],renderViaOffscreenBackBuffer:i()[t+13]},(u=rr(n))?o.explicitSwapControl?0:or.createContext(u,o):0;var n,t,a,o,u},I:sr,x:cr,H:fr,z:function(){de.initRuntime()},a:T||e.wasmMemory,r:function(e,r,n,t){if("undefined"==typeof SharedArrayBuffer)return b("Current environment does not support SharedArrayBuffer, pthreads are not available!"),6;if(!e)return b("pthread_create called with a null thread pointer!"),28;var a=[];if(v&&0===a.length)return Tr(687865856,e,r,n,t);var o=0,s=0,c=0;r&&-1!=r?(o=i()[r>>2],o+=81920,s=i()[r+8>>2],c=0!==i()[r+12>>2]):o=2097152;var f=0==s;f?s=Hr(16,o):L((s-=o)>0);for(var l=gr(228),d=0;d<57;++d)u()[(l>>2)+d]=0;i()[e>>2]=l,i()[l+12>>2]=l;var p=l+152;i()[p>>2]=p;var h={stackBase:s,stackSize:o,allocatedOwnStack:f,detached:c,startRoutine:n,pthread_ptr:l,arg:t,transferList:a};return v?(h.cmd="spawnThread",postMessage(h,a),0):lr(h)},P:function(e,r){return function(e,r,n){if(!e)return b("pthread_join attempted on a null thread pointer!"),71;if(v&&Wr()==e)return b("PThread "+e+" is attempting to join to itself!"),16;if(!v&&wr()==e)return b("Main thread "+e+" is attempting to join to itself!"),16;if(i()[e+12>>2]!==e)return b("pthread_join attempted on thread "+e+", which does not point to a valid thread, or does not exist anymore!"),71;if(Atomics.load(u(),e+64>>2))return b("Attempted to join thread "+e+", which was already detached!"),28;for(;;){var t=Atomics.load(u(),e+0>>2);if(1==t){var a=Atomics.load(u(),e+4>>2);return r&&(i()[r>>2]=a),Atomics.store(u(),e+64>>2,1),v?postMessage({cmd:"cleanupThread",thread:e}):fe(e),0}0,dr(),v||kr(),Je(e+0,t,v?100:1)}}(e,r)},i:function(e){}},vr=(function(){var r={a:mr};function n(r,n){var t,a=r.exports;if(e.asm=a,Q=e.asm.W,t=e.asm.S,Y.unshift(t),de.tlsInitFunctions.push(e.asm.V),k=n,!v){var o=de.unusedWorkers.length;de.unusedWorkers.forEach((function(r){de.loadWasmModuleToWorker(r,(function(){--o||function(r){if(ee--,e.monitorRunDependencies&&e.monitorRunDependencies(ee),0==ee&&(null!==re&&(clearInterval(re),re=null),ne)){var n=ne;ne=null,n()}}()}))}))}}function t(e){n(e.instance,e.module)}function a(e){return(y||"function"!=typeof fetch?Promise.resolve().then((function(){return ie(oe)})):fetch(oe,{credentials:"same-origin"}).then((function(e){if(!e.ok)throw"failed to load wasm binary file at '"+oe+"'";return e.arrayBuffer()})).catch((function(){return ie(oe)}))).then((function(e){return WebAssembly.instantiate(e,r)})).then(e,(function(e){b("failed to asynchronously prepare wasm: "+e),te(e)}))}if(v||(L(!v,"addRunDependency cannot be used in a pthread worker"),ee++,e.monitorRunDependencies&&e.monitorRunDependencies(ee)),e.instantiateWasm)try{return e.instantiateWasm(r,n)}catch(e){return b("Module.instantiateWasm callback failed with error: "+e),!1}(y||"function"!=typeof WebAssembly.instantiateStreaming||ae(oe)||"function"!=typeof fetch?a(t):fetch(oe,{credentials:"same-origin"}).then((function(e){return WebAssembly.instantiateStreaming(e,r).then(t,(function(e){return b("wasm streaming compile failed: "+e),b("falling back to ArrayBuffer instantiation"),a(t)}))}))).catch(f)}(),e.___wasm_call_ctors=function(){return(e.___wasm_call_ctors=e.asm.S).apply(null,arguments)},e._free=function(){return(vr=e._free=e.asm.T).apply(null,arguments)}),gr=e._malloc=function(){return(gr=e._malloc=e.asm.U).apply(null,arguments)},_r=(e._emscripten_tls_init=function(){return(e._emscripten_tls_init=e.asm.V).apply(null,arguments)},e.___getTypeName=function(){return(_r=e.___getTypeName=e.asm.X).apply(null,arguments)}),yr=(e.___embind_register_native_and_builtin_types=function(){return(e.___embind_register_native_and_builtin_types=e.asm.Y).apply(null,arguments)},e._emscripten_current_thread_process_queued_calls=function(){return(e._emscripten_current_thread_process_queued_calls=e.asm.Z).apply(null,arguments)},e._emscripten_register_main_browser_thread_id=function(){return(yr=e._emscripten_register_main_browser_thread_id=e.asm._).apply(null,arguments)}),wr=e._emscripten_main_browser_thread_id=function(){return(wr=e._emscripten_main_browser_thread_id=e.asm.$).apply(null,arguments)},br=e.__emscripten_do_dispatch_to_thread=function(){return(br=e.__emscripten_do_dispatch_to_thread=e.asm.aa).apply(null,arguments)},Tr=e._emscripten_sync_run_in_main_thread_4=function(){return(Tr=e._emscripten_sync_run_in_main_thread_4=e.asm.ba).apply(null,arguments)},kr=e._emscripten_main_thread_process_queued_calls=function(){return(kr=e._emscripten_main_thread_process_queued_calls=e.asm.ca).apply(null,arguments)},Ar=e._emscripten_run_in_main_runtime_thread_js=function(){return(Ar=e._emscripten_run_in_main_runtime_thread_js=e.asm.da).apply(null,arguments)},xr=e.__emscripten_call_on_thread=function(){return(xr=e.__emscripten_call_on_thread=e.asm.ea).apply(null,arguments)},Cr=e.__emscripten_thread_init=function(){return(Cr=e.__emscripten_thread_init=e.asm.fa).apply(null,arguments)},Er=e._emscripten_get_global_libc=function(){return(Er=e._emscripten_get_global_libc=e.asm.ga).apply(null,arguments)},Wr=e._pthread_self=function(){return(Wr=e._pthread_self=e.asm.ha).apply(null,arguments)},Sr=e.___pthread_tsd_run_dtors=function(){return(Sr=e.___pthread_tsd_run_dtors=e.asm.ia).apply(null,arguments)},Pr=e.stackSave=function(){return(Pr=e.stackSave=e.asm.ja).apply(null,arguments)},Ir=e.stackRestore=function(){return(Ir=e.stackRestore=e.asm.ka).apply(null,arguments)},Fr=e.stackAlloc=function(){return(Fr=e.stackAlloc=e.asm.la).apply(null,arguments)},Rr=e._emscripten_stack_set_limits=function(){return(Rr=e._emscripten_stack_set_limits=e.asm.ma).apply(null,arguments)},Hr=e._memalign=function(){return(Hr=e._memalign=e.asm.na).apply(null,arguments)},Lr=(e.dynCall_jiii=function(){return(e.dynCall_jiii=e.asm.oa).apply(null,arguments)},e.dynCall_jiiiiii=function(){return(e.dynCall_jiiiiii=e.asm.pa).apply(null,arguments)},e.dynCall_jiji=function(){return(e.dynCall_jiji=e.asm.qa).apply(null,arguments)},e.__emscripten_allow_main_runtime_queued_calls=112520),Mr=e.__emscripten_main_thread_futex=123420;function Or(e){this.name="ExitStatus",this.message="Program terminated with exit("+e+")",this.status=e}function jr(r){if(r=r||h,!(ee>0)){if(v)return c(e),K(),void postMessage({cmd:"loaded"});!function(){if(!v){if(e.preRun)for("function"==typeof e.preRun&&(e.preRun=[e.preRun]);e.preRun.length;)r=e.preRun.shift(),J.unshift(r);var r;se(J)}}(),ee>0||(e.setStatus?(e.setStatus("Running..."),setTimeout((function(){setTimeout((function(){e.setStatus("")}),1),n()}),1)):n())}function n(){pr||(pr=!0,e.calledRun=!0,H||(K(),c(e),e.onRuntimeInitialized&&e.onRuntimeInitialized(),function(){if(!v){if(e.postRun)for("function"==typeof e.postRun&&(e.postRun=[e.postRun]);e.postRun.length;)r=e.postRun.shift(),$.unshift(r);var r;se($)}}()))}}if(e.PThread=de,e.PThread=de,e.wasmMemory=T,e.ExitStatus=Or,ne=function e(){pr||jr(),pr||(ne=e)},e.run=jr,e.preInit)for("function"==typeof e.preInit&&(e.preInit=[e.preInit]);e.preInit.length>0;)e.preInit.pop()();return v&&(A=!1,de.initWorker()),jr(),e.ready})},137:(e,r,n)=>{e.exports=n.p+"b43405dcb6a2a7e1b8cc.wasm"}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,